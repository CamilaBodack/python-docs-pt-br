# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-02-10 23:10+0000\n"
"Last-Translator: Vinicius Gubiani Ferreira <vini.g.fer@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../glossary.rst:5
msgid "Glossary"
msgstr "Glossário"

#: ../../glossary.rst:10
msgid "``>>>``"
msgstr "``>>>``"

#: ../../glossary.rst:12
msgid ""
"The default Python prompt of the interactive shell.  Often seen for code "
"examples which can be executed interactively in the interpreter."
msgstr ""
"O prompt Python padrão do shell interativo. Muitas vezes visto em exemplos "
"de código que podem ser executados de forma interativa no interpretador."

#: ../../glossary.rst:14
msgid "``...``"
msgstr "``...``"

#: ../../glossary.rst:16
msgid ""
"The default Python prompt of the interactive shell when entering code for an"
" indented code block, when within a pair of matching left and right "
"delimiters (parentheses, square brackets, curly braces or triple quotes), or"
" after specifying a decorator."
msgstr ""
"O prompt padrão do shell interativo do Python ao se digitar código em um "
"bloco indentado ou dentro de um par de delimitadores direita-esquerda .. "
"XXX: concordam com \"delimitadores direita-esquerda\"? (como parênteses, "
"colchetes ou chaves)."

#: ../../glossary.rst:20
msgid "2to3"
msgstr "2to3"

#: ../../glossary.rst:22
msgid ""
"A tool that tries to convert Python 2.x code to Python 3.x code by handling "
"most of the incompatibilities which can be detected by parsing the source "
"and traversing the parse tree."
msgstr ""
"Uma ferramenta que tenta converter o código Python 2.x para o código Python "
"3.x, manipulando a maioria das incompatibilidades que podem ser detectadas "
"analisando a origem e percorrendo toda a árvore de análise."

#: ../../glossary.rst:26
msgid ""
"2to3 is available in the standard library as :mod:`lib2to3`; a standalone "
"entry point is provided as :file:`Tools/scripts/2to3`.  See "
":ref:`2to3-reference`."
msgstr ""
" O 2to3 está disponível na biblioteca padrão como :mod:`lib2to3`; um ponto "
"de .. XXX: concordam com: \"ponto de entrada\"? entrada é disponibilizado "
"como :file:`Tools/scripts/2to3`. Veja :ref:`2to3-reference`."

#: ../../glossary.rst:29
msgid "abstract base class"
msgstr "Classe Base Abstrata"

#: ../../glossary.rst:31
msgid ""
"Abstract base classes complement :term:`duck-typing` by providing a way to "
"define interfaces when other techniques like :func:`hasattr` would be clumsy"
" or subtly wrong (for example with :ref:`magic methods <new-style-special-"
"lookup>`).  ABCs introduce virtual subclasses, which are classes that don't "
"inherit from a class but are still recognized by :func:`isinstance` and "
":func:`issubclass`; see the :mod:`abc` module documentation.  Python comes "
"with many built-in ABCs for data structures (in the :mod:`collections` "
"module), numbers (in the :mod:`numbers` module), and streams (in the "
":mod:`io` module). You can create your own ABCs with the :mod:`abc` module."
msgstr ""

#: ../../glossary.rst:41
msgid "argument"
msgstr "Argumento"

#: ../../glossary.rst:43
msgid ""
"A value passed to a :term:`function` (or :term:`method`) when calling the "
"function.  There are two types of arguments:"
msgstr ""

#: ../../glossary.rst:46
msgid ""
":dfn:`keyword argument`: an argument preceded by an identifier (e.g. "
"``name=``) in a function call or passed as a value in a dictionary preceded "
"by ``**``.  For example, ``3`` and ``5`` are both keyword arguments in the "
"following calls to :func:`complex`::"
msgstr ""
":dfn:`argumento nomeado`: um argumento precedido por um identificador (por "
"exemplo, ``nome=``) na chamada de uma função ou passada como um  valor em um"
" dicionário precedido por ``**``.  Por exemplo, ``3`` e ``5`` são ambos "
"argumentos nomeados na chamada da função  :func:`complex` a seguir::"

#: ../../glossary.rst:54
msgid ""
":dfn:`positional argument`: an argument that is not a keyword argument. "
"Positional arguments can appear at the beginning of an argument list and/or "
"be passed as elements of an :term:`iterable` preceded by ``*``. For example,"
" ``3`` and ``5`` are both positional arguments in the following calls::"
msgstr ""
":dfn:`argumento posicional`: um argumento que não é um argumento nomeado. "
"Argumentos posicionais podem aparecer no início da lista de argumentos e/ou "
"podem ser passados com elementos de um :term:`iterável<iterable>` precedido "
"por ``*``. Por exemplo, ``3`` e ``5`` são ambos argumentos posicionais nas "
"chamadas a seguir::"

#: ../../glossary.rst:63
msgid ""
"Arguments are assigned to the named local variables in a function body. See "
"the :ref:`calls` section for the rules governing this assignment. "
"Syntactically, any expression can be used to represent an argument; the "
"evaluated value is assigned to the local variable."
msgstr ""
"Argumentos são atribuídos às variáveis locais nomeadas no corpo da função. "
"Veja :ref:`calls` para as regras de atribuição. Sintaticamente, qualquer "
"expressão pode ser usada para representar um argumento; avaliada a "
"expressão, o valor é atribuído à variável local."

#: ../../glossary.rst:68
msgid ""
"See also the :term:`parameter` glossary entry and the FAQ question on "
":ref:`the difference between arguments and parameters <faq-argument-vs-"
"parameter>`."
msgstr ""

#: ../../glossary.rst:71
msgid "attribute"
msgstr "Atributo"

#: ../../glossary.rst:73
msgid ""
"A value associated with an object which is referenced by name using dotted "
"expressions.  For example, if an object *o* has an attribute *a* it would be"
" referenced as *o.a*."
msgstr ""
"Um valor associado a um objeto que é referenciado pelo nome separado por um "
"ponto. Por exemplo, se um objeto *o* tem um atributo *a* esse seria "
"referenciado como *o.a*."

#: ../../glossary.rst:76
msgid "BDFL"
msgstr "BDFL"

#: ../../glossary.rst:78
msgid ""
"Benevolent Dictator For Life, a.k.a. `Guido van Rossum "
"<https://www.python.org/~guido/>`_, Python's creator."
msgstr ""
" Iniciais para Benevolent Dictator For Life, ou ditador benevolente "
"vitalício. Uma referência ao `Guido van Rossum "
"<http://www.python.org/~guido/>`_, o criador do Python."

#: ../../glossary.rst:80
msgid "bytes-like object"
msgstr "objeto byte ou similar"

#: ../../glossary.rst:82
msgid ""
"An object that supports the :ref:`buffer protocol <bufferobjects>`, like "
":class:`str`, :class:`bytearray` or :class:`memoryview`. Bytes-like objects "
"can be used for various operations that expect binary data, such as "
"compression, saving to a binary file or sending over a socket. Some "
"operations need the binary data to be mutable, in which case not all bytes-"
"like objects can apply."
msgstr ""

#: ../../glossary.rst:88
msgid "bytecode"
msgstr "bytecode"

#: ../../glossary.rst:90
msgid ""
"Python source code is compiled into bytecode, the internal representation of"
" a Python program in the CPython interpreter.  The bytecode is also cached "
"in ``.pyc`` and ``.pyo`` files so that executing the same file is faster the"
" second time (recompilation from source to bytecode can be avoided).  This "
"\"intermediate language\" is said to run on a :term:`virtual machine` that "
"executes the machine code corresponding to each bytecode. Do note that "
"bytecodes are not expected to work between different Python virtual "
"machines, nor to be stable between Python releases."
msgstr ""

#: ../../glossary.rst:100
msgid ""
"A list of bytecode instructions can be found in the documentation for "
":ref:`the dis module <bytecodes>`."
msgstr ""
" Uma lista de instruções bytecode pode ser encontrada na documentação\n"
" para :ref:`o módulo dis <bytecodes>`."

#: ../../glossary.rst:102
msgid "class"
msgstr "Classe"

#: ../../glossary.rst:104
msgid ""
"A template for creating user-defined objects. Class definitions normally "
"contain method definitions which operate on instances of the class."
msgstr ""
" Um modelo para criação de objetos definidos pelo usuário. Definições de "
"classe normalmente contém definições de métodos que operam sobre instâncias "
"da classe."

#: ../../glossary.rst:107
msgid "classic class"
msgstr ""

#: ../../glossary.rst:109
msgid ""
"Any class which does not inherit from :class:`object`.  See :term:`new-style"
" class`.  Classic classes have been removed in Python 3."
msgstr ""

#: ../../glossary.rst:111
msgid "coercion"
msgstr "Coerção"

#: ../../glossary.rst:113
msgid ""
"The implicit conversion of an instance of one type to another during an "
"operation which involves two arguments of the same type.  For example, "
"``int(3.15)`` converts the floating point number to the integer ``3``, but "
"in ``3+4.5``, each argument is of a different type (one int, one float), and"
" both must be converted to the same type before they can be added or it will"
" raise a ``TypeError``.  Coercion between two operands can be performed with"
" the ``coerce`` built-in function; thus, ``3+4.5`` is equivalent to calling "
"``operator.add(*coerce(3, 4.5))`` and results in ``operator.add(3.0, 4.5)``."
"  Without coercion, all arguments of even compatible types would have to be "
"normalized to the same value by the programmer, e.g., ``float(3)+4.5`` "
"rather than just ``3+4.5``."
msgstr ""

#: ../../glossary.rst:124
msgid "complex number"
msgstr "Número Complexo"

#: ../../glossary.rst:126
msgid ""
"An extension of the familiar real number system in which all numbers are "
"expressed as a sum of a real part and an imaginary part.  Imaginary numbers "
"are real multiples of the imaginary unit (the square root of ``-1``), often "
"written ``i`` in mathematics or ``j`` in engineering.  Python has built-in "
"support for complex numbers, which are written with this latter notation; "
"the imaginary part is written with a ``j`` suffix, e.g., ``3+1j``.  To get "
"access to complex equivalents of the :mod:`math` module, use :mod:`cmath`.  "
"Use of complex numbers is a fairly advanced mathematical feature.  If you're"
" not aware of a need for them, it's almost certain you can safely ignore "
"them."
msgstr ""
" Uma extensão ao familiar sistema de números reais em que todos os números\n"
" são expressos como uma soma de uma parte real e uma parte imaginária.\n"
" Números imaginários são múltiplos reais da unidade imaginária (a raiz\n"
" quadrada de ``-1``), normalmente escrita como ``i`` em matemática ou\n"
" ``j`` em engenharia. O Python tem suporte nativo para números complexos,\n"
" que são escritos com esta última notação; a parte imaginária escrita com\n"
" um sufixo ``j``, p.ex., ``3+1j``. Para ter acesso aos equivalentes para\n"
" números complexos do módulo :mod:`math`, utilize :mod:`cmath`. O uso de\n"
" números complexos é uma funcionalidade matemática bastante avançada. Se\n"
" você não sabe se irá precisar deles, é quase certo que você pode\n"
" ignorá-los sem problemas."

#: ../../glossary.rst:136
msgid "context manager"
msgstr "Gerenciador de Contexto"

#: ../../glossary.rst:138
msgid ""
"An object which controls the environment seen in a :keyword:`with` statement"
" by defining :meth:`__enter__` and :meth:`__exit__` methods. See :pep:`343`."
msgstr ""
" Um objeto que controla o ambiente visto numa instrução :keyword:`with`\n"
" por meio da definição dos métodos :meth:`__enter__` e :meth:`__exit__`.\n"
" Veja :pep:`343`."

#: ../../glossary.rst:141
msgid "CPython"
msgstr "CPython"

#: ../../glossary.rst:143
msgid ""
"The canonical implementation of the Python programming language, as "
"distributed on `python.org <https://www.python.org>`_.  The term \"CPython\""
" is used when necessary to distinguish this implementation from others such "
"as Jython or IronPython."
msgstr ""
" A implementação canônica da linguagem de programação Python, como\n"
" disponibilizada pelo `python.org <http://python.org>`_. O termo\n"
" \"CPython\" é quando for necessário distinguir esta implementação de outras\n"
" como Jython ou IronPython."

#: ../../glossary.rst:147
msgid "decorator"
msgstr "decorator"

#: ../../glossary.rst:149
msgid ""
"A function returning another function, usually applied as a function "
"transformation using the ``@wrapper`` syntax.  Common examples for "
"decorators are :func:`classmethod` and :func:`staticmethod`."
msgstr ""
"Uma função que retorna outra função, geralmente aplicada como uma "
"transformação de função usando a sintaxe ``@wrapper``. Exemplos comuns para "
"decoradores são :func:`classmethod` e :func:`staticmethod`."

#: ../../glossary.rst:153
msgid ""
"The decorator syntax is merely syntactic sugar, the following two function "
"definitions are semantically equivalent::"
msgstr ""
"A sintaxe do decorador é meramente um açucar-sintático, as duas definições "
"de funções seguintes são semanticamente equivalentes::"

#: ../../glossary.rst:164
msgid ""
"The same concept exists for classes, but is less commonly used there.  See "
"the documentation for :ref:`function definitions <function>` and :ref:`class"
" definitions <class>` for more about decorators."
msgstr ""
"O mesmo conceito existe para as classes, mas não é comumente utilizado. Veja"
" a documentação de :ref:`function definitions <function>` e  :ref:`class "
"definitions <class>` para obter mais informações sobre decoradores."

#: ../../glossary.rst:167
msgid "descriptor"
msgstr "Descriptor"

#: ../../glossary.rst:169
msgid ""
"Any *new-style* object which defines the methods :meth:`__get__`, "
":meth:`__set__`, or :meth:`__delete__`.  When a class attribute is a "
"descriptor, its special binding behavior is triggered upon attribute lookup."
"  Normally, using *a.b* to get, set or delete an attribute looks up the "
"object named *b* in the class dictionary for *a*, but if *b* is a "
"descriptor, the respective descriptor method gets called.  Understanding "
"descriptors is a key to a deep understanding of Python because they are the "
"basis for many features including functions, methods, properties, class "
"methods, static methods, and reference to super classes."
msgstr ""

#: ../../glossary.rst:179
msgid ""
"For more information about descriptors' methods, see :ref:`descriptors`."
msgstr ""
"Para obter mais informações sobre os métodos dos descritores, veja:  "
":ref:`descriptors`."

#: ../../glossary.rst:180
msgid "dictionary"
msgstr "dicionário"

#: ../../glossary.rst:182
msgid ""
"An associative array, where arbitrary keys are mapped to values.  The keys "
"can be any object with :meth:`__hash__`  and :meth:`__eq__` methods. Called "
"a hash in Perl."
msgstr ""

#: ../../glossary.rst:185
msgid "dictionary view"
msgstr "visualização de dicionário"

#: ../../glossary.rst:187
msgid ""
"The objects returned from :meth:`dict.viewkeys`, :meth:`dict.viewvalues`, "
"and :meth:`dict.viewitems` are called dictionary views. They provide a "
"dynamic view on the dictionary’s entries, which means that when the "
"dictionary changes, the view reflects these changes. To force the dictionary"
" view to become a full list use ``list(dictview)``.  See :ref:`dict-views`."
msgstr ""

#: ../../glossary.rst:193
msgid "docstring"
msgstr "docstring"

#: ../../glossary.rst:195
msgid ""
"A string literal which appears as the first expression in a class, function "
"or module.  While ignored when the suite is executed, it is recognized by "
"the compiler and put into the :attr:`__doc__` attribute of the enclosing "
"class, function or module.  Since it is available via introspection, it is "
"the canonical place for documentation of the object."
msgstr ""
"Uma String literal que aparece como a primeira expressão em uma classe, "
"função ou módulo. Embora ignorado quando o pacote é executado, o mesmo é "
"reconhecido pelo compilador e colocado no atributo :attr:`__doc__` da "
"classe, função ou módulo que a envolve. Uma vez que está disponível através "
"da introspecção, é o lugar canônico para a documentação do objeto."

#: ../../glossary.rst:201
msgid "duck-typing"
msgstr "duck-typing"

#: ../../glossary.rst:203
msgid ""
"A programming style which does not look at an object's type to determine if "
"it has the right interface; instead, the method or attribute is simply "
"called or used (\"If it looks like a duck and quacks like a duck, it must be"
" a duck.\")  By emphasizing interfaces rather than specific types, well-"
"designed code improves its flexibility by allowing polymorphic substitution."
"  Duck-typing avoids tests using :func:`type` or :func:`isinstance`.  (Note,"
" however, that duck-typing can be complemented with :term:`abstract base "
"classes <abstract base class>`.)  Instead, it typically employs "
":func:`hasattr` tests or :term:`EAFP` programming."
msgstr ""
" Um estilo de programação que não verifica o tipo do objeto para determinar\n"
" se ele possui a interface correta; em vez disso, o método ou atributo é\n"
" simplesmente chamado ou utilizado (\"Se se parece com um pato e grasna como\n"
" um pato, então deve ser um pato.\") Enfatizando interfaces ao invés de\n"
" tipos específicos, o código bem desenvolvido aprimora sua flexibilidade\n"
" por permitir substituição polimórfica. Tipagem pato evita necessidade de\n"
" testes que usem :func:`type` ou :func:`isinstance`. (Note, porém, que a\n"
" a tipagem pato pode ser complementada com o uso de\n"
" :term:`classes base abstratas <abstract base class>`.) Ao invés\n"
" disso, são normalmente empregados testes :func:`hasattr` ou programação\n"
" :term:`EAFP`."

#: ../../glossary.rst:212
msgid "EAFP"
msgstr "EAFP"

#: ../../glossary.rst:214
msgid ""
"Easier to ask for forgiveness than permission.  This common Python coding "
"style assumes the existence of valid keys or attributes and catches "
"exceptions if the assumption proves false.  This clean and fast style is "
"characterized by the presence of many :keyword:`try` and :keyword:`except` "
"statements.  The technique contrasts with the :term:`LBYL` style common to "
"many other languages such as C."
msgstr ""
" Iniciais da expressão em inglês \"easier to ask for forgiveness than\n"
" permission\" que significa \"é mais fácil perdir perdão que permissão\".\n"
" Este estilo de codificação comum em Python assume a existência de chaves\n"
" ou atributos válidos e captura exceções caso essa premissa se prove falsa.\n"
" Este estilo limpo e rápido se caracteriza pela presença de várias\n"
" declarações :keyword:`try` e :keyword:`except`. A técnica diverge do\n"
" estilo :term:`LBYL`, comum em outras linguagens como C, por exemplo."

#: ../../glossary.rst:220
msgid "expression"
msgstr "Expressão"

#: ../../glossary.rst:222
msgid ""
"A piece of syntax which can be evaluated to some value.  In other words, an "
"expression is an accumulation of expression elements like literals, names, "
"attribute access, operators or function calls which all return a value.  In "
"contrast to many other languages, not all language constructs are "
"expressions.  There are also :term:`statement`\\s which cannot be used as "
"expressions, such as :keyword:`print` or :keyword:`if`.  Assignments are "
"also statements, not expressions."
msgstr ""

#: ../../glossary.rst:229
msgid "extension module"
msgstr "extension module (módulo de extensão)"

#: ../../glossary.rst:231
msgid ""
"A module written in C or C++, using Python's C API to interact with the core"
" and with user code."
msgstr ""
"Um módulo escrito em C ou C ++, usando a API C do Python para interagir com "
"o núcleo e com o código do usuário."

#: ../../glossary.rst:233
msgid "file object"
msgstr "file object (arquivo objeto)"

#: ../../glossary.rst:235
msgid ""
"An object exposing a file-oriented API (with methods such as :meth:`read()` "
"or :meth:`write()`) to an underlying resource.  Depending on the way it was "
"created, a file object can mediate access to a real on-disk file or to "
"another type of storage or communication device (for example standard "
"input/output, in-memory buffers, sockets, pipes, etc.).  File objects are "
"also called :dfn:`file-like objects` or :dfn:`streams`."
msgstr ""
"Um objeto que expõe uma API orientada a arquivos (com métodos como "
":meth:`read ()` ou :meth:`write ()`) para um recurso subjacente. Dependendo "
"da maneira como for criado, um file object pode mediar o acesso a um arquivo"
" real no disco ou a outro tipo de dispositivo de armazenamento ou com alguma"
" comunicação (por exemplo, entrada/saída padrão, buffers na memória, "
"soquetes, pipes e etc.) . Os objetos de arquivo também são chamados "
":dfn:`file-like objects` ou :dfn:`streams`."

#: ../../glossary.rst:243
msgid ""
"There are actually three categories of file objects: raw binary files, "
"buffered binary files and text files.  Their interfaces are defined in the "
":mod:`io` module.  The canonical way to create a file object is by using the"
" :func:`open` function."
msgstr ""

#: ../../glossary.rst:247
msgid "file-like object"
msgstr "file-like object (objeto como a um arquivo)"

#: ../../glossary.rst:249
msgid "A synonym for :term:`file object`."
msgstr "Um sinônimo do termo :term:`file object`."

#: ../../glossary.rst:250
msgid "finder"
msgstr "finder"

#: ../../glossary.rst:252
msgid ""
"An object that tries to find the :term:`loader` for a module. It must "
"implement a method named :meth:`find_module`. See :pep:`302` for details."
msgstr ""

#: ../../glossary.rst:255
msgid "floor division"
msgstr "floor division"

#: ../../glossary.rst:257
msgid ""
"Mathematical division that rounds down to nearest integer.  The floor "
"division operator is ``//``.  For example, the expression ``11 // 4`` "
"evaluates to ``2`` in contrast to the ``2.75`` returned by float true "
"division.  Note that ``(-11) // 4`` is ``-3`` because that is ``-2.75`` "
"rounded *downward*. See :pep:`238`."
msgstr ""
" Divisão matemática que arredonda para baixo para o inteiro mais próximo.\n"
" O operador de divisão pelo piso é ``//``. Por exemplo, a expressão\n"
" ``11 // 4`` retorna o valor ``2`` ao invés de ``2.75``, que seria\n"
" retornado pela divisão de ponto flutuante. Note que ``(-11) // 4`` é\n"
" ``-3`` porque é ``-2.75`` arredondado *para baixo*. Consulte a\n"
" :pep:`238`."

#: ../../glossary.rst:262
msgid "function"
msgstr "function (função)"

#: ../../glossary.rst:264
msgid ""
"A series of statements which returns some value to a caller. It can also be "
"passed zero or more :term:`arguments <argument>` which may be used in the "
"execution of the body. See also :term:`parameter`, :term:`method`, and the "
":ref:`function` section."
msgstr ""
" Um conjunto de instruções que devolve algum valor para quem a invoca.\n"
" Uma função pode receber zero ou mais argumentos que podem ser usados na\n"
" execução do corpo. Veja também :term:`argumento` e :term:`método`."

#: ../../glossary.rst:268
msgid "__future__"
msgstr "__future__"

#: ../../glossary.rst:270
msgid ""
"A pseudo-module which programmers can use to enable new language features "
"which are not compatible with the current interpreter.  For example, the "
"expression ``11/4`` currently evaluates to ``2``. If the module in which it "
"is executed had enabled *true division* by executing::"
msgstr ""

#: ../../glossary.rst:277
msgid ""
"the expression ``11/4`` would evaluate to ``2.75``.  By importing the "
":mod:`__future__` module and evaluating its variables, you can see when a "
"new feature was first added to the language and when it will become the "
"default::"
msgstr ""

#: ../../glossary.rst:285
msgid "garbage collection"
msgstr "garbage collection (coletor de lixo)"

#: ../../glossary.rst:287
msgid ""
"The process of freeing memory when it is not used anymore.  Python performs "
"garbage collection via reference counting and a cyclic garbage collector "
"that is able to detect and break reference cycles."
msgstr ""
" O processo de liberação de memória quando ela não está mais sendo usada. O "
"Python executa coleta de lixo por meio da contagem de referências e um "
"coletor de lixo cíclico é capaz de detectar e quebrar referências cíclicas."

#: ../../glossary.rst:292
msgid "generator"
msgstr "generator"

#: ../../glossary.rst:294
msgid ""
"A function which returns an iterator.  It looks like a normal function "
"except that it contains :keyword:`yield` statements for producing a series "
"of values usable in a for-loop or that can be retrieved one at a time with "
"the :func:`next` function. Each :keyword:`yield` temporarily suspends "
"processing, remembering the location execution state (including local "
"variables and pending try-statements).  When the generator resumes, it picks"
" up where it left off (in contrast to functions which start fresh on every "
"invocation)."
msgstr ""

#: ../../glossary.rst:304
msgid "generator expression"
msgstr "generator expression"

#: ../../glossary.rst:306
msgid ""
"An expression that returns an iterator.  It looks like a normal expression "
"followed by a :keyword:`for` expression defining a loop variable, range, and"
" an optional :keyword:`if` expression.  The combined expression generates "
"values for an enclosing function::"
msgstr ""
"Uma expressão que retorna um iterador. É semelhante a uma expressão que\n"
" é seguida por uma expressão :keyword:`for` que define uma variável de um\n"
" laço, um intervalo e uma expressão :keyword:`if` opcional. A expressão\n"
" combinada gera valores para a função onde está contida::"

#: ../../glossary.rst:313
msgid "GIL"
msgstr "GIL"

#: ../../glossary.rst:315
msgid "See :term:`global interpreter lock`."
msgstr "Veja :term:`global interpreter lock`."

#: ../../glossary.rst:316
msgid "global interpreter lock"
msgstr "global interpreter lock (bloqueio global do intérprete)"

#: ../../glossary.rst:318
msgid ""
"The mechanism used by the :term:`CPython` interpreter to assure that only "
"one thread executes Python :term:`bytecode` at a time. This simplifies the "
"CPython implementation by making the object model (including critical built-"
"in types such as :class:`dict`) implicitly safe against concurrent access.  "
"Locking the entire interpreter makes it easier for the interpreter to be "
"multi-threaded, at the expense of much of the parallelism afforded by multi-"
"processor machines."
msgstr ""
" O mecanismo utilizado pelo interpretador :term:`CPython` para garantir\n"
" que apenas uma thread execute o :term:`bytecode` Python por vez. Isto\n"
" simplifica a implementação do CPython ao fazer com que o modelo de\n"
" objetos (incluindo tipos internos críticos como o :class:`dict`) ganhem\n"
" segurança implícita contra acesso concorrente. Travar todo o\n"
" interpretador facilita que o interpretador em si seja multitarefa, às\n"
" custas de muito do paralelismo já provido por máquinas multiprocessador."

#: ../../glossary.rst:327
msgid ""
"However, some extension modules, either standard or third-party, are "
"designed so as to release the GIL when doing computationally-intensive tasks"
" such as compression or hashing.  Also, the GIL is always released when "
"doing I/O."
msgstr ""
" No entanto, alguns módulos de extensão, tanto da biblioteca padrão quanto\n"
" de terceiros, são desenvolvidos de forma a liberar o GIL ao realizar\n"
" tarefas computacionalmente muito intensas, como compactação ou cálculos\n"
" de hash. Além disso, o GIL é sempre liberado nas operações de E/S."

#: ../../glossary.rst:332
msgid ""
"Past efforts to create a \"free-threaded\" interpreter (one which locks "
"shared data at a much finer granularity) have not been successful because "
"performance suffered in the common single-processor case. It is believed "
"that overcoming this performance issue would make the implementation much "
"more complicated and therefore costlier to maintain."
msgstr ""
" No passado, esforços para criar um interpretador que lidasse plenamente\n"
" com threads (travando dados compartilhados numa granularidade bem mais\n"
" fina) não foram bem sucedidos devido a queda no desempenho ao serem\n"
" executados em processadores de apenas um núcleo. Acredita-se que superar\n"
" essa questão de desempenho acabaria tornando a implementação muito mais\n"
" complicada e bem mais difícil de manter."

#: ../../glossary.rst:337
msgid "hashable"
msgstr "hashable"

#: ../../glossary.rst:339
msgid ""
"An object is *hashable* if it has a hash value which never changes during "
"its lifetime (it needs a :meth:`__hash__` method), and can be compared to "
"other objects (it needs an :meth:`__eq__` or :meth:`__cmp__` method). "
"Hashable objects which compare equal must have the same hash value."
msgstr ""

#: ../../glossary.rst:344
msgid ""
"Hashability makes an object usable as a dictionary key and a set member, "
"because these data structures use the hash value internally."
msgstr ""
" A hashabilidade faz com que um objeto possa ser usado como chave de um\n"
" dicionário e como membro de um conjunto, pois estas estruturas de dados\n"
" utilizam os valores de hash internamente."

#: ../../glossary.rst:347
msgid ""
"All of Python's immutable built-in objects are hashable, while no mutable "
"containers (such as lists or dictionaries) are.  Objects which are instances"
" of user-defined classes are hashable by default; they all compare unequal "
"(except with themselves), and their hash value is derived from their "
":func:`id`."
msgstr ""

#: ../../glossary.rst:352
msgid "IDLE"
msgstr "IDLE"

#: ../../glossary.rst:354
msgid ""
"An Integrated Development Environment for Python.  IDLE is a basic editor "
"and interpreter environment which ships with the standard distribution of "
"Python."
msgstr ""
"Um Ambiente de Desenvolvimento Integrado nativo do Python. IDLE é um editor "
"básico e um ambiente que acompanha um intérprete e é disponibilizado junto "
"com a distribuição padrão do Python."

#: ../../glossary.rst:357
msgid "immutable"
msgstr "immutable (imutável)"

#: ../../glossary.rst:359
msgid ""
"An object with a fixed value.  Immutable objects include numbers, strings "
"and tuples.  Such an object cannot be altered.  A new object has to be "
"created if a different value has to be stored.  They play an important role "
"in places where a constant hash value is needed, for example as a key in a "
"dictionary."
msgstr ""
" Um objeto que possui um valor fixo. Objetos imutáveis incluem números,\n"
" strings e tuplas. Estes objetos não podem ser alterados. Um novo objeto\n"
" deve ser criado se um valor diferente tiver de ser armazenado. Objetos\n"
" imutáveis têm um papel importante em lugares onde um valor constante de\n"
" hash seja necessário, como por exemplo uma chave em um dicionário."

#: ../../glossary.rst:364
msgid "integer division"
msgstr ""

#: ../../glossary.rst:366
msgid ""
"Mathematical division discarding any remainder.  For example, the expression"
" ``11/4`` currently evaluates to ``2`` in contrast to the ``2.75`` returned "
"by float division.  Also called *floor division*. When dividing two integers"
" the outcome will always be another integer (having the floor function "
"applied to it). However, if one of the operands is another numeric type "
"(such as a :class:`float`), the result will be coerced (see "
":term:`coercion`) to a common type.  For example, an integer divided by a "
"float will result in a float value, possibly with a decimal fraction.  "
"Integer division can be forced by using the ``//`` operator instead of the "
"``/`` operator.  See also :term:`__future__`."
msgstr ""

#: ../../glossary.rst:376
msgid "importing"
msgstr "importing (importando)"

#: ../../glossary.rst:378
msgid ""
"The process by which Python code in one module is made available to Python "
"code in another module."
msgstr ""
"O processo pelo qual o código Python em um módulo é disponibilizado para o "
"código Python em outro módulo."

#: ../../glossary.rst:380
msgid "importer"
msgstr "importer"

#: ../../glossary.rst:382
msgid ""
"An object that both finds and loads a module; both a :term:`finder` and "
":term:`loader` object."
msgstr ""
"Um objeto que localiza e carrega um módulo; Tanto um :term:`finder` e o "
"objeto :term:`loader`."

#: ../../glossary.rst:384
msgid "interactive"
msgstr "interactive"

#: ../../glossary.rst:386
msgid ""
"Python has an interactive interpreter which means you can enter statements "
"and expressions at the interpreter prompt, immediately execute them and see "
"their results.  Just launch ``python`` with no arguments (possibly by "
"selecting it from your computer's main menu). It is a very powerful way to "
"test out new ideas or inspect modules and packages (remember ``help(x)``)."
msgstr ""
" Python tem um interpretador interativo, o que significa que você pode\n"
" digitar comandos e expressões no prompt do interpretador, executá-los\n"
" imediatamente e ver seus resultados. Apenas execute ``python`` sem\n"
" argumentos (possivelmente selecionando-o a partir do menu de aplicações\n"
" de seu sistema operacional). O interpretador interativo é uma maneira\n"
" poderosa de testar novas ideias ou aprender mais sobre módulos e pacotes\n"
" (lembre-se do comando ``help(x)``)."

#: ../../glossary.rst:392
msgid "interpreted"
msgstr "interpreted"

#: ../../glossary.rst:394
msgid ""
"Python is an interpreted language, as opposed to a compiled one, though the "
"distinction can be blurry because of the presence of the bytecode compiler."
"  This means that source files can be run directly without explicitly "
"creating an executable which is then run. Interpreted languages typically "
"have a shorter development/debug cycle than compiled ones, though their "
"programs generally also run more slowly.  See also :term:`interactive`."
msgstr ""
" Python é uma linguagem interpretada, em oposição àquelas que são\n"
" compiladas, embora esta distinção possa ser nebulosa devido à presença do\n"
" compilador de bytecode. Isto significa que os arquivos-fontes podem ser\n"
" executados diretamente sem necessidade explícita de se criar um arquivo\n"
" executável. Linguagens interpretadas normalmente têm um ciclo de\n"
" desenvolvimento/depuração mais curto que as linguagens compiladas, apesar\n"
" de seus programas geralmente serem executados mais lentamente. Veja\n"
" também :term:`interativo`."

#: ../../glossary.rst:401
msgid "iterable"
msgstr "iterable (Iterável)"

#: ../../glossary.rst:403
msgid ""
"An object capable of returning its members one at a time. Examples of "
"iterables include all sequence types (such as :class:`list`, :class:`str`, "
"and :class:`tuple`) and some non-sequence types like :class:`dict` and "
":class:`file` and objects of any classes you define with an :meth:`__iter__`"
" or :meth:`__getitem__` method.  Iterables can be used in a :keyword:`for` "
"loop and in many other places where a sequence is needed (:func:`zip`, "
":func:`map`, ...).  When an iterable object is passed as an argument to the "
"built-in function :func:`iter`, it returns an iterator for the object.  This"
" iterator is good for one pass over the set of values.  When using "
"iterables, it is usually not necessary to call :func:`iter` or deal with "
"iterator objects yourself.  The ``for`` statement does that automatically "
"for you, creating a temporary unnamed variable to hold the iterator for the "
"duration of the loop.  See also :term:`iterator`, :term:`sequence`, and "
":term:`generator`."
msgstr ""

#: ../../glossary.rst:417
msgid "iterator"
msgstr "iterator (Iterador)"

#: ../../glossary.rst:419
msgid ""
"An object representing a stream of data.  Repeated calls to the iterator's "
":meth:`~generator.next` method return successive items in the stream.  When "
"no more data are available a :exc:`StopIteration` exception is raised "
"instead.  At this point, the iterator object is exhausted and any further "
"calls to its :meth:`~generator.next` method just raise :exc:`StopIteration` "
"again.  Iterators are required to have an :meth:`__iter__` method that "
"returns the iterator object itself so every iterator is also iterable and "
"may be used in most places where other iterables are accepted.  One notable "
"exception is code which attempts multiple iteration passes.  A container "
"object (such as a :class:`list`) produces a fresh new iterator each time you"
" pass it to the :func:`iter` function or use it in a :keyword:`for` loop.  "
"Attempting this with an iterator will just return the same exhausted "
"iterator object used in the previous iteration pass, making it appear like "
"an empty container."
msgstr ""

#: ../../glossary.rst:433
msgid "More information can be found in :ref:`typeiter`."
msgstr "Mais informações pode ser encontrada em :ref:`typeiter`."

#: ../../glossary.rst:434
msgid "key function"
msgstr "key function (função chave)"

#: ../../glossary.rst:436
msgid ""
"A key function or collation function is a callable that returns a value used"
" for sorting or ordering.  For example, :func:`locale.strxfrm` is used to "
"produce a sort key that is aware of locale specific sort conventions."
msgstr ""
" Uma função chave ou função colação é algo que retorna um valor utilizado\n"
" para ordenação ou classificação. Por exemplo, :func:`locale.strxfrm` é\n"
" usada para produzir uma chave de ordenação que leva o locale em\n"
" consideração para fins de ordenação."

#: ../../glossary.rst:441
msgid ""
"A number of tools in Python accept key functions to control how elements are"
" ordered or grouped.  They include :func:`min`, :func:`max`, :func:`sorted`,"
" :meth:`list.sort`, :func:`heapq.nsmallest`, :func:`heapq.nlargest`, and "
":func:`itertools.groupby`."
msgstr ""

#: ../../glossary.rst:446
msgid ""
"There are several ways to create a key function.  For example. the "
":meth:`str.lower` method can serve as a key function for case insensitive "
"sorts.  Alternatively, an ad-hoc key function can be built from a "
":keyword:`lambda` expression such as ``lambda r: (r[0], r[2])``.  Also, the "
":mod:`operator` module provides three key function constructors: "
":func:`~operator.attrgetter`, :func:`~operator.itemgetter`, and "
":func:`~operator.methodcaller`.  See the :ref:`Sorting HOW TO "
"<sortinghowto>` for examples of how to create and use key functions."
msgstr ""

#: ../../glossary.rst:454
msgid "keyword argument"
msgstr "keyword argument (Argumento de Palavra-Chave)"

#: ../../glossary.rst:456 ../../glossary.rst:650
msgid "See :term:`argument`."
msgstr "Veja o :term:`argument`."

#: ../../glossary.rst:457
msgid "lambda"
msgstr "lambda"

#: ../../glossary.rst:459
msgid ""
"An anonymous inline function consisting of a single :term:`expression` which"
" is evaluated when the function is called.  The syntax to create a lambda "
"function is ``lambda [parameters]: expression``"
msgstr ""
"Uma função de linha anônima consistindo de uma única :term:`expression`, que"
" é avaliada quando a função é chamada. A sintaxe para criar uma função "
"lambda é ``lambda [parameters]: expression``"

#: ../../glossary.rst:462
msgid "LBYL"
msgstr "LBYL"

#: ../../glossary.rst:464
msgid ""
"Look before you leap.  This coding style explicitly tests for pre-conditions"
" before making calls or lookups.  This style contrasts with the :term:`EAFP`"
" approach and is characterized by the presence of many :keyword:`if` "
"statements."
msgstr ""
" Iniciais da expressão em inglês \"look before you leap\", que significa\n"
" algo como \"olhe antes de pisar\". Este estilo de codificação testa as\n"
" pré-condições explicitamente antes de fazer chamadas ou buscas. Este\n"
" estilo contrasta com a abordagem :term:`EAFP` e é caracterizada pela\n"
" presença de muitos comandos :keyword:`if`."

#: ../../glossary.rst:469
msgid ""
"In a multi-threaded environment, the LBYL approach can risk introducing a "
"race condition between \"the looking\" and \"the leaping\".  For example, "
"the code, ``if key in mapping: return mapping[key]`` can fail if another "
"thread removes *key* from *mapping* after the test, but before the lookup. "
"This issue can be solved with locks or by using the EAFP approach."
msgstr ""
" In a multi-threaded environment, the LBYL approach can risk introducing a\n"
" race condition between \"the looking\" and \"the leaping\". For example, the\n"
" code, ``if key in mapping: return mapping[key]`` can fail if another\n"
" thread removes *key* from *mapping* after the test, but before the lookup.\n"
" This issue can be solved with locks or by using the EAFP approach."

#: ../../glossary.rst:474
msgid "list"
msgstr "list"

#: ../../glossary.rst:476
msgid ""
"A built-in Python :term:`sequence`.  Despite its name it is more akin to an "
"array in other languages than to a linked list since access to elements is "
"O(1)."
msgstr ""
"Uma :term:`sequence` embutida no Python. Apesar do seu nome, é mais próximo "
"de um vetor em outras linguagens do que uma lista encadeada, como o acesso "
"aos elementos é da ordem O(1)."

#: ../../glossary.rst:479
msgid "list comprehension"
msgstr "list comprehension"

#: ../../glossary.rst:481
msgid ""
"A compact way to process all or part of the elements in a sequence and "
"return a list with the results.  ``result = [\"0x%02x\" % x for x in "
"range(256) if x % 2 == 0]`` generates a list of strings containing even hex "
"numbers (0x..) in the range from 0 to 255. The :keyword:`if` clause is "
"optional.  If omitted, all elements in ``range(256)`` are processed."
msgstr ""

#: ../../glossary.rst:487
msgid "loader"
msgstr "loader"

#: ../../glossary.rst:489
msgid ""
"An object that loads a module. It must define a method named "
":meth:`load_module`. A loader is typically returned by a :term:`finder`. See"
" :pep:`302` for details."
msgstr ""

#: ../../glossary.rst:492
msgid "magic method"
msgstr "método mágico"

#: ../../glossary.rst:496
msgid "An informal synonym for :term:`special method`."
msgstr "Um sinônimo informal para um :term:`special method`."

#: ../../glossary.rst:497
msgid "mapping"
msgstr "mapping"

#: ../../glossary.rst:499
msgid ""
"A container object that supports arbitrary key lookups and implements the "
"methods specified in the :class:`~collections.Mapping` or "
":class:`~collections.MutableMapping` :ref:`abstract base classes "
"<collections-abstract-base-classes>`.  Examples include :class:`dict`, "
":class:`collections.defaultdict`, :class:`collections.OrderedDict` and "
":class:`collections.Counter`."
msgstr ""

#: ../../glossary.rst:505
msgid "metaclass"
msgstr "metaclass"

#: ../../glossary.rst:507
msgid ""
"The class of a class.  Class definitions create a class name, a class "
"dictionary, and a list of base classes.  The metaclass is responsible for "
"taking those three arguments and creating the class.  Most object oriented "
"programming languages provide a default implementation.  What makes Python "
"special is that it is possible to create custom metaclasses.  Most users "
"never need this tool, but when the need arises, metaclasses can provide "
"powerful, elegant solutions.  They have been used for logging attribute "
"access, adding thread-safety, tracking object creation, implementing "
"singletons, and many other tasks."
msgstr ""
" A classe de uma classe. Definições de classe criam um nome de classe,\n"
" um dicionário de classe e uma lista de classes base. A metaclasse é\n"
" responsável por receber estes três argumentos e criar a classe. A\n"
" maioria das linguagens de programação orientadas a objetos provê uma\n"
" implementação default. O que torna o Python especial é o fato de ser\n"
" possível criar metaclasses personalizadas. A maioria dos usuários nunca\n"
" vai precisar deste recurso, mas quando houver necessidade, metaclasses\n"
" possibilitam soluções poderosas e elegantes. Metaclasses têm sido\n"
" utilizadas para gerar registros de acesso a atributos, para incluir\n"
" proteção contra acesso concorrente, rastrear a criação de objetos,\n"
" implementar singletons, dentre muitas outras tarefas."

#: ../../glossary.rst:517
msgid "More information can be found in :ref:`metaclasses`."
msgstr " Mais informações podem ser encontradas em :ref:`metaclasses`."

#: ../../glossary.rst:518
msgid "method"
msgstr "method (método)"

#: ../../glossary.rst:520
msgid ""
"A function which is defined inside a class body.  If called as an attribute "
"of an instance of that class, the method will get the instance object as its"
" first :term:`argument` (which is usually called ``self``). See "
":term:`function` and :term:`nested scope`."
msgstr ""
" Uma função que é definida dentro do corpo de uma classe. Se chamada como\n"
" um atributo de uma instância daquela classe, o método receberá a\n"
" instância do objeto como seu primeiro :term:`argumento` (que comumente\n"
" é chamado de ``self``). Veja :term:`função` e :term:`nested scope`."

#: ../../glossary.rst:524
msgid "method resolution order"
msgstr "method resolution order (ordem de resolução de método)"

#: ../../glossary.rst:526
msgid ""
"Method Resolution Order is the order in which base classes are searched for "
"a member during lookup. See `The Python 2.3 Method Resolution Order "
"<https://www.python.org/download/releases/2.3/mro/>`_ for details of the "
"algorithm used by the Python interpreter since the 2.3 release."
msgstr ""
" Ordem de resolução de métodos é a ordem em que os membros de uma classe "
"base são buscados durante a pesquisa. Veja `A ordem de resolução de métodos "
"do Python 2.3 <http://www.python.org/download/releases/2.3/mro/>`_."

#: ../../glossary.rst:530
msgid "module"
msgstr "module (módulo)"

#: ../../glossary.rst:532
msgid ""
"An object that serves as an organizational unit of Python code.  Modules "
"have a namespace containing arbitrary Python objects.  Modules are loaded "
"into Python by the process of :term:`importing`."
msgstr ""
"Um objeto que serve como uma unidade organizacional de código Python. Os "
"módulos têm um namespace contendo objetos Python arbitrários. Os módulos são"
" carregados pelo Python através do processo de: term: `importing`."

#: ../../glossary.rst:536
msgid "See also :term:`package`."
msgstr "Veja também :term:`package`."

#: ../../glossary.rst:537
msgid "MRO"
msgstr "MRO"

#: ../../glossary.rst:539
msgid "See :term:`method resolution order`."
msgstr "Veja :term:`method resolution order`."

#: ../../glossary.rst:540
msgid "mutable"
msgstr "mutable (mutável)"

#: ../../glossary.rst:542
msgid ""
"Mutable objects can change their value but keep their :func:`id`.  See also "
":term:`immutable`."
msgstr ""
"Objetos mutáveis podem alterar seus valores, mantendo os respectivos  "
":func:`id`. Veja também :term:`immutable`."

#: ../../glossary.rst:544
msgid "named tuple"
msgstr "named tuple"

#: ../../glossary.rst:546
msgid ""
"Any tuple-like class whose indexable elements are also accessible using "
"named attributes (for example, :func:`time.localtime` returns a tuple-like "
"object where the *year* is accessible either with an index such as ``t[0]`` "
"or with a named attribute like ``t.tm_year``)."
msgstr ""
" Qualquer classe semelhante a uma tupla cujos elementos indexados também\n"
" sejam acessíveis por meio de atributos nomeados (como exemplo, tem-se o\n"
" :func:`time.localtime` que devolve um objeto semelhante à uma tupla em\n"
" que o *ano* é acessível tanto através de um índice, como ``t[0]``, quanto\n"
" por um atributo nomeado como ``t.tm_year``)."

#: ../../glossary.rst:551
msgid ""
"A named tuple can be a built-in type such as :class:`time.struct_time`, or "
"it can be created with a regular class definition.  A full featured named "
"tuple can also be created with the factory function "
":func:`collections.namedtuple`.  The latter approach automatically provides "
"extra features such as a self-documenting representation like "
"``Employee(name='jones', title='programmer')``."
msgstr ""
" Uma tupla nomeada pode ser um tipo nativo como :class:`time.struct_time`,\n"
" ou pode ser criado com uma definição de classe normal. Uma tupla nomeada\n"
" também pode ser criada com a função fábrica\n"
" :func:`collections.namedtuple`. Esta última abordagem também provê\n"
" automaticamente alguns recursos extras, como uma representação\n"
" autodocumentada como ``Empregado(nome='jones', cargo='programador')``."

#: ../../glossary.rst:557
msgid "namespace"
msgstr "namespace"

#: ../../glossary.rst:559
msgid ""
"The place where a variable is stored.  Namespaces are implemented as "
"dictionaries.  There are the local, global and built-in namespaces as well "
"as nested namespaces in objects (in methods).  Namespaces support modularity"
" by preventing naming conflicts.  For instance, the functions "
":func:`__builtin__.open` and :func:`os.open` are distinguished by their "
"namespaces.  Namespaces also aid readability and maintainability by making "
"it clear which module implements a function.  For instance, writing "
":func:`random.seed` or :func:`itertools.izip` makes it clear that those "
"functions are implemented by the :mod:`random` and :mod:`itertools` modules,"
" respectively."
msgstr ""

#: ../../glossary.rst:569
msgid "nested scope"
msgstr "nested scope (escopo aninhado)"

#: ../../glossary.rst:571
msgid ""
"The ability to refer to a variable in an enclosing definition.  For "
"instance, a function defined inside another function can refer to variables "
"in the outer function.  Note that nested scopes work only for reference and "
"not for assignment which will always write to the innermost scope.  In "
"contrast, local variables both read and write in the innermost scope.  "
"Likewise, global variables read and write to the global namespace."
msgstr ""

#: ../../glossary.rst:577
msgid "new-style class"
msgstr "new-style class (novo estilo de classes)"

#: ../../glossary.rst:579
msgid ""
"Any class which inherits from :class:`object`.  This includes all built-in "
"types like :class:`list` and :class:`dict`.  Only new-style classes can use "
"Python's newer, versatile features like :attr:`~object.__slots__`, "
"descriptors, properties, and :meth:`__getattribute__`."
msgstr ""

#: ../../glossary.rst:584
msgid "More information can be found in :ref:`newstyle`."
msgstr ""

#: ../../glossary.rst:585
msgid "object"
msgstr "object (objeto)"

#: ../../glossary.rst:587
msgid ""
"Any data with state (attributes or value) and defined behavior (methods).  "
"Also the ultimate base class of any :term:`new-style class`."
msgstr ""
"Qualquer dado que tenha estado (atributos ou valores) e comportamento "
"definidos (métodos). Também a última classe base de qualquer :term:`new-"
"style class`."

#: ../../glossary.rst:590
msgid "package"
msgstr "package (pacote)"

#: ../../glossary.rst:592
msgid ""
"A Python :term:`module` which can contain submodules or recursively, "
"subpackages.  Technically, a package is a Python module with an ``__path__``"
" attribute."
msgstr ""
"Um :term:`module` Python é capaz de conter submódulos ou recursivamente, "
"sub-pacotes. Tecnicamente, um pacote é um módulo Python com um atributo "
"``__path__``."

#: ../../glossary.rst:595
msgid "parameter"
msgstr "parameter (parâmetro)"

#: ../../glossary.rst:597
msgid ""
"A named entity in a :term:`function` (or method) definition that specifies "
"an :term:`argument` (or in some cases, arguments) that the function can "
"accept.  There are four types of parameters:"
msgstr ""

#: ../../glossary.rst:601
msgid ""
":dfn:`positional-or-keyword`: specifies an argument that can be passed "
"either :term:`positionally <argument>` or as a :term:`keyword argument "
"<argument>`.  This is the default kind of parameter, for example *foo* and "
"*bar* in the following::"
msgstr ""
":dfn:`posicional-ou-nomeado`: especifica um argumento que pode ser tanto "
":term:`posicional <argument>` quanto :term:`nomeado <argument>`.  Esse é o "
"tipo padrão de parâmetro, por exemplo *foo* e *bar* a seguir::"

#: ../../glossary.rst:608
msgid ""
":dfn:`positional-only`: specifies an argument that can be supplied only by "
"position.  Python has no syntax for defining positional-only parameters.  "
"However, some built-in functions have positional-only parameters (e.g. "
":func:`abs`)."
msgstr ""
":dfn:`somente-posicional`: especifica um argumento que pode ser passado para"
" a função somente por posição. Python não possui sintaxe para definir "
"parâmetros somente-posicionais. Contudo, algumas funções embutidas possuem "
"argumentos somente-posicionais (por exemplo, :func:`abs`)."

#: ../../glossary.rst:613
msgid ""
":dfn:`var-positional`: specifies that an arbitrary sequence of positional "
"arguments can be provided (in addition to any positional arguments already "
"accepted by other parameters).  Such a parameter can be defined by "
"prepending the parameter name with ``*``, for example *args* in the "
"following::"
msgstr ""
":dfn:`var-posicional`: especifica quem uma sequência arbitrária de "
"argumentos posicionais pode ser fornecida (em adição a qualquer argumento "
"posicional já aceito por outros parâmetros). Tal parâmetro pode ser definido"
" colocando um ``*`` antes do nome, por exemplo *args* a seguir::"

#: ../../glossary.rst:621
msgid ""
":dfn:`var-keyword`: specifies that arbitrarily many keyword arguments can be"
" provided (in addition to any keyword arguments already accepted by other "
"parameters).  Such a parameter can be defined by prepending the parameter "
"name with ``**``, for example *kwargs* in the example above."
msgstr ""
":dfn:`var-nomeado`: especifica que, arbitrariamente, muitos argumentos "
"nomeados podem ser fornecidos (em adição a qualquer argumento nomeado já "
"aceito por outros parâmetros).  Tal parâmetro pode definido colocando-se  "
"``**`` antes do nome, por exemplo *kwargs* no exemplo acima."

#: ../../glossary.rst:627
msgid ""
"Parameters can specify both optional and required arguments, as well as "
"default values for some optional arguments."
msgstr ""
"Parâmetros podem especificar tanto argumentos opcionais quanto obrigatórios,"
" assim como valores padrões para alguns argumentos opcionais."

#: ../../glossary.rst:630
msgid ""
"See also the :term:`argument` glossary entry, the FAQ question on :ref:`the "
"difference between arguments and parameters <faq-argument-vs-parameter>`, "
"and the :ref:`function` section."
msgstr ""

#: ../../glossary.rst:633
msgid "PEP"
msgstr "PEP"

#: ../../glossary.rst:635
msgid ""
"Python Enhancement Proposal. A PEP is a design document providing "
"information to the Python community, or describing a new feature for Python "
"or its processes or environment. PEPs should provide a concise technical "
"specification and a rationale for proposed features."
msgstr ""
"Proposta de melhoria do Python. Uma PEP é um documento de design que fornece"
" informação para a comunidade Python, ou descreve uma nova funcionalidade "
"para o Python ou seus predecessores ou ambientes. PEPs devem prover uma "
"especificação técnica concisa e um racional para funcionalidades propostas."

#: ../../glossary.rst:641
msgid ""
"PEPs are intended to be the primary mechanisms for proposing major new "
"features, for collecting community input on an issue, and for documenting "
"the design decisions that have gone into Python. The PEP author is "
"responsible for building consensus within the community and documenting "
"dissenting opinions."
msgstr ""
"PEPs tem a intenção de ser os mecanismos primários para propor novas "
"funcionalidades significativas, para coletar opiniões da comunidade sobre um"
" problema, e para documentar as decisões de design que foram adicionadas ao "
"Python. O autor da PEP é responsável por construir um consenso dentro da "
"comunidade e documentar opiniões dissidentes."

#: ../../glossary.rst:647
msgid "See :pep:`1`."
msgstr "Veja :pep:`1`."

#: ../../glossary.rst:648
msgid "positional argument"
msgstr "positional argument (argumento posicional)"

#: ../../glossary.rst:651
msgid "Python 3000"
msgstr "Python 3000"

#: ../../glossary.rst:653
msgid ""
"Nickname for the Python 3.x release line (coined long ago when the release "
"of version 3 was something in the distant future.)  This is also abbreviated"
" \"Py3k\"."
msgstr ""
"Apelido para a versão do Python 3.x linha de lançamento (cunhado há muito "
"tempo, quando o lançamento da versão 3 era algo em um futuro muito "
"distante.) Esse termo possui a seguinte abreviação: \"Py3k\"."

#: ../../glossary.rst:656
msgid "Pythonic"
msgstr "Pythonic"

#: ../../glossary.rst:658
msgid ""
"An idea or piece of code which closely follows the most common idioms of the"
" Python language, rather than implementing code using concepts common to "
"other languages.  For example, a common idiom in Python is to loop over all "
"elements of an iterable using a :keyword:`for` statement.  Many other "
"languages don't have this type of construct, so people unfamiliar with "
"Python sometimes use a numerical counter instead::"
msgstr ""
"Uma ideia ou um pedaço de código que segue de perto os idiomas mais comuns "
"da linguagem Python, ao invés de implementar códigos usando conceitos comuns"
" a outros idiomas. Por exemplo, um idioma comum em Python é fazer um loop "
"sobre todos os elementos de uma iterável usando a instrução: `for` "
"statement. Muitas outras línguas não têm esse tipo de construção, então as "
"pessoas que não estão familiarizadas com o Python usam um contador numérico:"

#: ../../glossary.rst:668
msgid "As opposed to the cleaner, Pythonic method::"
msgstr "Ao contrário do método limpo, ou então, Pythônico::"

#: ../../glossary.rst:672
msgid "reference count"
msgstr "reference count"

#: ../../glossary.rst:674
msgid ""
"The number of references to an object.  When the reference count of an "
"object drops to zero, it is deallocated.  Reference counting is generally "
"not visible to Python code, but it is a key element of the :term:`CPython` "
"implementation.  The :mod:`sys` module defines a :func:`~sys.getrefcount` "
"function that programmers can call to return the reference count for a "
"particular object."
msgstr ""
"O número de refrências para um objeto. Quando a contagem de referências de "
"um objeto atinge zero, ele é desalocado. Contagem de referências geralmente "
"não é visível no código Python, mas é um elemento chave da implementação "
":term:`CPython`. O módulo :mod:`sys` define a função "
":func:`~sys.getrefcount` que programadores podem chamar para retornar a "
"contagem de referências para um objeto em particular."

#: ../../glossary.rst:680
msgid "__slots__"
msgstr "__slots__"

#: ../../glossary.rst:682
msgid ""
"A declaration inside a :term:`new-style class` that saves memory by pre-"
"declaring space for instance attributes and eliminating instance "
"dictionaries.  Though popular, the technique is somewhat tricky to get right"
" and is best reserved for rare cases where there are large numbers of "
"instances in a memory-critical application."
msgstr ""

#: ../../glossary.rst:687
msgid "sequence"
msgstr "sequence (sequência)"

#: ../../glossary.rst:689
msgid ""
"An :term:`iterable` which supports efficient element access using integer "
"indices via the :meth:`__getitem__` special method and defines a :meth:`len`"
" method that returns the length of the sequence. Some built-in sequence "
"types are :class:`list`, :class:`str`, :class:`tuple`, and :class:`unicode`."
" Note that :class:`dict` also supports :meth:`__getitem__` and "
":meth:`__len__`, but is considered a mapping rather than a sequence because "
"the lookups use arbitrary :term:`immutable` keys rather than integers."
msgstr ""

#: ../../glossary.rst:697
msgid "slice"
msgstr "slice"

#: ../../glossary.rst:699
msgid ""
"An object usually containing a portion of a :term:`sequence`.  A slice is "
"created using the subscript notation, ``[]`` with colons between numbers "
"when several are given, such as in ``variable_name[1:3:5]``.  The bracket "
"(subscript) notation uses :class:`slice` objects internally (or in older "
"versions, :meth:`__getslice__` and :meth:`__setslice__`)."
msgstr ""

#: ../../glossary.rst:704
msgid "special method"
msgstr "método especial"

#: ../../glossary.rst:708
msgid ""
"A method that is called implicitly by Python to execute a certain operation "
"on a type, such as addition.  Such methods have names starting and ending "
"with double underscores.  Special methods are documented in "
":ref:`specialnames`."
msgstr ""
"Um método que é chamado implicitamente pelo Python para executar uma certa "
"operação em um tipo, como uma adição por exemplo. Tais métodos tem nomes "
"iniciando e terminando com dois underscores. Métodos especiais sestão "
"documentados em :ref:`specialnames`."

#: ../../glossary.rst:712
msgid "statement"
msgstr "declaração"

#: ../../glossary.rst:714
msgid ""
"A statement is part of a suite (a \"block\" of code).  A statement is either"
" an :term:`expression` or one of several constructs with a keyword, such as "
":keyword:`if`, :keyword:`while` or :keyword:`for`."
msgstr ""
"Uma instrução é parte de uma suíte (um \"bloco\" de código). Uma instrução é"
" ou uma :term:`expression` ou uma de várias construções com uma palavra-"
"chave, tal como :keyword:`if`, :keyword:`while` ou :keyword:`for`."

#: ../../glossary.rst:717
msgid "struct sequence"
msgstr ""

#: ../../glossary.rst:719
msgid ""
"A tuple with named elements. Struct sequences expose an interface similiar "
"to :term:`named tuple` in that elements can be accessed either by index or "
"as an attribute. However, they do not have any of the named tuple methods "
"like :meth:`~collections.somenamedtuple._make` or "
":meth:`~collections.somenamedtuple._asdict`. Examples of struct sequences "
"include :data:`sys.float_info` and the return value of :func:`os.stat`."
msgstr ""

#: ../../glossary.rst:725
msgid "triple-quoted string"
msgstr "aspas triplas"

#: ../../glossary.rst:727
msgid ""
"A string which is bound by three instances of either a quotation mark (\") "
"or an apostrophe (').  While they don't provide any functionality not "
"available with single-quoted strings, they are useful for a number of "
"reasons.  They allow you to include unescaped single and double quotes "
"within a string and they can span multiple lines without the use of the "
"continuation character, making them especially useful when writing "
"docstrings."
msgstr ""
"Uma string que está definida com três ocorrências de aspas duplas (\") ou "
"apóstrofes ('). Enquanto elas não fornecem nenhuma funcionalidade não "
"disponível com strings de aspas simples, elas são úteis para inúmeras "
"razões. Elas permitem que você inclua aspas simples e duplas não encerradas "
"dentro de uma string, e elas podem utilizar múltiplas linhas sem o uso de "
"caracteres de continuação, fazendo-as especialmente úteis quando escrevemos "
"documentação em docstrings."

#: ../../glossary.rst:734
msgid "type"
msgstr "type"

#: ../../glossary.rst:736
msgid ""
"The type of a Python object determines what kind of object it is; every "
"object has a type.  An object's type is accessible as its "
":attr:`~instance.__class__` attribute or can be retrieved with "
"``type(obj)``."
msgstr ""
"O tipo de um objeto Python determina qual tipo de objeto ele é; todos "
"objetos tem um tipo. Um tipo de objeto é acessivel pelo atributo "
":attr:`~instance.__class__` ou pode ser recuperado com ``type(obj)``."

#: ../../glossary.rst:740
msgid "universal newlines"
msgstr "Novas linhas universais"

#: ../../glossary.rst:742
msgid ""
"A manner of interpreting text streams in which all of the following are "
"recognized as ending a line: the Unix end-of-line convention ``'\\n'``, the "
"Windows convention ``'\\r\\n'``, and the old Macintosh convention ``'\\r'``."
"  See :pep:`278` and :pep:`3116`, as well as :func:`str.splitlines` for an "
"additional use."
msgstr ""

#: ../../glossary.rst:747
msgid "virtual environment"
msgstr "ambiente virtual"

#: ../../glossary.rst:749
msgid ""
"A cooperatively isolated runtime environment that allows Python users and "
"applications to install and upgrade Python distribution packages without "
"interfering with the behaviour of other Python applications running on the "
"same system."
msgstr ""
"Um ambiente de execução isolado que permite usuários Python e aplicações "
"instalarem e atualizarem pacotes Python sem interferir no comportamento de "
"outras aplicações Python em execução no mesmo sistema."

#: ../../glossary.rst:753
msgid "virtual machine"
msgstr "Máquina Virtual"

#: ../../glossary.rst:755
msgid ""
"A computer defined entirely in software.  Python's virtual machine executes "
"the :term:`bytecode` emitted by the bytecode compiler."
msgstr ""
"Um computador definido inteiramente em software. A máquina virtual de Python"
" executa o  :term:`bytecode` emitido pelo compilador de bytecode."

#: ../../glossary.rst:757
msgid "Zen of Python"
msgstr "Zen of Python"

#: ../../glossary.rst:759
msgid ""
"Listing of Python design principles and philosophies that are helpful in "
"understanding and using the language.  The listing can be found by typing "
"\"``import this``\" at the interactive prompt."
msgstr ""
"Lista de princípios de projeto e filosofias do Python que são úteis para a "
"compreensão e uso da linguagem. A lista é exibida quando se digita "
"\"``import this``\" no console interativo."
