# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-01-09 18:40+0000\n"
"Last-Translator: Aline Balogh <linecrist@hotmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../faq/programming.rst:5
msgid "Programming FAQ"
msgstr "FAQ referente a Programação"

#: ../../faq/programming.rst:8
msgid "Contents"
msgstr "Conteúdo"

#: ../../faq/programming.rst:12
msgid "General Questions"
msgstr "Questões Gerais"

#: ../../faq/programming.rst:15
msgid ""
"Is there a source code level debugger with breakpoints, single-stepping, "
"etc.?"
msgstr ""
"Existe um depurador a  nível de código fonte que possui breakpoints, single-"
"stepping e etc.?"

#: ../../faq/programming.rst:17 ../../faq/programming.rst:60
msgid "Yes."
msgstr "Sim."

#: ../../faq/programming.rst:19
msgid ""
"The pdb module is a simple but adequate console-mode debugger for Python. It"
" is part of the standard Python library, and is :mod:`documented in the "
"Library Reference Manual <pdb>`. You can also write your own debugger by "
"using the code for pdb as an example."
msgstr ""
"O módulo pdb é um depurador cujo funcionamento ocorre em modo Console "
"simples mas, adequado para o Python. Faz parte da biblioteca padrão do "
"Python e está documentado em :mod:`documented in the Library Reference "
"Manual 1`. Caso necessário, também é possível a construção do seu próprio "
"depurador usando o código do pdb como um exemplo."

#: ../../faq/programming.rst:24
msgid ""
"The IDLE interactive development environment, which is part of the standard "
"Python distribution (normally available as Tools/scripts/idle), includes a "
"graphical debugger."
msgstr ""
"O Ambiente de Desenvolvimento Interativo IDLE, que faz parte da distribuição"
" padrão do Python (normalmente disponível em Tools/scripts/idle), inclui um "
"depurador gráfico."

#: ../../faq/programming.rst:28
msgid ""
"PythonWin is a Python IDE that includes a GUI debugger based on pdb.  The "
"Pythonwin debugger colors breakpoints and has quite a few cool features such"
" as debugging non-Pythonwin programs.  Pythonwin is available as part of the"
" `Python for Windows Extensions "
"<https://sourceforge.net/projects/pywin32/>`__ project and as a part of the "
"ActivePython distribution (see https://www.activestate.com/activepython\\ )."
msgstr ""
"O PythonWin é uma IDE feita para o Python que inclui um depurador de GUI "
"baseado no pdb. O depurador Pythonwin colora os pontos de interrupção e tem "
"alguns recursos legais, como a depuração de programas que não são Pythonwin."
" O Pythonwin está disponível como parte do projeto  `Python for Windows "
"Extensions <https://sourceforge.net/projects/pywin32/>`__ e como parte da "
"distribuição ActivePython (veja https://www.activestate.com/activepython\\ "
")."

#: ../../faq/programming.rst:35
msgid ""
"`Boa Constructor <http://boa-constructor.sourceforge.net/>`_ is an IDE and "
"GUI builder that uses wxWidgets.  It offers visual frame creation and "
"manipulation, an object inspector, many views on the source like object "
"browsers, inheritance hierarchies, doc string generated html documentation, "
"an advanced debugger, integrated help, and Zope support."
msgstr ""
"O `Boa Constructor <http://boa-constructor.sourceforge.net/>`_  é uma IDE e "
"GUI que usa wxWidgets. Oferece criação e manipulação de frames visualmente, "
"um inspetor de objetos, muitas visualizações do fonte, como navegadores de "
"objetos, hierarquias de herança, documentação HTML gerada por uma seqüência "
"de documentos, um depurador avançado, ajuda integrada e suporte ao Zope."

#: ../../faq/programming.rst:41
msgid ""
"`Eric <http://eric-ide.python-projects.org/>`_ is an IDE built on PyQt and "
"the Scintilla editing component."
msgstr ""
"O `Eric <http://eric-ide.python-projects.org/>`_ é uma IDE construída com o "
"PyQt e fazendo uso do componente de edição Scintilla."

#: ../../faq/programming.rst:44
msgid ""
"Pydb is a version of the standard Python debugger pdb, modified for use with"
" DDD (Data Display Debugger), a popular graphical debugger front end.  Pydb "
"can be found at http://bashdb.sourceforge.net/pydb/ and DDD can be found at "
"https://www.gnu.org/software/ddd."
msgstr ""
"Pydb é uma versão do pdb padrão do depurador Python, modificado para uso com"
" o DDD (depurador de exibição de dados), um front-end popular do depurador "
"gráfico. Pydb pode ser encontrado em http://bashdb.sourceforge.net/pydb/ e "
"DDD pode ser encontrado em https://www.gnu.org/software/ddd."

#: ../../faq/programming.rst:49
msgid ""
"There are a number of commercial Python IDEs that include graphical "
"debuggers. They include:"
msgstr ""
"Há uma série de IDE comerciais para desenvolvimento com o Python que incluem"
" depuradores gráficos. As mesmas possuem: "

#: ../../faq/programming.rst:52
msgid "Wing IDE (https://wingware.com/)"
msgstr "Wing IDE (https://wingware.com/)"

#: ../../faq/programming.rst:53
msgid "Komodo IDE (https://komodoide.com/)"
msgstr "Komodo IDE (https://komodoide.com/)"

#: ../../faq/programming.rst:54
msgid "PyCharm (https://www.jetbrains.com/pycharm/)"
msgstr "PyCharm (https://www.jetbrains.com/pycharm/)"

#: ../../faq/programming.rst:58
msgid "Is there a tool to help find bugs or perform static analysis?"
msgstr ""
"Existe uma ferramenta que ajuda na detecção de bugs ou a realizar análises "
"estáticas?"

#: ../../faq/programming.rst:62
msgid ""
"PyChecker is a static analysis tool that finds bugs in Python source code "
"and warns about code complexity and style.  You can get PyChecker from "
"http://pychecker.sourceforge.net/."
msgstr ""
"O PyChecker é uma ferramenta de análise estática que encontra erros no "
"código-fonte do Python e exibe avisos sobre a complexidade e a estilização "
"do código. Você pode obter PyChecker em http://pychecker.sourceforge.net/."

#: ../../faq/programming.rst:66
msgid ""
"`Pylint <https://www.pylint.org/>`_ is another tool that checks if a module "
"satisfies a coding standard, and also makes it possible to write plug-ins to"
" add a custom feature.  In addition to the bug checking that PyChecker "
"performs, Pylint offers some additional features such as checking line "
"length, whether variable names are well-formed according to your coding "
"standard, whether declared interfaces are fully implemented, and more. "
"https://docs.pylint.org/ provides a full list of Pylint's features."
msgstr ""
"O `Pylint <https://www.pylint.org/>`_ é outra ferramenta que verifica se um "
"módulo satisfaz um padrão de codificação e também permite escrever plug-ins "
"para adicionar um recurso personalizado. Além da verificação de erros que o "
"PyChecker executa, o Pylint oferece alguns recursos adicionais, como a "
"verificação do comprimento da linha, se os nomes das variáveis estão bem "
"formados e de acordo com padrão internacional de codificação, se as "
"interfaces declaradas foram totalmente implementadas e muito mais. O "
"https://docs.pylint.org/ fornece uma lista completa dos recursos do Pylint."

#: ../../faq/programming.rst:76
msgid "How can I create a stand-alone binary from a Python script?"
msgstr ""
"Como posso criar um binário independente a partir de um script Python?"

#: ../../faq/programming.rst:78
msgid ""
"You don't need the ability to compile Python to C code if all you want is a "
"stand-alone program that users can download and run without having to "
"install the Python distribution first.  There are a number of tools that "
"determine the set of modules required by a program and bind these modules "
"together with a Python binary to produce a single executable."
msgstr ""
"Não precisas possui a capacidade de compilar o código Python para C se o que"
" desejas é um programa autônomo que os usuários possam baixar e executar sem"
" ter que instalar a distribuição Python primeiro. Existem várias ferramentas"
" que determinam o conjunto de módulos exigidos por um programa e vinculam "
"esses módulos junto com o binário do Python para produzir um único "
"executável."

#: ../../faq/programming.rst:84
msgid ""
"One is to use the freeze tool, which is included in the Python source tree "
"as ``Tools/freeze``. It converts Python byte code to C arrays; a C compiler "
"you can embed all your modules into a new program, which is then linked with"
" the standard Python modules."
msgstr ""
"Um deles é usar a ferramenta de freeze, que está inclusa na árvore de origem"
" do Python como ``Tools/freeze``. A mesma converte o código bytecode do "
"Python em matrizes C; com um compilador C  poderás incorporar todos os "
"módulos em um novo programa, que será então vinculado aos módulos padrão do "
"Python."

#: ../../faq/programming.rst:89
msgid ""
"It works by scanning your source recursively for import statements (in both "
"forms) and looking for the modules in the standard Python path as well as in"
" the source directory (for built-in modules).  It then turns the bytecode "
"for modules written in Python into C code (array initializers that can be "
"turned into code objects using the marshal module) and creates a custom-made"
" config file that only contains those built-in modules which are actually "
"used in the program.  It then compiles the generated C code and links it "
"with the rest of the Python interpreter to form a self-contained binary "
"which acts exactly like your script."
msgstr ""
"Ela funciona escaneando seu código recursivamente pelas instruções de "
"importação (ambas as formas) e procurando pelos módulos no caminho padrão do"
" Python e também no diretório fonte (para módulos internos). Então torna o "
"bytecode de módulos escritos em Python em código C (inicializadores de vetor"
" que podem ser transformado em objetos código usando o módulo marshal) e "
"cria um arquivo de configurações customizado que só contém aqueles módulos "
"internos que são na realidade usados no programa. A ferramenta então compila"
" os códigos gerados em C e liga como o resto do interpretador Python para "
"formar um binário autônomo que age exatamente como seu script."

#: ../../faq/programming.rst:98
msgid ""
"Obviously, freeze requires a C compiler.  There are several other utilities "
"which don't. One is Thomas Heller's py2exe (Windows only) at"
msgstr ""
"Obviamente, freeze requer um compilador C. Exitem diversos outros serviços "
"que não requerem o compilador C. Uma opção é Thomas Heller's py2exe (Somente"
" no Windows)"

#: ../../faq/programming.rst:101
msgid "http://www.py2exe.org/"
msgstr "http://www.py2exe.org/"

#: ../../faq/programming.rst:103
msgid ""
"Another tool is Anthony Tuininga's `cx_Freeze <http://cx-"
"freeze.sourceforge.net/>`_."
msgstr ""
"Uma outra ferramenta é o Anthony Tuininga's `cx_Freeze <http://cx-"
"freeze.sourceforge.net/>`_."

#: ../../faq/programming.rst:107
msgid "Are there coding standards or a style guide for Python programs?"
msgstr ""
"Existem padrões para a codificação ou um guia de estilo utilizado pela "
"comunidade Python?"

#: ../../faq/programming.rst:109
msgid ""
"Yes.  The coding style required for standard library modules is documented "
"as :pep:`8`."
msgstr ""
"Sim. O guia de estilo esperado para módulos e biblioteca padrão possui o "
"nome de PEP8 e podes acessar a sua documentação em :pep:`8`."

#: ../../faq/programming.rst:114
msgid "My program is too slow. How do I speed it up?"
msgstr "Meu programa está muito lento. Como faço para melhorar a performance?"

#: ../../faq/programming.rst:116
msgid ""
"That's a tough one, in general.  There are many tricks to speed up Python "
"code; consider rewriting parts in C as a last resort."
msgstr ""

#: ../../faq/programming.rst:119
msgid ""
"In some cases it's possible to automatically translate Python to C or x86 "
"assembly language, meaning that you don't have to modify your code to gain "
"increased speed."
msgstr ""

#: ../../faq/programming.rst:125
msgid ""
"`Pyrex <http://www.cosc.canterbury.ac.nz/~greg/python/Pyrex/>`_ can compile "
"a slightly modified version of Python code into a C extension, and can be "
"used on many different platforms."
msgstr ""

#: ../../faq/programming.rst:129
msgid ""
"`Psyco <http://psyco.sourceforge.net>`_ is a just-in-time compiler that "
"translates Python code into x86 assembly language.  If you can use it, Psyco"
" can provide dramatic speedups for critical functions."
msgstr ""

#: ../../faq/programming.rst:133
msgid ""
"The rest of this answer will discuss various tricks for squeezing a bit more"
" speed out of Python code.  *Never* apply any optimization tricks unless you"
" know you need them, after profiling has indicated that a particular "
"function is the heavily executed hot spot in the code.  Optimizations almost"
" always make the code less clear, and you shouldn't pay the costs of reduced"
" clarity (increased development time, greater likelihood of bugs) unless the"
" resulting performance benefit is worth it."
msgstr ""

#: ../../faq/programming.rst:141
msgid ""
"There is a page on the wiki devoted to `performance tips "
"<https://wiki.python.org/moin/PythonSpeed/PerformanceTips>`_."
msgstr ""

#: ../../faq/programming.rst:144
msgid ""
"Guido van Rossum has written up an anecdote related to optimization at "
"https://www.python.org/doc/essays/list2str."
msgstr ""

#: ../../faq/programming.rst:147
msgid ""
"One thing to notice is that function and (especially) method calls are "
"rather expensive; if you have designed a purely OO interface with lots of "
"tiny functions that don't do much more than get or set an instance variable "
"or call another method, you might consider using a more direct way such as "
"directly accessing instance variables.  Also see the standard module "
":mod:`profile` which makes it possible to find out where your program is "
"spending most of its time (if you have some patience -- the profiling itself"
" can slow your program down by an order of magnitude)."
msgstr ""

#: ../../faq/programming.rst:156
msgid ""
"Remember that many standard optimization heuristics you may know from other "
"programming experience may well apply to Python.  For example it may be "
"faster to send output to output devices using larger writes rather than "
"smaller ones in order to reduce the overhead of kernel system calls.  Thus "
"CGI scripts that write all output in \"one shot\" may be faster than those "
"that write lots of small pieces of output."
msgstr ""

#: ../../faq/programming.rst:163
msgid ""
"Also, be sure to use Python's core features where appropriate.  For example,"
" slicing allows programs to chop up lists and other sequence objects in a "
"single tick of the interpreter's mainloop using highly optimized C "
"implementations. Thus to get the same effect as::"
msgstr ""

#: ../../faq/programming.rst:172
msgid "it is much shorter and far faster to use ::"
msgstr ""

#: ../../faq/programming.rst:176
msgid ""
"Note that the functionally-oriented built-in functions such as :func:`map`, "
":func:`zip`, and friends can be a convenient accelerator for loops that "
"perform a single task.  For example to pair the elements of two lists "
"together::"
msgstr ""

#: ../../faq/programming.rst:184
msgid "or to compute a number of sines::"
msgstr ""

#: ../../faq/programming.rst:189
msgid "The operation completes very quickly in such cases."
msgstr ""

#: ../../faq/programming.rst:191
msgid ""
"Other examples include the ``join()`` and ``split()`` :ref:`methods of "
"string objects <string-methods>`. For example if s1..s7 are large (10K+) "
"strings then ``\"\".join([s1,s2,s3,s4,s5,s6,s7])`` may be far faster than "
"the more obvious ``s1+s2+s3+s4+s5+s6+s7``, since the \"summation\" will "
"compute many subexpressions, whereas ``join()`` does all the copying in one "
"pass.  For manipulating strings, use the ``replace()`` and the ``format()`` "
":ref:`methods on string objects <string-methods>`.  Use regular expressions "
"only when you're not dealing with constant string patterns.  You may still "
"use :ref:`the old % operations <string-formatting>` ``string % tuple`` and "
"``string % dictionary``."
msgstr ""

#: ../../faq/programming.rst:202
msgid ""
"Be sure to use the :meth:`list.sort` built-in method to do sorting, and see "
"the `sorting mini-HOWTO <https://wiki.python.org/moin/HowTo/Sorting>`_ for "
"examples of moderately advanced usage.  :meth:`list.sort` beats other "
"techniques for sorting in all but the most extreme circumstances."
msgstr ""

#: ../../faq/programming.rst:207
msgid ""
"Another common trick is to \"push loops into functions or methods.\"  For "
"example suppose you have a program that runs slowly and you use the profiler"
" to determine that a Python function ``ff()`` is being called lots of times."
"  If you notice that ``ff()``::"
msgstr ""

#: ../../faq/programming.rst:216
msgid "tends to be called in loops like::"
msgstr ""

#: ../../faq/programming.rst:220
msgid "or::"
msgstr "or::"

#: ../../faq/programming.rst:226
msgid ""
"then you can often eliminate function call overhead by rewriting ``ff()`` "
"to::"
msgstr ""

#: ../../faq/programming.rst:235
msgid "and rewrite the two examples to ``list = ffseq(oldlist)`` and to::"
msgstr ""

#: ../../faq/programming.rst:240
msgid ""
"Single calls to ``ff(x)`` translate to ``ffseq([x])[0]`` with little "
"penalty. Of course this technique is not always appropriate and there are "
"other variants which you can figure out."
msgstr ""

#: ../../faq/programming.rst:244
msgid ""
"You can gain some performance by explicitly storing the results of a "
"function or method lookup into a local variable.  A loop like::"
msgstr ""

#: ../../faq/programming.rst:250
msgid ""
"resolves ``dict.get`` every iteration.  If the method isn't going to change,"
" a slightly faster implementation is::"
msgstr ""

#: ../../faq/programming.rst:257
msgid ""
"Default arguments can be used to determine values once, at compile time "
"instead of at run time.  This can only be done for functions or objects "
"which will not be changed during program execution, such as replacing ::"
msgstr ""

#: ../../faq/programming.rst:264
msgid "with ::"
msgstr ""

#: ../../faq/programming.rst:269
msgid ""
"Because this trick uses default arguments for terms which should not be "
"changed, it should only be used when you are not concerned with presenting a"
" possibly confusing API to your users."
msgstr ""

#: ../../faq/programming.rst:275
msgid "Core Language"
msgstr "Núcleo da Linguagem"

#: ../../faq/programming.rst:278
msgid "Why am I getting an UnboundLocalError when the variable has a value?"
msgstr ""
"Porque estou recebo o erro UnboundLocalError quando a variável possui um "
"valor associado?"

#: ../../faq/programming.rst:280
msgid ""
"It can be a surprise to get the UnboundLocalError in previously working code"
" when it is modified by adding an assignment statement somewhere in the body"
" of a function."
msgstr ""
"Talvez você se surpreenda ao receber UnboundLocalError num código que "
"anteriormente funcionava quando este for modificado e adicionando uma "
"declaração de atribuição em algum lugar no corpo de uma função."

#: ../../faq/programming.rst:284
msgid "This code:"
msgstr "Este código:"

#: ../../faq/programming.rst:292
msgid "works, but this code:"
msgstr "funciona, mas este código:"

#: ../../faq/programming.rst:299
msgid "results in an UnboundLocalError:"
msgstr "resultará em um UnboundLocalError:"

#: ../../faq/programming.rst:306
msgid ""
"This is because when you make an assignment to a variable in a scope, that "
"variable becomes local to that scope and shadows any similarly named "
"variable in the outer scope.  Since the last statement in foo assigns a new "
"value to ``x``, the compiler recognizes it as a local variable.  "
"Consequently when the earlier ``print x`` attempts to print the "
"uninitialized local variable and an error results."
msgstr ""

#: ../../faq/programming.rst:313
msgid ""
"In the example above you can access the outer scope variable by declaring it"
" global:"
msgstr ""
"No exemplo acima, podemos acessar a variável do escopo externo declarando-o "
"globalmente:"

#: ../../faq/programming.rst:324
msgid ""
"This explicit declaration is required in order to remind you that (unlike "
"the superficially analogous situation with class and instance variables) you"
" are actually modifying the value of the variable in the outer scope:"
msgstr ""
"Esta declaração explícita é necessária para lembrá-lo de que (ao contrário "
"da situação superficialmente análoga com variáveis de classe e instância), "
"você realmente está modificando o valor da variável no escopo externo:"

#: ../../faq/programming.rst:333
msgid "What are the rules for local and global variables in Python?"
msgstr "Quais são as regras para variáveis locais e globais em Python?"

#: ../../faq/programming.rst:335
msgid ""
"In Python, variables that are only referenced inside a function are "
"implicitly global.  If a variable is assigned a value anywhere within the "
"function's body, it's assumed to be a local unless explicitly declared as "
"global."
msgstr ""
"Em Python, as variáveis que são apenas referenciadas dentro de uma função "
"são implicitamente globais. Se uma variável for associada a um valor em "
"qualquer lugar dentro do corpo da função, assume-se que a mesma será local, "
"a menos que seja explicitamente declarado como global."

#: ../../faq/programming.rst:339
msgid ""
"Though a bit surprising at first, a moment's consideration explains this.  "
"On one hand, requiring :keyword:`global` for assigned variables provides a "
"bar against unintended side-effects.  On the other hand, if ``global`` was "
"required for all global references, you'd be using ``global`` all the time."
"  You'd have to declare as global every reference to a built-in function or "
"to a component of an imported module.  This clutter would defeat the "
"usefulness of the ``global`` declaration for identifying side-effects."
msgstr ""
"Embora um pouco surpreendente no início, um momento de consideração explica "
"isso. Por um lado, exigir :keyword:`global` para variáveis atribuídas "
"fornece uma barreira contra efeitos colaterais indesejados. Por outro lado, "
"se ``global`` fosse necessário para todas as referências globais, você "
"estaria usando ``global`` o tempo todo. Você teria que declarar como global "
"todas as referências a uma função embutida ou a um componente de um módulo "
"importado. Essa desordem anularia a utilidade da declaração de ``global`` "
"para identificar efeitos colaterais."

#: ../../faq/programming.rst:349
msgid ""
"Why do lambdas defined in a loop with different values all return the same "
"result?"
msgstr ""
"Por que os lambdas definidos em um loop com valores diferentes retornam o "
"mesmo resultado?"

#: ../../faq/programming.rst:351
msgid ""
"Assume you use a for loop to define a few different lambdas (or even plain "
"functions), e.g.::"
msgstr ""
"Suponha que utilizes um loop for para definir algumas funções lambdas (ou "
"mesmo funções simples), por exemplo.::"

#: ../../faq/programming.rst:358
msgid ""
"This gives you a list that contains 5 lambdas that calculate ``x**2``.  You "
"might expect that, when called, they would return, respectively, ``0``, "
"``1``, ``4``, ``9``, and ``16``.  However, when you actually try you will "
"see that they all return ``16``::"
msgstr ""
"Isso oferece uma lista que contém 5 lambdas que calculam ``x**2``. Poderás "
"esperar que, quando invocado, os mesmo retornem, respectivamente,  ``0``, "
"``1``, ``4``, ``9``, e ``16``. No entanto, quando realmente tentares, verás "
"que todos retornam ``16``::"

#: ../../faq/programming.rst:368
msgid ""
"This happens because ``x`` is not local to the lambdas, but is defined in "
"the outer scope, and it is accessed when the lambda is called --- not when "
"it is defined.  At the end of the loop, the value of ``x`` is ``4``, so all "
"the functions now return ``4**2``, i.e. ``16``.  You can also verify this by"
" changing the value of ``x`` and see how the results of the lambdas change::"
msgstr ""
"Isso acontece porque ``x`` não é local para o lambdas, mas é definido no "
"escopo externo, e é acessado quando o lambda for chamado --- não quando é "
"definido. No final do loop, o valor de ``x`` será ``4``, e então, todas as "
"funções agora retornarão ``4**2``, ou seja, ``16``. Também poderás verificar"
" isso alterando o valor de ``x`` e vendo como os resultados dos lambdas "
"mudam::"

#: ../../faq/programming.rst:378
msgid ""
"In order to avoid this, you need to save the values in variables local to "
"the lambdas, so that they don't rely on the value of the global ``x``::"
msgstr ""
"Para evitar isso, precisarás salvar os valores nas variáveis locais para os "
"lambdas, para que eles não dependam do valor de ``x`` global::"

#: ../../faq/programming.rst:385
msgid ""
"Here, ``n=x`` creates a new variable ``n`` local to the lambda and computed "
"when the lambda is defined so that it has the same value that ``x`` had at "
"that point in the loop.  This means that the value of ``n`` will be ``0`` in"
" the first lambda, ``1`` in the second, ``2`` in the third, and so on. "
"Therefore each lambda will now return the correct result::"
msgstr ""
"Aqui, ``n=x`` cria uma nova variável ``n`` local para o lambda e calculada "
"quando o lambda será definido para que ele tenha o mesmo valor que ``x`` "
"tenha nesse ponto no loop. Isso significa que o valor de ``n`` será ``0`` no"
" primeiro \"ciclo\" do lambda, ``1`` no segundo \"ciclo\", ``2`` no "
"terceiro, e assim por diante. Portanto, cada lambda agora retornará o "
"resultado correto::"

#: ../../faq/programming.rst:396
msgid ""
"Note that this behaviour is not peculiar to lambdas, but applies to regular "
"functions too."
msgstr ""
"Observe que esse comportamento não é peculiar dos lambdas, o mesmo também "
"ocorre com as funções regulares."

#: ../../faq/programming.rst:401
msgid "How do I share global variables across modules?"
msgstr "Como definir variáveis globais dentro de módulos?"

#: ../../faq/programming.rst:403
msgid ""
"The canonical way to share information across modules within a single "
"program is to create a special module (often called config or cfg).  Just "
"import the config module in all modules of your application; the module then"
" becomes available as a global name.  Because there is only one instance of "
"each module, any changes made to the module object get reflected everywhere."
"  For example:"
msgstr ""
"A maneira canônica de compartilhar informações entre módulos dentro de um "
"único programa é criando um módulo especial (geralmente chamado de config ou"
" cfg). Basta importar o módulo de configuração em todos os módulos da sua "
"aplicação; O módulo ficará disponível como um nome global. Como há apenas "
"uma instância de cada módulo, todas as alterações feitas no objeto do módulo"
" se refletem em todos os lugares. Por exemplo:"

#: ../../faq/programming.rst:409
msgid "config.py::"
msgstr "config.py::"

#: ../../faq/programming.rst:413
msgid "mod.py::"
msgstr "mod.py::"

#: ../../faq/programming.rst:418
msgid "main.py::"
msgstr "main.py::"

#: ../../faq/programming.rst:424
msgid ""
"Note that using a module is also the basis for implementing the Singleton "
"design pattern, for the same reason."
msgstr ""
"Observe o uso de um único módulo também é, por definição, a implementação do"
" Design Patterns Singleton!"

#: ../../faq/programming.rst:429
msgid "What are the \"best practices\" for using import in a module?"
msgstr ""
"Quais são as \"melhores práticas\" quando fazemos uso da importação de "
"módulos?"

#: ../../faq/programming.rst:431
msgid ""
"In general, don't use ``from modulename import *``.  Doing so clutters the "
"importer's namespace, and makes it much harder for linters to detect "
"undefined names."
msgstr ""
"Em geral, não use ``from modulename import *``. Ao fazê-lo, o namespace do "
"importador é mais difícil e torna muito mais difícil para as ferramentas "
"linters detectar nomes indefinidos."

#: ../../faq/programming.rst:435
msgid ""
"Import modules at the top of a file.  Doing so makes it clear what other "
"modules your code requires and avoids questions of whether the module name "
"is in scope. Using one import per line makes it easy to add and delete "
"module imports, but using multiple imports per line uses less screen space."
msgstr ""
"Faça a importação de módulos na parte superior do arquivo. Isso deixa claro "
"quais outros módulos nosso código necessita e evita dúvidas sobre por "
"exemplo, se o nome do módulo está no escopo. Usar uma importação por linha "
"facilita a adição e exclusão de importações de módulos, porém, usar várias "
"importações num única linha, ocupa menos espaço da tela."

#: ../../faq/programming.rst:440
msgid "It's good practice if you import modules in the following order:"
msgstr "É uma boa prática importar os módulos na seguinte ordem:"

#: ../../faq/programming.rst:442
msgid "standard library modules -- e.g. ``sys``, ``os``, ``getopt``, ``re``"
msgstr ""
"módulos de biblioteca padrão, por exemplo: ``sys``, ``os``, ``getopt``, "
"``re``"

#: ../../faq/programming.rst:443
msgid ""
"third-party library modules (anything installed in Python's site-packages "
"directory) -- e.g. mx.DateTime, ZODB, PIL.Image, etc."
msgstr ""
"módulos e biblioteca de terceiros (qualquer instalação feita contida no "
"repositório de códigos na pasta site-packages) - por exemplo mx.DateTime, "
"ZODB, PIL.Image, etc."

#: ../../faq/programming.rst:445
msgid "locally-developed modules"
msgstr "módulos desenvolvidos localmente"

#: ../../faq/programming.rst:447
msgid ""
"Only use explicit relative package imports.  If you're writing code that's "
"in the ``package.sub.m1`` module and want to import ``package.sub.m2``, do "
"not just write ``import m2``, even though it's legal.  Write ``from "
"package.sub import m2`` or ``from . import m2`` instead."
msgstr ""

#: ../../faq/programming.rst:452
msgid ""
"It is sometimes necessary to move imports to a function or class to avoid "
"problems with circular imports.  Gordon McMillan says:"
msgstr ""
"Às vezes, é necessário transferir as importações para uma função ou classe "
"para evitar problemas com importação circular. Gordon McMillan diz:"

#: ../../faq/programming.rst:455
msgid ""
"Circular imports are fine where both modules use the \"import <module>\" "
"form of import.  They fail when the 2nd module wants to grab a name out of "
"the first (\"from module import name\") and the import is at the top level."
"  That's because names in the 1st are not yet available, because the first "
"module is busy importing the 2nd."
msgstr ""
"As importações circulares estão bem onde ambos os módulos utilizam a forma "
"de importação \"import 1\". Eles falham quando o 2º módulo quer pegar um "
"nome do primeiro  (\"from module import name\") e a importação está no nível"
" superior. Isso porque os nomes no primeiro ainda não estão disponíveis, "
"porque o primeiro módulo está ocupado importando o 2º."

#: ../../faq/programming.rst:461
msgid ""
"In this case, if the second module is only used in one function, then the "
"import can easily be moved into that function.  By the time the import is "
"called, the first module will have finished initializing, and the second "
"module can do its import."
msgstr ""
"Nesse caso, se o segundo módulo for usado apenas numa função, a importação "
"pode ser facilmente movida para dentro do escopo dessa função. No momento em"
" que a importação for chamada, o primeiro módulo terá finalizado a "
"inicialização e o segundo módulo poderá ser importado sem maiores "
"complicações."

#: ../../faq/programming.rst:466
msgid ""
"It may also be necessary to move imports out of the top level of code if "
"some of the modules are platform-specific.  In that case, it may not even be"
" possible to import all of the modules at the top of the file.  In this "
"case, importing the correct modules in the corresponding platform-specific "
"code is a good option."
msgstr ""
"Também poderá ser necessário mover as importações para fora do nível "
"superior do código se alguns dos módulos forem específicos de uma "
"determinada plataforma (SO). Nesse caso, talvez nem seja possível importar "
"todos os módulos na parte superior do arquivo. Nessas situações devemos "
"importar os módulos que são especificos de cada plataforma antes de "
"necessitar utilizar os mesmos."

#: ../../faq/programming.rst:471
msgid ""
"Only move imports into a local scope, such as inside a function definition, "
"if it's necessary to solve a problem such as avoiding a circular import or "
"are trying to reduce the initialization time of a module.  This technique is"
" especially helpful if many of the imports are unnecessary depending on how "
"the program executes.  You may also want to move imports into a function if "
"the modules are only ever used in that function.  Note that loading a module"
" the first time may be expensive because of the one time initialization of "
"the module, but loading a module multiple times is virtually free, costing "
"only a couple of dictionary lookups.  Even if the module name has gone out "
"of scope, the module is probably available in :data:`sys.modules`."
msgstr ""
"Apenas mova as importações para um escopo local, como dentro da definição de"
" função, se for necessário resolver algum tipo de problema, como exemplo, "
"evitar importações circulares ou tentar reduzir o tempo de inicialização do "
"módulo. Esta técnica é especialmente útil se muitas das importações forem "
"desnecessárias, dependendo de como o programa é executado. Também podemos "
"desejar mover as importações para uma função se os módulos forem usados "
"somente nessa função. Note que carregar um módulo pela primeira vez pode ser"
" demorado devido ao tempo de inicialização de cada módulo, no entanto, "
"carregar um módulo várias vezes é praticamente imperceptível, tendo somente "
"o custo de processamento de pesquisas no dicionário de nomes. Mesmo que o "
"nome do módulo tenha saído do escopo, o módulo provavelmente estará "
"disponível em :data:`sys.modules`."

#: ../../faq/programming.rst:484
msgid "Why are default values shared between objects?"
msgstr "Por que os valores padrão são compartilhados entre objetos?"

#: ../../faq/programming.rst:486
msgid ""
"This type of bug commonly bites neophyte programmers.  Consider this "
"function::"
msgstr ""
"Este tipo de erro geralmente pega programadores neófitos. Considere esta "
"função::"

#: ../../faq/programming.rst:493
msgid ""
"The first time you call this function, ``mydict`` contains a single item.  "
"The second time, ``mydict`` contains two items because when ``foo()`` begins"
" executing, ``mydict`` starts out with an item already in it."
msgstr ""
"A primeira vez que chamares essa função, ``mydict`` irá conter um único "
"item. A segunda vez, ``mydict`` irá conter dois itens, porque quando "
"``foo()`` começar a ser executado, ``mydict`` começará com um item já "
"existente."

#: ../../faq/programming.rst:497
msgid ""
"It is often expected that a function call creates new objects for default "
"values. This is not what happens. Default values are created exactly once, "
"when the function is defined.  If that object is changed, like the "
"dictionary in this example, subsequent calls to the function will refer to "
"this changed object."
msgstr ""
"Muitas vezes, espera-se que ao invocar uma função seja criado novos objetos "
"referente aos valores padrão. Isso não é o que acontecerá. Os valores padrão"
" são criados exatamente uma vez, quando a função está sendo definida. Se "
"esse objeto for alterado, como o dicionário neste exemplo, as chamadas "
"subsequentes para a essa função se referirão a este objeto alterado."

#: ../../faq/programming.rst:502
msgid ""
"By definition, immutable objects such as numbers, strings, tuples, and "
"``None``, are safe from change. Changes to mutable objects such as "
"dictionaries, lists, and class instances can lead to confusion."
msgstr ""
"Por definição, objetos imutáveis, como números, strings, tuplas e o "
"``None``, estão protegidos de sofrerem alteração. Alterações em objetos "
"mutáveis, como dicionários, listas e instâncias de classe, podem levar à "
"confusão."

#: ../../faq/programming.rst:506
msgid ""
"Because of this feature, it is good programming practice to not use mutable "
"objects as default values.  Instead, use ``None`` as the default value and "
"inside the function, check if the parameter is ``None`` and create a new "
"list/dictionary/whatever if it is.  For example, don't write::"
msgstr ""
"Por causa desse recurso, é uma boa prática de programação para evitar o uso "
"de objetos mutáveis contendo valores padrão. Em vez disso, utilize ``None`` "
"como o valor padrão e dentro da função, verifique se o parâmetro é ``None`` "
"e crie uma nova lista /dicionário/ o que quer que seja. Por exemplo, escreva"
" o seguinte código::"

#: ../../faq/programming.rst:514
msgid "but::"
msgstr "mas::"

#: ../../faq/programming.rst:520
msgid ""
"This feature can be useful.  When you have a function that's time-consuming "
"to compute, a common technique is to cache the parameters and the resulting "
"value of each call to the function, and return the cached value if the same "
"value is requested again.  This is called \"memoizing\", and can be "
"implemented like this::"
msgstr ""
"Esse recurso pode ser útil. Quando tiveres uma função que consome muito "
"tempo para calcular, uma técnica comum é armazenar em cache os parâmetros e "
"o valor resultante de cada chamada para a função e retornar o valor em cache"
" se o mesmo valor for solicitado novamente. Isso se chama \"memoizing\", e "
"pode ser implementado da seguinte forma::"

#: ../../faq/programming.rst:535
msgid ""
"You could use a global variable containing a dictionary instead of the "
"default value; it's a matter of taste."
msgstr ""
"Poderias usar uma variável global contendo um dicionário ao invés do valor "
"padrão; isso é uma questão de gosto."

#: ../../faq/programming.rst:540
msgid ""
"How can I pass optional or keyword parameters from one function to another?"
msgstr ""
"Como passar parâmetros opcionais ou parâmetros na forma de keyword de uma "
"função a outra?"

#: ../../faq/programming.rst:542
msgid ""
"Collect the arguments using the ``*`` and ``**`` specifiers in the "
"function's parameter list; this gives you the positional arguments as a "
"tuple and the keyword arguments as a dictionary.  You can then pass these "
"arguments when calling another function by using ``*`` and ``**``::"
msgstr ""
"Preceda os argumentos com o uso de especificadores (asteriscos) ``* `` ou "
"``** `` na lista de parâmetros da função; Isso faz com que os argumentos "
"posicionais como uma tupla e os keyword arguments sejam passados como um "
"dicionário. Poderás, também, passar esses argumentos ao invocar outra função"
" usando ``* `` e `` **``::"

#: ../../faq/programming.rst:553
msgid ""
"In the unlikely case that you care about Python versions older than 2.0, use"
" :func:`apply`::"
msgstr ""

#: ../../faq/programming.rst:570
msgid "What is the difference between arguments and parameters?"
msgstr "Qual a diferença entre argumentos e parâmetros?"

#: ../../faq/programming.rst:572
msgid ""
":term:`Parameters <parameter>` are defined by the names that appear in a "
"function definition, whereas :term:`arguments <argument>` are the values "
"actually passed to a function when calling it.  Parameters define what types"
" of arguments a function can accept.  For example, given the function "
"definition::"
msgstr ""
":term:`Parameters 1` são definidos pelos nomes que aparecem na definição da "
"função, enquanto que :term:`arguments 2` são os valores que serão passados "
"para a função no momento em que esta estiver sendo invocada. Os parâmetros "
"irão definir quais os tipos de argumentos que uma função pode receber. Por "
"exemplo, dada a definição da função::"

#: ../../faq/programming.rst:580
msgid ""
"*foo*, *bar* and *kwargs* are parameters of ``func``.  However, when calling"
" ``func``, for example::"
msgstr ""
"*foo*, *bar* e *kwargs* são parâmetros de ``func``.  Dessa forma, ao invocar"
" ``func``, por exemplo::"

#: ../../faq/programming.rst:585
msgid "the values ``42``, ``314``, and ``somevar`` are arguments."
msgstr "os valores ``42``, ``314``, e ``somevar`` são os argumentos."

#: ../../faq/programming.rst:589
msgid "Why did changing list 'y' also change list 'x'?"
msgstr "Por que ao alterar a lista 'y' também altera a lista 'x'?"

#: ../../faq/programming.rst:591
msgid "If you wrote code like::"
msgstr "Se escreveres um código como::"

#: ../../faq/programming.rst:601
msgid ""
"you might be wondering why appending an element to ``y`` changed ``x`` too."
msgstr ""
"Poderás estar se perguntando por que acrescentar um elemento a ``y`` também "
"mudou ``x``."

#: ../../faq/programming.rst:603
msgid "There are two factors that produce this result:"
msgstr "Há 2 fatores que produzem esse resultado, são eles:"

#: ../../faq/programming.rst:605
msgid ""
"Variables are simply names that refer to objects.  Doing ``y = x`` doesn't "
"create a copy of the list -- it creates a new variable ``y`` that refers to "
"the same object ``x`` refers to.  This means that there is only one object "
"(the list), and both ``x`` and ``y`` refer to it."
msgstr ""
"As variáveis são simplesmente nomes que referem-se a objetos. Ao escrevermos"
" ``y=x`` não criará uma cópia da lista - criará uma nova variável ``y`` que "
"irá se referir ao mesmo objeto que ``x`` está se referindo. Isso significa "
"que existe apenas um objeto (lista), e ambos nomes (variáveis) ``x`` e ``y``"
" estão associados ao mesmo."

#: ../../faq/programming.rst:609
msgid ""
"Lists are :term:`mutable`, which means that you can change their content."
msgstr ""
"Listas são objetos mutáveis :term:`mutable`, o que significa que você pode "
"alterar o seu conteúdo."

#: ../../faq/programming.rst:611
msgid ""
"After the call to :meth:`~list.append`, the content of the mutable object "
"has changed from ``[]`` to ``[10]``.  Since both the variables refer to the "
"same object, using either name accesses the modified value ``[10]``."
msgstr ""
"Após invocar para :meth:`~list.append`, o conteúdo do objeto mutável "
"alterou-se de ``[]`` para ``[10]``. Uma vez que ambas as variáveis referem-"
"se ao mesmo objeto, usar qualquer um dos nomes acessará o valor modificado "
"``[10] ``."

#: ../../faq/programming.rst:615
msgid "If we instead assign an immutable object to ``x``::"
msgstr "Se por acaso, atribuímos um objeto imutável a ``x``::"

#: ../../faq/programming.rst:625
msgid ""
"we can see that in this case ``x`` and ``y`` are not equal anymore.  This is"
" because integers are :term:`immutable`, and when we do ``x = x + 1`` we are"
" not mutating the int ``5`` by incrementing its value; instead, we are "
"creating a new object (the int ``6``) and assigning it to ``x`` (that is, "
"changing which object ``x`` refers to).  After this assignment we have two "
"objects (the ints ``6`` and ``5``) and two variables that refer to them "
"(``x`` now refers to ``6`` but ``y`` still refers to ``5``)."
msgstr ""
"veremos que nesse caso ``x`` e ``y`` não são mais iguais. Isso ocorre porque"
" os números inteiros são :term:`immutable`, e quando fizermos ``x=x+1`` não "
"estaremos mudando o int ``5`` e incrementando o seu valor; em vez disso, "
"estamos criando um novo objeto (o int ``6``) e associando ``x`` (isto é, "
"mudando para o objeto no qual ``x`` se refere). Após esta tarefa, temos dois"
" objetos (os ints ``6`` e ``5``) e duas variáveis que referem-se a elas "
"(``x`` agora se refere a ``6`` mas ``y`` ainda refere-se a ``5``)."

#: ../../faq/programming.rst:633
msgid ""
"Some operations (for example ``y.append(10)`` and ``y.sort()``) mutate the "
"object, whereas superficially similar operations (for example ``y = y + "
"[10]`` and ``sorted(y)``) create a new object.  In general in Python (and in"
" all cases in the standard library) a method that mutates an object will "
"return ``None`` to help avoid getting the two types of operations confused."
"  So if you mistakenly write ``y.sort()`` thinking it will give you a sorted"
" copy of ``y``, you'll instead end up with ``None``, which will likely cause"
" your program to generate an easily diagnosed error."
msgstr ""
"Algumas operações (por exemplo, ``y.append(10)`` e ``y.sort()``) alteram o "
"objeto, enquanto operações superficialmente semelhantes (por exemplo ``y = y"
" + [10]`` e ``sorted(y)``) cria um novo objeto. Em geral em Python (e em "
"todos os casos na biblioteca padrão) um método que transforma um objeto "
"retornará ``None`` para ajudar a evitar confundir os dois tipos de "
"operações. Portanto, se você escrever por engano ``y.sort()`` pensando que "
"lhe dará uma cópia ordenada de ``y``, você terminará com ``None``, o que "
"provavelmente fará com que seu programa gere um erro facilmente "
"diagnosticado."

#: ../../faq/programming.rst:642
msgid ""
"However, there is one class of operations where the same operation sometimes"
" has different behaviors with different types:  the augmented assignment "
"operators.  For example, ``+=`` mutates lists but not tuples or ints "
"(``a_list += [1, 2, 3]`` is equivalent to ``a_list.extend([1, 2, 3])`` and "
"mutates ``a_list``, whereas ``some_tuple += (1, 2, 3)`` and ``some_int += "
"1`` create new objects)."
msgstr ""
"No entanto, há uma classe de operações em que a mesma operação às vezes tem "
"comportamentos diferentes com tipos diferentes: os operadores de atribuição "
"aumentada. Por exemplo, ``+=`` transforma listas, mas não tuplas ou ints "
"(``a_list += [1, 2, 3]`` é equivalente a``a_list.extend([1, 2, 3])`` a "
"altera ``a_list``, sendo que ``some_tuple += (1, 2, 3)`` e ``some_int += 1``"
" cria novos objetos)."

#: ../../faq/programming.rst:649
msgid "In other words:"
msgstr "Em outras palavras:"

#: ../../faq/programming.rst:651
msgid ""
"If we have a mutable object (:class:`list`, :class:`dict`, :class:`set`, "
"etc.), we can use some specific operations to mutate it and all the "
"variables that refer to it will see the change."
msgstr ""
"Se tivermos objetos mutáveis (:class:`list`, :class:`dict`, :class:`set`, "
"etc.), podemos usar algumas operações específicas para altera-lo e todas as "
"variáveis que se referem a ela sofreram também a mudança."

#: ../../faq/programming.rst:654
msgid ""
"If we have an immutable object (:class:`str`, :class:`int`, :class:`tuple`, "
"etc.), all the variables that refer to it will always see the same value, "
"but operations that transform that value into a new value always return a "
"new object."
msgstr ""
"Caso tenhamos um objeto imutável (:class:`str`, :class:`int`, "
":class:`tuple`, etc.), todas as variáveis que se referem as mesmas sempre "
"verão o mesmo valor, mas as operações que transformam-se nesses valores "
"sempre retornarão novos objetos."

#: ../../faq/programming.rst:659
msgid ""
"If you want to know if two variables refer to the same object or not, you "
"can use the :keyword:`is` operator, or the built-in function :func:`id`."
msgstr ""
"Se quiseres saber se duas variáveis se referem ao mesmo objeto ou não, podes"
" usar a palavra-chave :keyword:`is`, ou a função builtin :func:`id`."

#: ../../faq/programming.rst:664
msgid "How do I write a function with output parameters (call by reference)?"
msgstr ""
"Como escrever uma função com parâmetros de saída (invocada por referência)?"

#: ../../faq/programming.rst:666
msgid ""
"Remember that arguments are passed by assignment in Python.  Since "
"assignment just creates references to objects, there's no alias between an "
"argument name in the caller and callee, and so no call-by-reference per se."
"  You can achieve the desired effect in a number of ways."
msgstr ""
"Lembre-se de que os argumentos são passados por atribuição em Python. Uma "
"vez que a tarefa apenas cria referências a objetos, não existe \"alias\" "
"entre um nome de argumento naquele que invocado e o destinatário, portanto, "
"não há referência de chamada por si. Podes alcançar o efeito desejado de "
"várias maneiras."

#: ../../faq/programming.rst:671
msgid "By returning a tuple of the results::"
msgstr "Retornando um Tupla com os resultados:"

#: ../../faq/programming.rst:682
msgid "This is almost always the clearest solution."
msgstr "Esta quase sempre é a solução mais clara."

#: ../../faq/programming.rst:684
msgid ""
"By using global variables.  This isn't thread-safe, and is not recommended."
msgstr ""
"Utilizando variáveis globais. Essa forma de trabalho não é segura para uso "
"com thread e portanto, a mesma não é recomendada"

#: ../../faq/programming.rst:686
msgid "By passing a mutable (changeable in-place) object::"
msgstr "Ao passar um objeto mutável (que possa ser alterado no local) ::"

#: ../../faq/programming.rst:696
msgid "By passing in a dictionary that gets mutated::"
msgstr "Pela passagem de um dicionário que seja mutável::"

#: ../../faq/programming.rst:706
msgid "Or bundle up values in a class instance::"
msgstr "Ou agrupando valores numa instância de classe::"

#: ../../faq/programming.rst:722
msgid "There's almost never a good reason to get this complicated."
msgstr "Quase nunca existe uma boa razão para complicar isso."

#: ../../faq/programming.rst:724
msgid "Your best choice is to return a tuple containing the multiple results."
msgstr ""
"A sua melhor escolha será retornar uma Tupla contendo os múltiplos "
"resultados."

#: ../../faq/programming.rst:728
msgid "How do you make a higher order function in Python?"
msgstr "Como fazer uma função de ordem superior em Python?"

#: ../../faq/programming.rst:730
msgid ""
"You have two choices: you can use nested scopes or you can use callable "
"objects. For example, suppose you wanted to define ``linear(a,b)`` which "
"returns a function ``f(x)`` that computes the value ``a*x+b``.  Using nested"
" scopes::"
msgstr ""
"Existem duas opções: podes usar escopos aninhados ou poderás usar objetos "
"invocáveis. Por exemplo, suponha que desejasses definir que ``linear(a,b)`` "
"retorne uma função ``f(x)`` que calcule o valor ``a*x+b``. Usando escopos "
"aninhados, temos::"

#: ../../faq/programming.rst:739
msgid "Or using a callable object::"
msgstr "Ou utilizando objetos invocáveis::"

#: ../../faq/programming.rst:749
msgid "In both cases, ::"
msgstr "Em ambos os casos::"

#: ../../faq/programming.rst:753
msgid "gives a callable object where ``taxes(10e6) == 0.3 * 10e6 + 2``."
msgstr "dado um objeto invocável, onde ``taxes(10e6) == 0.3 * 10e6 + 2``."

#: ../../faq/programming.rst:755
msgid ""
"The callable object approach has the disadvantage that it is a bit slower "
"and results in slightly longer code.  However, note that a collection of "
"callables can share their signature via inheritance::"
msgstr ""
"A abordagem do objeto invocável tem a desvantagem de que é um pouco mais "
"lento e resulta num código ligeiramente mais longo. No entanto, note que uma"
" coleção de callables pode compartilhar sua assinatura via herança::"

#: ../../faq/programming.rst:764
msgid "Object can encapsulate state for several methods::"
msgstr "Objetos podem encapsular o estado para vários métodos::"

#: ../../faq/programming.rst:782
msgid ""
"Here ``inc()``, ``dec()`` and ``reset()`` act like functions which share the"
" same counting variable."
msgstr ""
"Aqui ``inc()``, ``dec()`` e ``reset()`` funcionam como funções que "
"compartilham a mesma variável contador."

#: ../../faq/programming.rst:787
msgid "How do I copy an object in Python?"
msgstr "Como faço para copiar um objeto no Python?"

#: ../../faq/programming.rst:789
msgid ""
"In general, try :func:`copy.copy` or :func:`copy.deepcopy` for the general "
"case. Not all objects can be copied, but most can."
msgstr ""
"Basicamente, tente utilizar a função :func:`copy.copy` ou a função "
":func:`copy.deepcopy` para casos gerais. Nem todos os objetos podem ser "
"copiados, mas a maioria poderá."

#: ../../faq/programming.rst:792
msgid ""
"Some objects can be copied more easily.  Dictionaries have a "
":meth:`~dict.copy` method::"
msgstr ""
"Alguns objetos podem ser copiados com mais facilidade. Os dicionários têm um"
" método :meth:`~dict.copy`::"

#: ../../faq/programming.rst:797
msgid "Sequences can be copied by slicing::"
msgstr "As sequências podem ser copiadas através do uso do slicing::"

#: ../../faq/programming.rst:803
msgid "How can I find the methods or attributes of an object?"
msgstr "Como posso encontrar os métodos ou atributos de um objeto?"

#: ../../faq/programming.rst:805
msgid ""
"For an instance x of a user-defined class, ``dir(x)`` returns an "
"alphabetized list of the names containing the instance attributes and "
"methods and attributes defined by its class."
msgstr ""
"Para uma instância X de uma classe definida pelo usuário, ``dir(x)`` retorna"
" uma lista organizada alfabeticamente dos nomes contidos, os atributos da "
"instância e os métodos e atributos definidos por sua classe."

#: ../../faq/programming.rst:811
msgid "How can my code discover the name of an object?"
msgstr "Como que o meu código pode descobrir o nome de um objeto?"

#: ../../faq/programming.rst:813
msgid ""
"Generally speaking, it can't, because objects don't really have names. "
"Essentially, assignment always binds a name to a value; The same is true of "
"``def`` and ``class`` statements, but in that case the value is a callable. "
"Consider the following code::"
msgstr ""
"De um modo geral, não pode, porque os objetos realmente não têm nomes. "
"Essencialmente, a atribuição sempre vincula um nome a um valor; O mesmo é "
"verdade para as declarações ``def`` e ``class``, mas nesse caso o valor é um"
" callable. Considere o seguinte código::"

#: ../../faq/programming.rst:829
msgid ""
"Arguably the class has a name: even though it is bound to two names and "
"invoked through the name B the created instance is still reported as an "
"instance of class A.  However, it is impossible to say whether the "
"instance's name is a or b, since both names are bound to the same value."
msgstr ""
"Provavelmente, a classe tem um nome: mesmo que seja vinculada a dois nomes e"
" invocada através do nome B, a instância criada ainda é relatada como uma "
"instância da classe A. No entanto, é impossível dizer se o nome da instância"
" é A ou B, uma vez que ambos os nomes estão vinculados ao mesmo valor."

#: ../../faq/programming.rst:834
msgid ""
"Generally speaking it should not be necessary for your code to \"know the "
"names\" of particular values. Unless you are deliberately writing "
"introspective programs, this is usually an indication that a change of "
"approach might be beneficial."
msgstr ""
"De um modo geral, não deveria ser necessário que o seu código \"conheça os "
"nomes\" de valores específicos. A menos que escrevas deliberadamente "
"programas introspectivos, isso geralmente é uma indicação de que uma mudança"
" de abordagem pode ser benéfica."

#: ../../faq/programming.rst:839
msgid ""
"In comp.lang.python, Fredrik Lundh once gave an excellent analogy in answer "
"to this question:"
msgstr ""
"Em comp.lang.python, Fredrik Lundh deu uma excelente analogia em resposta a "
"esta pergunta:"

#: ../../faq/programming.rst:842
msgid ""
"The same way as you get the name of that cat you found on your porch: the "
"cat (object) itself cannot tell you its name, and it doesn't really care -- "
"so the only way to find out what it's called is to ask all your neighbours "
"(namespaces) if it's their cat (object)..."
msgstr ""
"Da mesma forma que você pega o nome daquele gato que encontrou na sua "
"varanda: o próprio gato (objeto) não pode lhe dizer o seu nome, e ele "
"realmente não se importa -- então a única maneira de descobrir como ele se "
"chama é perguntar a todos os seus vizinhos (espaços de nomes) se é o gato "
"deles (objeto)..."

#: ../../faq/programming.rst:847
msgid ""
"....and don't be surprised if you'll find that it's known by many names, or "
"no name at all!"
msgstr ""
"....e não fique surpreso se você encontrar que é conhecido por muitos nomes,"
" ou até mesmo nenhum nome."

#: ../../faq/programming.rst:852
msgid "What's up with the comma operator's precedence?"
msgstr "O que há com a precedência do operador vírgula?"

#: ../../faq/programming.rst:854
msgid "Comma is not an operator in Python.  Consider this session::"
msgstr "A vírgula não é um operador em Python. Considere este código::"

#: ../../faq/programming.rst:859
msgid ""
"Since the comma is not an operator, but a separator between expressions the "
"above is evaluated as if you had entered::"
msgstr ""
"Uma vez que a vírgula não seja um operador, mas um separador entre as "
"expressões acima, o código será avaliado como se tivéssemos entrado::"

#: ../../faq/programming.rst:864
msgid "not::"
msgstr "não::"

#: ../../faq/programming.rst:868
msgid ""
"The same is true of the various assignment operators (``=``, ``+=`` etc).  "
"They are not truly operators but syntactic delimiters in assignment "
"statements."
msgstr ""
"O mesmo é verdade para as várias operações de atribuição (``=``,``+=`` etc)."
" Eles não são operadores de verdade mas delimitadores sintáticos em "
"instruções de atribuição."

#: ../../faq/programming.rst:873
msgid "Is there an equivalent of C's \"?:\" ternary operator?"
msgstr "Existe um equivalente ao operador \"?:\" ternário do C?"

#: ../../faq/programming.rst:875
msgid ""
"Yes, this feature was added in Python 2.5. The syntax would be as follows::"
msgstr ""

#: ../../faq/programming.rst:883
msgid "For versions previous to 2.5 the answer would be 'No'."
msgstr ""

#: ../../faq/programming.rst:887
msgid "Is it possible to write obfuscated one-liners in Python?"
msgstr "É possível escrever instruções de uma só linha ofuscadas em Python?"

#: ../../faq/programming.rst:889
msgid ""
"Yes.  Usually this is done by nesting :keyword:`lambda` within "
":keyword:`lambda`.  See the following three examples, due to Ulf Bartelt::"
msgstr ""

#: ../../faq/programming.rst:914
msgid "Don't try this at home, kids!"
msgstr "Não tente isso em casa, crianças!"

#: ../../faq/programming.rst:918
msgid "Numbers and strings"
msgstr "Números e Strings"

#: ../../faq/programming.rst:921
msgid "How do I specify hexadecimal and octal integers?"
msgstr "Como faço para especificar números inteiros hexadecimais e octal?"

#: ../../faq/programming.rst:923
msgid ""
"To specify an octal digit, precede the octal value with a zero, and then a "
"lower or uppercase \"o\".  For example, to set the variable \"a\" to the "
"octal value \"10\" (8 in decimal), type::"
msgstr ""
"Para especificar um dígito no formato octal, preceda o valor octal com um "
"zero e, em seguida, um \"o\" minúsculo ou maiúsculo. Por exemplo, para "
"definir a variável \"a\" para o valor octal \"10\" (8 em decimal), digite::"

#: ../../faq/programming.rst:931
msgid ""
"Hexadecimal is just as easy.  Simply precede the hexadecimal number with a "
"zero, and then a lower or uppercase \"x\".  Hexadecimal digits can be "
"specified in lower or uppercase.  For example, in the Python interpreter::"
msgstr ""
"Hexadecimal é bem fácil. Basta preceder o número hexadecimal com um zero e, "
"em seguida, um \"x\" minúsculo ou maiúsculo. Os dígitos hexadecimais podem "
"ser especificados em letras maiúsculas e minúsculas. Por exemplo, no "
"interpretador Python::"

#: ../../faq/programming.rst:944
msgid "Why does -22 // 10 return -3?"
msgstr "Por que -22 // 10 retorna -3?"

#: ../../faq/programming.rst:946
msgid ""
"It's primarily driven by the desire that ``i % j`` have the same sign as "
"``j``. If you want that, and also want::"
msgstr ""
"É principalmente direcionado pelo desejo de que ``i % j`` possui o mesmo "
"sinal que ``j``. Se quiseres isso, e também se desejares::"

#: ../../faq/programming.rst:951
msgid ""
"then integer division has to return the floor.  C also requires that "
"identity to hold, and then compilers that truncate ``i // j`` need to make "
"``i % j`` have the same sign as ``i``."
msgstr ""
"então a divisão inteira deve retornar o piso. C também requer que essa "
"identidade seja mantida, e então os compiladores que truncarem ``i // j`` "
"precisam fazer com que ``i % j`` tenham o mesmo sinal que ``i``."

#: ../../faq/programming.rst:955
msgid ""
"There are few real use cases for ``i % j`` when ``j`` is negative.  When "
"``j`` is positive, there are many, and in virtually all of them it's more "
"useful for ``i % j`` to be ``>= 0``.  If the clock says 10 now, what did it "
"say 200 hours ago?  ``-190 % 12 == 2`` is useful; ``-190 % 12 == -10`` is a "
"bug waiting to bite."
msgstr ""
"Existem poucos casos de uso reais para ``i % j`` quando ``j`` é negativo. "
"Quando ``j`` é positivo, existem muitos, e em virtualmente todos eles é mais"
" útil para ``i % j`` ser ``>= 0``. Se o relógio marca 10 agora, o que dizia "
"há 200 horas? ``-190 % 12 == 2`` é útil, enquanto ``-190 % 12 == -10`` é um "
"bug esperando para morder."

#: ../../faq/programming.rst:963
msgid ""
"On Python 2, ``a / b`` returns the same as ``a // b`` if "
"``__future__.division`` is not in effect.  This is also known as \"classic\""
" division."
msgstr ""

#: ../../faq/programming.rst:969
msgid "How do I convert a string to a number?"
msgstr "Como faço para converter uma String em um número?"

#: ../../faq/programming.rst:971
msgid ""
"For integers, use the built-in :func:`int` type constructor, e.g. "
"``int('144') == 144``.  Similarly, :func:`float` converts to floating-point,"
" e.g. ``float('144') == 144.0``."
msgstr ""
"Para inteiros, use o tipo built-in :func:`int`, por exemplo, ``int('144') =="
" 144``. Da mesma forma, :func:`float` converterá para um valor do tipo ponto"
" flutuante, por exemplo  ``float('144') == 144.0``."

#: ../../faq/programming.rst:975
msgid ""
"By default, these interpret the number as decimal, so that ``int('0144') == "
"144`` and ``int('0x144')`` raises :exc:`ValueError`. ``int(string, base)`` "
"takes the base to convert from as a second optional argument, so "
"``int('0x144', 16) == 324``.  If the base is specified as 0, the number is "
"interpreted using Python's rules: a leading '0' indicates octal, and '0x' "
"indicates a hex number."
msgstr ""

#: ../../faq/programming.rst:981
msgid ""
"Do not use the built-in function :func:`eval` if all you need is to convert "
"strings to numbers.  :func:`eval` will be significantly slower and it "
"presents a security risk: someone could pass you a Python expression that "
"might have unwanted side effects.  For example, someone could pass "
"``__import__('os').system(\"rm -rf $HOME\")`` which would erase your home "
"directory."
msgstr ""
"Não use a função embutida :func:`eval` se tudo que você precisa é converter "
"strings em números. :func:`eval` será significativamente mais lento e "
"apresenta um risco de segurança: alguém pode passar a você uma expressão "
"Python que pode ter efeitos colaterais indesejados. Por exemplo, alguém "
"poderia passar ``__import__('os').system(\"rm -rf $HOME\")`` que apagaria "
"seu diretório pessoal."

#: ../../faq/programming.rst:988
msgid ""
":func:`eval` also has the effect of interpreting numbers as Python "
"expressions, so that e.g. ``eval('09')`` gives a syntax error because Python"
" regards numbers starting with '0' as octal (base 8)."
msgstr ""

#: ../../faq/programming.rst:994
msgid "How do I convert a number to a string?"
msgstr "Como faço para converter um número numa string?"

#: ../../faq/programming.rst:996
msgid ""
"To convert, e.g., the number 144 to the string '144', use the built-in type "
"constructor :func:`str`.  If you want a hexadecimal or octal representation,"
" use the built-in functions :func:`hex` or :func:`oct`.  For fancy "
"formatting, see the :ref:`formatstrings` section, e.g. "
"``\"{:04d}\".format(144)`` yields ``'0144'`` and "
"``\"{:.3f}\".format(1.0/3.0)`` yields ``'0.333'``. In Python 2, the division"
" (/) operator returns the floor of the mathematical result of division if "
"the arguments are ints or longs, but it returns a reasonable approximation "
"of the division result if the arguments are floats or complex::"
msgstr ""

#: ../../faq/programming.rst:1010
msgid ""
"In Python 3, the default behaviour of the division operator (see :pep:`238`)"
" has been changed but you can have the same behaviour in Python 2 if you "
"import ``division`` from :mod:`__future__`::"
msgstr ""

#: ../../faq/programming.rst:1019
msgid ""
"You may also use :ref:`the % operator <string-formatting>` on strings.  See "
"the library reference manual for details."
msgstr ""

#: ../../faq/programming.rst:1024
msgid "How do I modify a string in place?"
msgstr "Como faço para modificar uma string no lugar?"

#: ../../faq/programming.rst:1026
msgid ""
"You can't, because strings are immutable.  If you need an object with this "
"ability, try converting the string to a list or use the array module::"
msgstr ""

#: ../../faq/programming.rst:1049
msgid "How do I use strings to call functions/methods?"
msgstr "Como faço para invocar funções/métodos através de uma String?"

#: ../../faq/programming.rst:1051
msgid "There are various techniques."
msgstr "Existem várias técnicas."

#: ../../faq/programming.rst:1053
msgid ""
"The best is to use a dictionary that maps strings to functions.  The primary"
" advantage of this technique is that the strings do not need to match the "
"names of the functions.  This is also the primary technique used to emulate "
"a case construct::"
msgstr ""
"A melhor forma é usar um dicionário que mapeie a Strings para funções. A "
"principal vantagem desta técnica é que as Strings não precisam combinar os "
"nomes das funções. Esta é também a principal técnica utilizada para emular "
"uma construção de maiúsculas e minúsculas ::"

#: ../../faq/programming.rst:1068
msgid "Use the built-in function :func:`getattr`::"
msgstr "Utilize a função built-in :func:`getattr`::"

#: ../../faq/programming.rst:1073
msgid ""
"Note that :func:`getattr` works on any object, including classes, class "
"instances, modules, and so on."
msgstr ""
"Observe que a fução :func:`getattr` funciona com qualquer objeto, incluindo "
"classes, instâncias de classe, módulos e assim por diante."

#: ../../faq/programming.rst:1076
msgid "This is used in several places in the standard library, like this::"
msgstr "A mesma é usado em vários lugares na biblioteca padrão, como este::"

#: ../../faq/programming.rst:1089
msgid "Use :func:`locals` or :func:`eval` to resolve the function name::"
msgstr "Utilize a função :func:`locals` ou a função :func:`eval` "

#: ../../faq/programming.rst:1102
msgid ""
"Note: Using :func:`eval` is slow and dangerous.  If you don't have absolute "
"control over the contents of the string, someone could pass a string that "
"resulted in an arbitrary function being executed."
msgstr ""
"Note: Usar a função :func:`eval` é lento e perigoso.  Se você não tiver "
"controle absoluto sobre o conteúdo da String, alguém pode passar uma String "
"que resulte numa função arbitrária sendo executada dentro da sua aplicação"

#: ../../faq/programming.rst:1107
msgid ""
"Is there an equivalent to Perl's chomp() for removing trailing newlines from"
" strings?"
msgstr ""
"Existe um equivalente em Perl ``chomp()`` para remover linhas novas de uma "
"String?"

#: ../../faq/programming.rst:1109
msgid ""
"Starting with Python 2.2, you can use ``S.rstrip(\"\\r\\n\")`` to remove all"
" occurrences of any line terminator from the end of the string ``S`` without"
" removing other trailing whitespace.  If the string ``S`` represents more "
"than one line, with several empty lines at the end, the line terminators for"
" all the blank lines will be removed::"
msgstr ""

#: ../../faq/programming.rst:1121
msgid ""
"Since this is typically only desired when reading text one line at a time, "
"using ``S.rstrip()`` this way works well."
msgstr ""
"Geralmente isso só é desejado ao ler um texto linha por linha, usando "
"``S.rstrip()`` dessa maneira funciona bem."

#: ../../faq/programming.rst:1124
msgid "For older versions of Python, there are two partial substitutes:"
msgstr ""

#: ../../faq/programming.rst:1126
msgid ""
"If you want to remove all trailing whitespace, use the ``rstrip()`` method "
"of string objects.  This removes all trailing whitespace, not just a single "
"newline."
msgstr ""

#: ../../faq/programming.rst:1130
msgid ""
"Otherwise, if there is only one line in the string ``S``, use "
"``S.splitlines()[0]``."
msgstr ""

#: ../../faq/programming.rst:1135
msgid "Is there a scanf() or sscanf() equivalent?"
msgstr "Existe uma função scanf() ou sscanf() ou algo equivalente?"

#: ../../faq/programming.rst:1137
msgid "Not as such."
msgstr "Não como tal."

#: ../../faq/programming.rst:1139
msgid ""
"For simple input parsing, the easiest approach is usually to split the line "
"into whitespace-delimited words using the :meth:`~str.split` method of "
"string objects and then convert decimal strings to numeric values using "
":func:`int` or :func:`float`.  ``split()`` supports an optional \"sep\" "
"parameter which is useful if the line uses something other than whitespace "
"as a separator."
msgstr ""
"Para a análise de entrada simples, a abordagem mais fácil geralmente é "
"dividir a linha em palavras delimitadas por espaços em branco usando o "
"método :meth:`str.split` de objetos Strings e, em seguida, converter as "
"Strings decimais para valores numéricos usando a função :func:`int` ou a "
"função :func:`float`. A função ``split()`` suporta um parâmetro \"sep\" "
"opcional que é útil se a linha utilizar algo diferente de espaço em branco "
"como um separador."

#: ../../faq/programming.rst:1145
msgid ""
"For more complicated input parsing, regular expressions are more powerful "
"than C's :c:func:`sscanf` and better suited for the task."
msgstr ""
"Para entradas de textos mais complicadas, as expressões regulares são mais "
"poderosas do que as funções C's :c:func:`sscanf` e mais adequadas para essa "
"tarefa."

#: ../../faq/programming.rst:1150
msgid ""
"What does 'UnicodeError: ASCII [decoding,encoding] error: ordinal not in "
"range(128)' mean?"
msgstr ""

#: ../../faq/programming.rst:1152
msgid ""
"This error indicates that your Python installation can handle only 7-bit "
"ASCII strings.  There are a couple ways to fix or work around the problem."
msgstr ""

#: ../../faq/programming.rst:1155
msgid ""
"If your programs must handle data in arbitrary character set encodings, the "
"environment the application runs in will generally identify the encoding of "
"the data it is handing you.  You need to convert the input to Unicode data "
"using that encoding.  For example, a program that handles email or web input"
" will typically find character set encoding information in Content-Type "
"headers.  This can then be used to properly convert input data to Unicode. "
"Assuming the string referred to by ``value`` is encoded as UTF-8::"
msgstr ""

#: ../../faq/programming.rst:1165
msgid ""
"will return a Unicode object.  If the data is not correctly encoded as "
"UTF-8, the above call will raise a :exc:`UnicodeError` exception."
msgstr ""

#: ../../faq/programming.rst:1168
msgid ""
"If you only want strings converted to Unicode which have non-ASCII data, you"
" can try converting them first assuming an ASCII encoding, and then generate"
" Unicode objects if that fails::"
msgstr ""

#: ../../faq/programming.rst:1180
msgid ""
"It's possible to set a default encoding in a file called "
"``sitecustomize.py`` that's part of the Python library.  However, this isn't"
" recommended because changing the Python-wide default encoding may cause "
"third-party extension modules to fail."
msgstr ""

#: ../../faq/programming.rst:1185
msgid ""
"Note that on Windows, there is an encoding known as \"mbcs\", which uses an "
"encoding specific to your current locale.  In many cases, and particularly "
"when working with COM, this may be an appropriate default encoding to use."
msgstr ""

#: ../../faq/programming.rst:1191
msgid "Sequences (Tuples/Lists)"
msgstr "Sequencias (Tuples/Lists)"

#: ../../faq/programming.rst:1194
msgid "How do I convert between tuples and lists?"
msgstr "Como faço para converter tuplas em listas?"

#: ../../faq/programming.rst:1196
msgid ""
"The type constructor ``tuple(seq)`` converts any sequence (actually, any "
"iterable) into a tuple with the same items in the same order."
msgstr ""
"O construtor de tipo ``tuple(seq)`` converte qualquer sequência (na verdade,"
" qualquer iterável) numa tupla com os mesmos itens na mesma ordem."

#: ../../faq/programming.rst:1199
msgid ""
"For example, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` and ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  If the argument is a tuple, it does not make a "
"copy but returns the same object, so it is cheap to call :func:`tuple` when "
"you aren't sure that an object is already a tuple."
msgstr ""
"Por exemplo, ``tuple([1, 2, 3])`` yields ``(1, 2, 3)`` e ``tuple('abc')`` "
"yields ``('a', 'b', 'c')``.  Se o argumento for uma tupla, a mesma não faz "
"uma cópia, mas retorna o mesmo objeto, por isso é barato invocar a função "
":func:`tuple` quando você não tiver certeza que determinado objeto já é uma "
"tupla."

#: ../../faq/programming.rst:1204
msgid ""
"The type constructor ``list(seq)`` converts any sequence or iterable into a "
"list with the same items in the same order.  For example, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` and ``list('abc')`` yields ``['a', 'b', 'c']``.  "
"If the argument is a list, it makes a copy just like ``seq[:]`` would."
msgstr ""
" construtor de tipos ``list(seq)`` converte qualquer seqüência ou iterável "
"em uma lista com os mesmos itens na mesma ordem. Por exemplo, ``list((1, 2, "
"3))`` yields ``[1, 2, 3]`` e ``list('abc')`` yields ``['a', 'b', 'c']``.   "
"Se o argumento for uma lista, o meso fará uma cópia como em ``seq[:]``."

#: ../../faq/programming.rst:1211
msgid "What's a negative index?"
msgstr "O que é um índice negativo?"

#: ../../faq/programming.rst:1213
msgid ""
"Python sequences are indexed with positive numbers and negative numbers.  "
"For positive numbers 0 is the first index 1 is the second index and so "
"forth.  For negative indices -1 is the last index and -2 is the penultimate "
"(next to last) index and so forth.  Think of ``seq[-n]`` as the same as "
"``seq[len(seq)-n]``."
msgstr ""

#: ../../faq/programming.rst:1218
msgid ""
"Using negative indices can be very convenient.  For example ``S[:-1]`` is "
"all of the string except for its last character, which is useful for "
"removing the trailing newline from a string."
msgstr ""

#: ../../faq/programming.rst:1224
msgid "How do I iterate over a sequence in reverse order?"
msgstr "Como que eu itero uma sequência na ordem inversa?"

#: ../../faq/programming.rst:1226
msgid ""
"Use the :func:`reversed` built-in function, which is new in Python 2.4::"
msgstr ""

#: ../../faq/programming.rst:1231
msgid ""
"This won't touch your original sequence, but build a new copy with reversed "
"order to iterate over."
msgstr ""
"Isso não vai alterar sua sequência original, mas construir uma nova cópia "
"com a ordem inversa para iteração."

#: ../../faq/programming.rst:1234
msgid "With Python 2.3, you can use an extended slice syntax::"
msgstr ""

#: ../../faq/programming.rst:1241
msgid "How do you remove duplicates from a list?"
msgstr "Como que remove itens duplicados de uma lista?"

#: ../../faq/programming.rst:1243
msgid "See the Python Cookbook for a long discussion of many ways to do this:"
msgstr ""

#: ../../faq/programming.rst:1245
msgid "https://code.activestate.com/recipes/52560/"
msgstr "https://code.activestate.com/recipes/52560/"

#: ../../faq/programming.rst:1247
msgid ""
"If you don't mind reordering the list, sort it and then scan from the end of"
" the list, deleting duplicates as you go::"
msgstr ""

#: ../../faq/programming.rst:1259
msgid ""
"If all elements of the list may be used as dictionary keys (i.e. they are "
"all hashable) this is often faster ::"
msgstr ""

#: ../../faq/programming.rst:1267
msgid "In Python 2.5 and later, the following is possible instead::"
msgstr ""

#: ../../faq/programming.rst:1271
msgid ""
"This converts the list into a set, thereby removing duplicates, and then "
"back into a list."
msgstr ""
"Isso converte a lista em um conjunto, deste modo removendo itens duplicados,"
" e depois de volta em uma lista."

#: ../../faq/programming.rst:1276
msgid "How do you make an array in Python?"
msgstr "Como fazer um vetor em Python?"

#: ../../faq/programming.rst:1278
msgid "Use a list::"
msgstr "Utilize uma lista::"

#: ../../faq/programming.rst:1282
msgid ""
"Lists are equivalent to C or Pascal arrays in their time complexity; the "
"primary difference is that a Python list can contain objects of many "
"different types."
msgstr ""

#: ../../faq/programming.rst:1285
msgid ""
"The ``array`` module also provides methods for creating arrays of fixed "
"types with compact representations, but they are slower to index than lists."
"  Also note that the Numeric extensions and others define array-like "
"structures with various characteristics as well."
msgstr ""

#: ../../faq/programming.rst:1290
msgid ""
"To get Lisp-style linked lists, you can emulate cons cells using tuples::"
msgstr ""

#: ../../faq/programming.rst:1294
msgid ""
"If mutability is desired, you could use lists instead of tuples.  Here the "
"analogue of lisp car is ``lisp_list[0]`` and the analogue of cdr is "
"``lisp_list[1]``.  Only do this if you're sure you really need to, because "
"it's usually a lot slower than using Python lists."
msgstr ""

#: ../../faq/programming.rst:1303
msgid "How do I create a multidimensional list?"
msgstr "Como faço para criar uma lista multidimensional?"

#: ../../faq/programming.rst:1305
msgid "You probably tried to make a multidimensional array like this::"
msgstr "Você provavelmente tentou fazer um Array multidimensional como isso::"

#: ../../faq/programming.rst:1309
msgid "This looks correct if you print it::"
msgstr ""

#: ../../faq/programming.rst:1314
msgid "But when you assign a value, it shows up in multiple places:"
msgstr "Mas quando atribuires um valor, o mesmo aparecerá em vários lugares:"

#: ../../faq/programming.rst:1320
msgid ""
"The reason is that replicating a list with ``*`` doesn't create copies, it "
"only creates references to the existing objects.  The ``*3`` creates a list "
"containing 3 references to the same list of length two.  Changes to one row "
"will show in all rows, which is almost certainly not what you want."
msgstr ""
"A razão é que replicar uma lista com ``*`` não cria cópias, ela apenas cria "
"referências aos objetos existentes. O ``*3`` cria uma lista contendo 3 "
"referências para a mesma lista que contém 2 itens cada. Mudanças numa linha "
"serão mostradas em todas as linhas, o que certamente não é o que você "
"deseja."

#: ../../faq/programming.rst:1325
msgid ""
"The suggested approach is to create a list of the desired length first and "
"then fill in each element with a newly created list::"
msgstr ""
"A abordagem sugerida é criar uma lista de comprimento desejado primeiro e, "
"em seguida, preencher cada elemento com uma lista recém-criada::"

#: ../../faq/programming.rst:1332
msgid ""
"This generates a list containing 3 different lists of length two.  You can "
"also use a list comprehension::"
msgstr ""
"Isso gera uma lista contendo 3 listas diferentes contendo 2 itens cadas. "
"Você também pode usar uma list comprehension::"

#: ../../faq/programming.rst:1338
msgid ""
"Or, you can use an extension that provides a matrix datatype; `NumPy "
"<http://www.numpy.org/>`_ is the best known."
msgstr ""
"Ou, você pode usar uma extensão que forneça um tipo de dados de Array; "
"`NumPy <http://www.numpy.org/>`_ is the best known."

#: ../../faq/programming.rst:1343
msgid "How do I apply a method to a sequence of objects?"
msgstr "Como eu aplico um método para uma sequência de objetos?"

#: ../../faq/programming.rst:1345
msgid "Use a list comprehension::"
msgstr "Usando list comprehension::"

#: ../../faq/programming.rst:1349
msgid "More generically, you can try the following function::"
msgstr ""

#: ../../faq/programming.rst:1359
msgid ""
"Why does a_tuple[i] += ['item'] raise an exception when the addition works?"
msgstr ""
"Porque a_tuple[i] += ['item'] levanta uma exceção quando a adição funciona?"

#: ../../faq/programming.rst:1361
msgid ""
"This is because of a combination of the fact that augmented assignment "
"operators are *assignment* operators, and the difference between mutable and"
" immutable objects in Python."
msgstr ""

#: ../../faq/programming.rst:1365
msgid ""
"This discussion applies in general when augmented assignment operators are "
"applied to elements of a tuple that point to mutable objects, but we'll use "
"a ``list`` and ``+=`` as our exemplar."
msgstr ""

#: ../../faq/programming.rst:1369
msgid "If you wrote::"
msgstr "Se você escrever::"

#: ../../faq/programming.rst:1377
msgid ""
"The reason for the exception should be immediately clear: ``1`` is added to "
"the object ``a_tuple[0]`` points to (``1``), producing the result object, "
"``2``, but when we attempt to assign the result of the computation, ``2``, "
"to element ``0`` of the tuple, we get an error because we can't change what "
"an element of a tuple points to."
msgstr ""

#: ../../faq/programming.rst:1383
msgid ""
"Under the covers, what this augmented assignment statement is doing is "
"approximately this::"
msgstr ""
"Por baixo, o que a instrução de atribuição aumentada está fazendo é "
"aproximadamente isso::"

#: ../../faq/programming.rst:1392
msgid ""
"It is the assignment part of the operation that produces the error, since a "
"tuple is immutable."
msgstr ""
"A parte da atribuição da operação que produz o erro, já que a tupla é "
"imutável."

#: ../../faq/programming.rst:1395
msgid "When you write something like::"
msgstr "Quando você escreve algo como::"

#: ../../faq/programming.rst:1403
msgid ""
"The exception is a bit more surprising, and even more surprising is the fact"
" that even though there was an error, the append worked::"
msgstr ""

#: ../../faq/programming.rst:1409
msgid ""
"To see why this happens, you need to know that (a) if an object implements "
"an ``__iadd__`` magic method, it gets called when the ``+=`` augmented "
"assignment is executed, and its return value is what gets used in the "
"assignment statement; and (b) for lists, ``__iadd__`` is equivalent to "
"calling ``extend`` on the list and returning the list.  That's why we say "
"that for lists, ``+=`` is a \"shorthand\" for ``list.extend``::"
msgstr ""

#: ../../faq/programming.rst:1421
msgid "This is equivalent to::"
msgstr "This is equivalent to::"

#: ../../faq/programming.rst:1426
msgid ""
"The object pointed to by a_list has been mutated, and the pointer to the "
"mutated object is assigned back to ``a_list``.  The end result of the "
"assignment is a no-op, since it is a pointer to the same object that "
"``a_list`` was previously pointing to, but the assignment still happens."
msgstr ""

#: ../../faq/programming.rst:1431
msgid "Thus, in our tuple example what is happening is equivalent to::"
msgstr ""

#: ../../faq/programming.rst:1439
msgid ""
"The ``__iadd__`` succeeds, and thus the list is extended, but even though "
"``result`` points to the same object that ``a_tuple[0]`` already points to, "
"that final assignment still results in an error, because tuples are "
"immutable."
msgstr ""

#: ../../faq/programming.rst:1445
msgid "Dictionaries"
msgstr "Dicionários"

#: ../../faq/programming.rst:1448
msgid "How can I get a dictionary to display its keys in a consistent order?"
msgstr ""

#: ../../faq/programming.rst:1450
msgid ""
"You can't.  Dictionaries store their keys in an unpredictable order, so the "
"display order of a dictionary's elements will be similarly unpredictable."
msgstr ""

#: ../../faq/programming.rst:1453
msgid ""
"This can be frustrating if you want to save a printable version to a file, "
"make some changes and then compare it with some other printed dictionary.  "
"In this case, use the ``pprint`` module to pretty-print the dictionary; the "
"items will be presented in order sorted by the key."
msgstr ""

#: ../../faq/programming.rst:1458
msgid ""
"A more complicated solution is to subclass ``dict`` to create a "
"``SortedDict`` class that prints itself in a predictable order.  Here's one "
"simpleminded implementation of such a class::"
msgstr ""

#: ../../faq/programming.rst:1470
msgid ""
"This will work for many common situations you might encounter, though it's "
"far from a perfect solution. The largest flaw is that if some values in the "
"dictionary are also dictionaries, their values won't be presented in any "
"particular order."
msgstr ""

#: ../../faq/programming.rst:1477
msgid ""
"I want to do a complicated sort: can you do a Schwartzian Transform in "
"Python?"
msgstr ""

#: ../../faq/programming.rst:1479
msgid ""
"The technique, attributed to Randal Schwartz of the Perl community, sorts "
"the elements of a list by a metric which maps each element to its \"sort "
"value\". In Python, use the ``key`` argument for the :func:`sort()` "
"function::"
msgstr ""

#: ../../faq/programming.rst:1488
msgid "How can I sort one list by values from another list?"
msgstr "Como eu posso ordenar uma lista pelos valores de outra lista?"

#: ../../faq/programming.rst:1490
msgid ""
"Merge them into a single list of tuples, sort the resulting list, and then "
"pick out the element you want. ::"
msgstr ""

#: ../../faq/programming.rst:1503
msgid "An alternative for the last step is::"
msgstr "Uma alternativa para o último passo é::"

#: ../../faq/programming.rst:1508
msgid ""
"If you find this more legible, you might prefer to use this instead of the "
"final list comprehension.  However, it is almost twice as slow for long "
"lists.  Why? First, the ``append()`` operation has to reallocate memory, and"
" while it uses some tricks to avoid doing that each time, it still has to do"
" it occasionally, and that costs quite a bit.  Second, the expression "
"\"result.append\" requires an extra attribute lookup, and third, there's a "
"speed reduction from having to make all those function calls."
msgstr ""

#: ../../faq/programming.rst:1518
msgid "Objects"
msgstr "Objetos"

#: ../../faq/programming.rst:1521
msgid "What is a class?"
msgstr "O que é uma classe?"

#: ../../faq/programming.rst:1523
msgid ""
"A class is the particular object type created by executing a class "
"statement. Class objects are used as templates to create instance objects, "
"which embody both the data (attributes) and code (methods) specific to a "
"datatype."
msgstr ""

#: ../../faq/programming.rst:1527
msgid ""
"A class can be based on one or more other classes, called its base "
"class(es). It then inherits the attributes and methods of its base classes. "
"This allows an object model to be successively refined by inheritance.  You "
"might have a generic ``Mailbox`` class that provides basic accessor methods "
"for a mailbox, and subclasses such as ``MboxMailbox``, ``MaildirMailbox``, "
"``OutlookMailbox`` that handle various specific mailbox formats."
msgstr ""

#: ../../faq/programming.rst:1536
msgid "What is a method?"
msgstr "O que é um método?"

#: ../../faq/programming.rst:1538
msgid ""
"A method is a function on some object ``x`` that you normally call as "
"``x.name(arguments...)``.  Methods are defined as functions inside the class"
" definition::"
msgstr ""

#: ../../faq/programming.rst:1548
msgid "What is self?"
msgstr "O que é o self?"

#: ../../faq/programming.rst:1550
msgid ""
"Self is merely a conventional name for the first argument of a method.  A "
"method defined as ``meth(self, a, b, c)`` should be called as ``x.meth(a, b,"
" c)`` for some instance ``x`` of the class in which the definition occurs; "
"the called method will think it is called as ``meth(x, a, b, c)``."
msgstr ""

#: ../../faq/programming.rst:1555
msgid "See also :ref:`why-self`."
msgstr "Veja também :ref:`why-self`."

#: ../../faq/programming.rst:1559
msgid ""
"How do I check if an object is an instance of a given class or of a subclass"
" of it?"
msgstr ""
"Como eu checo se um objeto é uma instância de uma dada classe ou de uma "
"subclasse dela?"

#: ../../faq/programming.rst:1561
msgid ""
"Use the built-in function ``isinstance(obj, cls)``.  You can check if an "
"object is an instance of any of a number of classes by providing a tuple "
"instead of a single class, e.g. ``isinstance(obj, (class1, class2, ...))``, "
"and can also check whether an object is one of Python's built-in types, e.g."
" ``isinstance(obj, str)`` or ``isinstance(obj, (int, long, float, "
"complex))``."
msgstr ""

#: ../../faq/programming.rst:1567
msgid ""
"Note that most programs do not use :func:`isinstance` on user-defined "
"classes very often.  If you are developing the classes yourself, a more "
"proper object-oriented style is to define methods on the classes that "
"encapsulate a particular behaviour, instead of checking the object's class "
"and doing a different thing based on what class it is.  For example, if you "
"have a function that does something::"
msgstr ""

#: ../../faq/programming.rst:1581
msgid ""
"A better approach is to define a ``search()`` method on all the classes and "
"just call it::"
msgstr ""

#: ../../faq/programming.rst:1596
msgid "What is delegation?"
msgstr "O que é delegation?"

#: ../../faq/programming.rst:1598
msgid ""
"Delegation is an object oriented technique (also called a design pattern). "
"Let's say you have an object ``x`` and want to change the behaviour of just "
"one of its methods.  You can create a new class that provides a new "
"implementation of the method you're interested in changing and delegates all"
" other methods to the corresponding method of ``x``."
msgstr ""

#: ../../faq/programming.rst:1604
msgid ""
"Python programmers can easily implement delegation.  For example, the "
"following class implements a class that behaves like a file but converts all"
" written data to uppercase::"
msgstr ""

#: ../../faq/programming.rst:1619
msgid ""
"Here the ``UpperOut`` class redefines the ``write()`` method to convert the "
"argument string to uppercase before calling the underlying "
"``self.__outfile.write()`` method.  All other methods are delegated to the "
"underlying ``self.__outfile`` object.  The delegation is accomplished via "
"the ``__getattr__`` method; consult :ref:`the language reference <attribute-"
"access>` for more information about controlling attribute access."
msgstr ""

#: ../../faq/programming.rst:1626
msgid ""
"Note that for more general cases delegation can get trickier. When "
"attributes must be set as well as retrieved, the class must define a "
":meth:`__setattr__` method too, and it must do so carefully.  The basic "
"implementation of :meth:`__setattr__` is roughly equivalent to the "
"following::"
msgstr ""

#: ../../faq/programming.rst:1637
msgid ""
"Most :meth:`__setattr__` implementations must modify ``self.__dict__`` to "
"store local state for self without causing an infinite recursion."
msgstr ""

#: ../../faq/programming.rst:1642
msgid ""
"How do I call a method defined in a base class from a derived class that "
"overrides it?"
msgstr ""

#: ../../faq/programming.rst:1644
msgid ""
"If you're using new-style classes, use the built-in :func:`super` function::"
msgstr ""

#: ../../faq/programming.rst:1650
msgid ""
"If you're using classic classes: For a class definition such as ``class "
"Derived(Base): ...`` you can call method ``meth()`` defined in ``Base`` (or "
"one of ``Base``'s base classes) as ``Base.meth(self, arguments...)``.  Here,"
" ``Base.meth`` is an unbound method, so you need to provide the ``self`` "
"argument."
msgstr ""

#: ../../faq/programming.rst:1658
msgid "How can I organize my code to make it easier to change the base class?"
msgstr ""
"Como eu posso organizar meu código para facilitar a troca da classe base?"

#: ../../faq/programming.rst:1660
msgid ""
"You could define an alias for the base class, assign the real base class to "
"it before your class definition, and use the alias throughout your class.  "
"Then all you have to change is the value assigned to the alias.  "
"Incidentally, this trick is also handy if you want to decide dynamically "
"(e.g. depending on availability of resources) which base class to use.  "
"Example::"
msgstr ""

#: ../../faq/programming.rst:1675
msgid "How do I create static class data and static class methods?"
msgstr ""

#: ../../faq/programming.rst:1677
msgid ""
"Both static data and static methods (in the sense of C++ or Java) are "
"supported in Python."
msgstr ""

#: ../../faq/programming.rst:1680
msgid ""
"For static data, simply define a class attribute.  To assign a new value to "
"the attribute, you have to explicitly use the class name in the assignment::"
msgstr ""

#: ../../faq/programming.rst:1692
msgid ""
"``c.count`` also refers to ``C.count`` for any ``c`` such that "
"``isinstance(c, C)`` holds, unless overridden by ``c`` itself or by some "
"class on the base-class search path from ``c.__class__`` back to ``C``."
msgstr ""

#: ../../faq/programming.rst:1696
msgid ""
"Caution: within a method of C, an assignment like ``self.count = 42`` "
"creates a new and unrelated instance named \"count\" in ``self``'s own dict."
"  Rebinding of a class-static data name must always specify the class "
"whether inside a method or not::"
msgstr ""

#: ../../faq/programming.rst:1703
msgid "Static methods are possible since Python 2.2::"
msgstr ""

#: ../../faq/programming.rst:1711
msgid "With Python 2.4's decorators, this can also be written as ::"
msgstr ""

#: ../../faq/programming.rst:1719
msgid ""
"However, a far more straightforward way to get the effect of a static method"
" is via a simple module-level function::"
msgstr ""

#: ../../faq/programming.rst:1725
msgid ""
"If your code is structured so as to define one class (or tightly related "
"class hierarchy) per module, this supplies the desired encapsulation."
msgstr ""

#: ../../faq/programming.rst:1730
msgid "How can I overload constructors (or methods) in Python?"
msgstr "Como eu posso sobrecarregar construtores (ou métodos) em Python?"

#: ../../faq/programming.rst:1732
msgid ""
"This answer actually applies to all methods, but the question usually comes "
"up first in the context of constructors."
msgstr ""
"Essa resposta na verdade se aplica para todos os métodos, mas a pergunta "
"normalmente aparece primeiro no contexto de construtores."

#: ../../faq/programming.rst:1735
msgid "In C++ you'd write"
msgstr "Em C++ escreveríamos "

#: ../../faq/programming.rst:1744
msgid ""
"In Python you have to write a single constructor that catches all cases "
"using default arguments.  For example::"
msgstr ""
"Em Python você tem que escrever um único construtor que pega todos os casos "
"usando argumentos padrões. Por exemplo:: "

#: ../../faq/programming.rst:1754
msgid "This is not entirely equivalent, but close enough in practice."
msgstr "Isso não é inteiramente equivalente, mas já está bem próximo."

#: ../../faq/programming.rst:1756
msgid "You could also try a variable-length argument list, e.g. ::"
msgstr ""
"Você também pode tentar uma lista de argumentos de comprimento variável, por"
" exemplo::"

#: ../../faq/programming.rst:1761
msgid "The same approach works for all method definitions."
msgstr "A mesma abordagem funciona para todas as definições de métodos."

#: ../../faq/programming.rst:1765
msgid "I try to use __spam and I get an error about _SomeClassName__spam."
msgstr "Eu tentei usar __spam e recebi um erro sobre _SomeClassName__spam."

#: ../../faq/programming.rst:1767
msgid ""
"Variable names with double leading underscores are \"mangled\" to provide a "
"simple but effective way to define class private variables.  Any identifier "
"of the form ``__spam`` (at least two leading underscores, at most one "
"trailing underscore) is textually replaced with ``_classname__spam``, where "
"``classname`` is the current class name with any leading underscores "
"stripped."
msgstr ""

#: ../../faq/programming.rst:1773
msgid ""
"This doesn't guarantee privacy: an outside user can still deliberately "
"access the \"_classname__spam\" attribute, and private values are visible in"
" the object's ``__dict__``.  Many Python programmers never bother to use "
"private variable names at all."
msgstr ""

#: ../../faq/programming.rst:1780
msgid ""
"My class defines __del__ but it is not called when I delete the object."
msgstr ""

#: ../../faq/programming.rst:1782
msgid "There are several possible reasons for this."
msgstr "Há várias razões possíveis para isto."

#: ../../faq/programming.rst:1784
msgid ""
"The del statement does not necessarily call :meth:`__del__` -- it simply "
"decrements the object's reference count, and if this reaches zero "
":meth:`__del__` is called."
msgstr ""

#: ../../faq/programming.rst:1788
msgid ""
"If your data structures contain circular links (e.g. a tree where each child"
" has a parent reference and each parent has a list of children) the "
"reference counts will never go back to zero.  Once in a while Python runs an"
" algorithm to detect such cycles, but the garbage collector might run some "
"time after the last reference to your data structure vanishes, so your "
":meth:`__del__` method may be called at an inconvenient and random time. "
"This is inconvenient if you're trying to reproduce a problem. Worse, the "
"order in which object's :meth:`__del__` methods are executed is arbitrary.  "
"You can run :func:`gc.collect` to force a collection, but there *are* "
"pathological cases where objects will never be collected."
msgstr ""

#: ../../faq/programming.rst:1799
msgid ""
"Despite the cycle collector, it's still a good idea to define an explicit "
"``close()`` method on objects to be called whenever you're done with them.  "
"The ``close()`` method can then remove attributes that refer to subobjecs.  "
"Don't call :meth:`__del__` directly -- :meth:`__del__` should call "
"``close()`` and ``close()`` should make sure that it can be called more than"
" once for the same object."
msgstr ""

#: ../../faq/programming.rst:1806
msgid ""
"Another way to avoid cyclical references is to use the :mod:`weakref` "
"module, which allows you to point to objects without incrementing their "
"reference count. Tree data structures, for instance, should use weak "
"references for their parent and sibling references (if they need them!)."
msgstr ""

#: ../../faq/programming.rst:1811
msgid ""
"If the object has ever been a local variable in a function that caught an "
"expression in an except clause, chances are that a reference to the object "
"still exists in that function's stack frame as contained in the stack trace."
" Normally, calling :func:`sys.exc_clear` will take care of this by clearing "
"the last recorded exception."
msgstr ""

#: ../../faq/programming.rst:1817
msgid ""
"Finally, if your :meth:`__del__` method raises an exception, a warning "
"message is printed to :data:`sys.stderr`."
msgstr ""

#: ../../faq/programming.rst:1822
msgid "How do I get a list of all instances of a given class?"
msgstr ""
"Como eu consigo pegar uma lista de todas as instâncias de uma dada classe?"

#: ../../faq/programming.rst:1824
msgid ""
"Python does not keep track of all instances of a class (or of a built-in "
"type). You can program the class's constructor to keep track of all "
"instances by keeping a list of weak references to each instance."
msgstr ""

#: ../../faq/programming.rst:1830
msgid "Why does the result of ``id()`` appear to be not unique?"
msgstr "Por que o resultado de ``id()``aparenta não ser único?"

#: ../../faq/programming.rst:1832
msgid ""
"The :func:`id` builtin returns an integer that is guaranteed to be unique "
"during the lifetime of the object.  Since in CPython, this is the object's "
"memory address, it happens frequently that after an object is deleted from "
"memory, the next freshly created object is allocated at the same position in"
" memory.  This is illustrated by this example:"
msgstr ""

#: ../../faq/programming.rst:1843
msgid ""
"The two ids belong to different integer objects that are created before, and"
" deleted immediately after execution of the ``id()`` call.  To be sure that "
"objects whose id you want to examine are still alive, create another "
"reference to the object:"
msgstr ""

#: ../../faq/programming.rst:1856
msgid "Modules"
msgstr "Módulos"

#: ../../faq/programming.rst:1859
msgid "How do I create a .pyc file?"
msgstr "Como faço para criar um arquivo .pyc?"

#: ../../faq/programming.rst:1861
msgid ""
"When a module is imported for the first time (or when the source is more "
"recent than the current compiled file) a ``.pyc`` file containing the "
"compiled code should be created in the same directory as the ``.py`` file."
msgstr ""

#: ../../faq/programming.rst:1865
msgid ""
"One reason that a ``.pyc`` file may not be created is permissions problems "
"with the directory. This can happen, for example, if you develop as one user"
" but run as another, such as if you are testing with a web server.  Creation"
" of a .pyc file is automatic if you're importing a module and Python has the"
" ability (permissions, free space, etc...) to write the compiled module back"
" to the directory."
msgstr ""

#: ../../faq/programming.rst:1872
msgid ""
"Running Python on a top level script is not considered an import and no "
"``.pyc`` will be created.  For example, if you have a top-level module "
"``foo.py`` that imports another module ``xyz.py``, when you run ``foo``, "
"``xyz.pyc`` will be created since ``xyz`` is imported, but no ``foo.pyc`` "
"file will be created since ``foo.py`` isn't being imported."
msgstr ""

#: ../../faq/programming.rst:1878
msgid ""
"If you need to create ``foo.pyc`` -- that is, to create a ``.pyc`` file for "
"a module that is not imported -- you can, using the :mod:`py_compile` and "
":mod:`compileall` modules."
msgstr ""

#: ../../faq/programming.rst:1882
msgid ""
"The :mod:`py_compile` module can manually compile any module.  One way is to"
" use the ``compile()`` function in that module interactively::"
msgstr ""

#: ../../faq/programming.rst:1888
msgid ""
"This will write the ``.pyc`` to the same location as ``foo.py`` (or you can "
"override that with the optional parameter ``cfile``)."
msgstr ""

#: ../../faq/programming.rst:1891
msgid ""
"You can also automatically compile all files in a directory or directories "
"using the :mod:`compileall` module.  You can do it from the shell prompt by "
"running ``compileall.py`` and providing the path of a directory containing "
"Python files to compile::"
msgstr ""

#: ../../faq/programming.rst:1900
msgid "How do I find the current module name?"
msgstr "Como encontro o nome do módulo atual?"

#: ../../faq/programming.rst:1902
msgid ""
"A module can find out its own module name by looking at the predefined "
"global variable ``__name__``.  If this has the value ``'__main__'``, the "
"program is running as a script.  Many modules that are usually used by "
"importing them also provide a command-line interface or a self-test, and "
"only execute this code after checking ``__name__``::"
msgstr ""

#: ../../faq/programming.rst:1917
msgid "How can I have modules that mutually import each other?"
msgstr ""

#: ../../faq/programming.rst:1919
msgid "Suppose you have the following modules:"
msgstr "Suponha que tenhas os seguintes módulos:"

#: ../../faq/programming.rst:1921
msgid "foo.py::"
msgstr "foo.py::"

#: ../../faq/programming.rst:1926
msgid "bar.py::"
msgstr "bar.py::"

#: ../../faq/programming.rst:1931
msgid "The problem is that the interpreter will perform the following steps:"
msgstr ""

#: ../../faq/programming.rst:1933
msgid "main imports foo"
msgstr "main imports foo"

#: ../../faq/programming.rst:1934
msgid "Empty globals for foo are created"
msgstr "Os globais vazios para foo são criados"

#: ../../faq/programming.rst:1935
msgid "foo is compiled and starts executing"
msgstr "foo é compilado e começa a executar"

#: ../../faq/programming.rst:1936
msgid "foo imports bar"
msgstr "foo imports bar"

#: ../../faq/programming.rst:1937
msgid "Empty globals for bar are created"
msgstr ""

#: ../../faq/programming.rst:1938
msgid "bar is compiled and starts executing"
msgstr ""

#: ../../faq/programming.rst:1939
msgid ""
"bar imports foo (which is a no-op since there already is a module named foo)"
msgstr ""

#: ../../faq/programming.rst:1940
msgid "bar.foo_var = foo.foo_var"
msgstr "bar.foo_var = foo.foo_var"

#: ../../faq/programming.rst:1942
msgid ""
"The last step fails, because Python isn't done with interpreting ``foo`` yet"
" and the global symbol dictionary for ``foo`` is still empty."
msgstr ""

#: ../../faq/programming.rst:1945
msgid ""
"The same thing happens when you use ``import foo``, and then try to access "
"``foo.foo_var`` in global code."
msgstr ""

#: ../../faq/programming.rst:1948
msgid "There are (at least) three possible workarounds for this problem."
msgstr ""

#: ../../faq/programming.rst:1950
msgid ""
"Guido van Rossum recommends avoiding all uses of ``from <module> import "
"...``, and placing all code inside functions.  Initializations of global "
"variables and class variables should use constants or built-in functions "
"only.  This means everything from an imported module is referenced as "
"``<module>.<name>``."
msgstr ""

#: ../../faq/programming.rst:1955
msgid ""
"Jim Roskind suggests performing steps in the following order in each module:"
msgstr ""

#: ../../faq/programming.rst:1957
msgid ""
"exports (globals, functions, and classes that don't need imported base "
"classes)"
msgstr ""

#: ../../faq/programming.rst:1959
msgid "``import`` statements"
msgstr "Declaração ``import``"

#: ../../faq/programming.rst:1960
msgid ""
"active code (including globals that are initialized from imported values)."
msgstr ""

#: ../../faq/programming.rst:1962
msgid ""
"van Rossum doesn't like this approach much because the imports appear in a "
"strange place, but it does work."
msgstr ""

#: ../../faq/programming.rst:1965
msgid ""
"Matthias Urlichs recommends restructuring your code so that the recursive "
"import is not necessary in the first place."
msgstr ""

#: ../../faq/programming.rst:1968
msgid "These solutions are not mutually exclusive."
msgstr ""

#: ../../faq/programming.rst:1972
msgid "__import__('x.y.z') returns <module 'x'>; how do I get z?"
msgstr "__import__('x.y.z') returns <module 'x'>; how do I get z?"

#: ../../faq/programming.rst:1974
msgid ""
"Consider using the convenience function :func:`~importlib.import_module` "
"from :mod:`importlib` instead::"
msgstr ""

#: ../../faq/programming.rst:1981
msgid ""
"When I edit an imported module and reimport it, the changes don't show up.  "
"Why does this happen?"
msgstr ""

#: ../../faq/programming.rst:1983
msgid ""
"For reasons of efficiency as well as consistency, Python only reads the "
"module file on the first time a module is imported.  If it didn't, in a "
"program consisting of many modules where each one imports the same basic "
"module, the basic module would be parsed and re-parsed many times.  To force"
" rereading of a changed module, do this::"
msgstr ""

#: ../../faq/programming.rst:1992
msgid ""
"Warning: this technique is not 100% fool-proof.  In particular, modules "
"containing statements like ::"
msgstr ""

#: ../../faq/programming.rst:1997
msgid ""
"will continue to work with the old version of the imported objects.  If the "
"module contains class definitions, existing class instances will *not* be "
"updated to use the new class definition.  This can result in the following "
"paradoxical behaviour:"
msgstr ""

#: ../../faq/programming.rst:2009
msgid ""
"The nature of the problem is made clear if you print out the class objects:"
msgstr ""
