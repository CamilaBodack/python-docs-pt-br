# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: Raphael Mendonça\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/math.rst:3
msgid ":mod:`math` --- Mathematical functions"
msgstr ":mod:`math` --- funções Matemáticas"

#: ../../library/math.rst:12
msgid ""
"This module is always available.  It provides access to the mathematical "
"functions defined by the C standard."
msgstr ""

#: ../../library/math.rst:15
msgid ""
"These functions cannot be used with complex numbers; use the functions of "
"the same name from the :mod:`cmath` module if you require support for "
"complex numbers.  The distinction between functions which support complex "
"numbers and those which don't is made since most users do not want to learn "
"quite as much mathematics as required to understand complex numbers.  "
"Receiving an exception instead of a complex result allows earlier detection "
"of the unexpected complex number used as a parameter, so that the programmer"
" can determine how and why it was generated in the first place."
msgstr ""
"Essas funções não podem ser usadas com números complexos; use as funções de "
"mesmo nome do módulo :mod:`cmath` se você precisar de suporte para números "
"complexos. A distinção entre funções que suportam números complexos e "
"aquelas que não suportam é feita uma vez que a maioria dos usuários não quer"
" aprender a matemática necessária para entender números complexos. Receber "
"uma exceção em vez de um resultado complexo permite a detecção antecipada do"
" número complexo inesperado usado como parâmetro, para que o programador "
"possa determinar como e por que ele foi gerado em primeiro lugar."

#: ../../library/math.rst:24
msgid ""
"The following functions are provided by this module.  Except when explicitly"
" noted otherwise, all return values are floats."
msgstr ""
"As funções a seguir são fornecidas por este módulo. Exceto quando "
"explicitamente indicado de outra forma, todos os valores de retorno são "
"pontos flutuantes."

#: ../../library/math.rst:29
msgid "Number-theoretic and representation functions"
msgstr "Funções teóricas dos números e de representação"

#: ../../library/math.rst:33
msgid ""
"Return the ceiling of *x* as a float, the smallest integer value greater "
"than or equal to *x*."
msgstr ""

#: ../../library/math.rst:39
msgid ""
"Return *x* with the sign of *y*.  On a platform that supports signed zeros, "
"``copysign(1.0, -0.0)`` returns *-1.0*."
msgstr ""

#: ../../library/math.rst:47
msgid "Return the absolute value of *x*."
msgstr "Retorna o valor absoluto de *x*."

#: ../../library/math.rst:52
msgid ""
"Return *x* factorial.  Raises :exc:`ValueError` if *x* is not integral or is"
" negative."
msgstr ""

#: ../../library/math.rst:60
msgid ""
"Return the floor of *x* as a float, the largest integer value less than or "
"equal to *x*."
msgstr ""

#: ../../library/math.rst:66
msgid ""
"Return ``fmod(x, y)``, as defined by the platform C library. Note that the "
"Python expression ``x % y`` may not return the same result.  The intent of "
"the C standard is that ``fmod(x, y)`` be exactly (mathematically; to "
"infinite precision) equal to ``x - n*y`` for some integer *n* such that the "
"result has the same sign as *x* and magnitude less than ``abs(y)``.  "
"Python's ``x % y`` returns a result with the sign of *y* instead, and may "
"not be exactly computable for float arguments. For example, ``fmod(-1e-100, "
"1e100)`` is ``-1e-100``, but the result of Python's ``-1e-100 % 1e100`` is "
"``1e100-1e-100``, which cannot be represented exactly as a float, and rounds"
" to the surprising ``1e100``.  For this reason, function :func:`fmod` is "
"generally preferred when working with floats, while Python's ``x % y`` is "
"preferred when working with integers."
msgstr ""
"Retorna ``fmod(x, y)``, conforme definido pela biblioteca C da plataforma. "
"Observe que a expressão Python ``x % y`` pode não retornar o mesmo "
"resultado. A intenção do padrão C é que ``fmod(x, y)`` seja exatamente "
"(matematicamente; com precisão infinita) igual a ``x - n*y`` para algum "
"inteiro *n* de modo que o resultado tenha o mesmo sinal que *x* e magnitude "
"menor que ``abs(y)``. O ``x % y`` do Python retorna um resultado com o sinal"
" de *y*, e pode não ser exatamente computável para argumentos de ponto "
"flutuante. Por exemplo, ``fmod(-1e-100, 1e100)`` é ``-1e-100``, mas o "
"resultado de ``-1e-100 % 1e100`` do Python é ``1e100-1e-100``, que não pode "
"ser representado exatamente como um ponto flutuante, e é arredondado para o "
"surpreendente ``1e100``. Por esta razão, a função :func:`fmod` é geralmente "
"preferida ao trabalhar com pontos flutuantes, enquanto o ``x % y`` do Python"
" é preferido ao trabalhar com inteiros."

#: ../../library/math.rst:81
msgid ""
"Return the mantissa and exponent of *x* as the pair ``(m, e)``.  *m* is a "
"float and *e* is an integer such that ``x == m * 2**e`` exactly. If *x* is "
"zero, returns ``(0.0, 0)``, otherwise ``0.5 <= abs(m) < 1``.  This is used "
"to \"pick apart\" the internal representation of a float in a portable way."
msgstr ""
"Retorna a mantissa e o expoente de *x* como o par ``(m, e)``. *m* é um ponto"
" flutuante e *e* é um inteiro tal que ``x == m * 2**e`` exatamente. Se *x* "
"for zero, retorna ``(0.0, 0)``, caso contrário, ``0.5 <= abs(m) < 1``. Isso "
"é usado para \"separar\" a representação interna de um ponto flutuante de "
"forma portátil."

#: ../../library/math.rst:89
msgid ""
"Return an accurate floating point sum of values in the iterable.  Avoids "
"loss of precision by tracking multiple intermediate partial sums::"
msgstr ""
"Retorna uma soma de valores de ponto flutuante precisa no iterável. Evita "
"perda de precisão rastreando várias somas parciais intermediárias::"

#: ../../library/math.rst:97
msgid ""
"The algorithm's accuracy depends on IEEE-754 arithmetic guarantees and the "
"typical case where the rounding mode is half-even.  On some non-Windows "
"builds, the underlying C library uses extended precision addition and may "
"occasionally double-round an intermediate sum causing it to be off in its "
"least significant bit."
msgstr ""
"A precisão do algoritmo depende das garantias aritméticas IEEE-754 e do caso"
" típico em que o modo de arredondamento é meio par. Em algumas compilações "
"que não são do Windows, a biblioteca C subjacente usa adição de precisão "
"estendida e pode ocasionalmente arredondar uma soma intermediária fazendo "
"com que ela fique fora do bit menos significativo."

#: ../../library/math.rst:103
msgid ""
"For further discussion and two alternative approaches, see the `ASPN "
"cookbook recipes for accurate floating point summation "
"<https://code.activestate.com/recipes/393090/>`_\\."
msgstr ""
"Para uma discussão mais aprofundada e duas abordagens alternativas, consulte"
" as `receitas do livro de receitas ASPN para soma de ponto flutuante preciso"
" <https://code.activestate.com/recipes/393090/>`_\\."

#: ../../library/math.rst:112
msgid "Check if the float *x* is positive or negative infinity."
msgstr ""

#: ../../library/math.rst:119
msgid ""
"Check if the float *x* is a NaN (not a number).  For more information on "
"NaNs, see the IEEE 754 standards."
msgstr ""

#: ../../library/math.rst:127
msgid ""
"Return ``x * (2**i)``.  This is essentially the inverse of function "
":func:`frexp`."
msgstr ""
"Retorna ``x * (2**i)``. Este é essencialmente o inverso da função "
":func:`frexp`."

#: ../../library/math.rst:133
msgid ""
"Return the fractional and integer parts of *x*.  Both results carry the sign"
" of *x* and are floats."
msgstr ""
"Retorna as partes fracionárias e inteiras de *x*. Ambos os resultados "
"carregam o sinal de *x* e são pontos flutuantes."

#: ../../library/math.rst:139
msgid ""
"Return the :class:`~numbers.Real` value *x* truncated to an "
":class:`~numbers.Integral` (usually a long integer).  Uses the ``__trunc__``"
" method."
msgstr ""

#: ../../library/math.rst:146
msgid ""
"Note that :func:`frexp` and :func:`modf` have a different call/return "
"pattern than their C equivalents: they take a single argument and return a "
"pair of values, rather than returning their second return value through an "
"'output parameter' (there is no such thing in Python)."
msgstr ""
"Observe que :func:`frexp` e :func:`modf` têm um padrão de chamada/retorno "
"diferente de seus equivalentes C: elas pegam um único argumento e retornam "
"um par de valores, ao invés de retornar seu segundo valor de retorno por "
"meio de um \"parâmetro de saída\" (não existe tal coisa em Python)."

#: ../../library/math.rst:151
msgid ""
"For the :func:`ceil`, :func:`floor`, and :func:`modf` functions, note that "
"*all* floating-point numbers of sufficiently large magnitude are exact "
"integers. Python floats typically carry no more than 53 bits of precision "
"(the same as the platform C double type), in which case any float *x* with "
"``abs(x) >= 2**52`` necessarily has no fractional bits."
msgstr ""
"Para as funções :func:`ceil`, :func:`floor` e :func:`modf`, observe que "
"*todos* os números de ponto flutuante de magnitude suficientemente grande "
"são inteiros exatos. Os pontos flutuantes do Python normalmente não carregam"
" mais do que 53 bits de precisão (o mesmo que o tipo duplo da plataforma C),"
" caso em que qualquer flutuante *x* com ``abs(x) >= 2**52`` necessariamente "
"não tem bits fracionários."

#: ../../library/math.rst:159
msgid "Power and logarithmic functions"
msgstr "Funções de potência e logarítmicas"

#: ../../library/math.rst:163
msgid "Return ``e**x``."
msgstr ""

#: ../../library/math.rst:168
msgid ""
"Return ``e**x - 1``.  For small floats *x*, the subtraction in ``exp(x) - "
"1`` can result in a significant loss of precision; the :func:`expm1` "
"function provides a way to compute this quantity to full precision::"
msgstr ""

#: ../../library/math.rst:184
msgid "With one argument, return the natural logarithm of *x* (to base *e*)."
msgstr "Com um argumento, retorna o logaritmo natural de *x* (para base *e*)."

#: ../../library/math.rst:186
msgid ""
"With two arguments, return the logarithm of *x* to the given *base*, "
"calculated as ``log(x)/log(base)``."
msgstr ""
"Com dois argumentos, retorna o logaritmo de *x* para a *base* fornecida, "
"calculada como ``log(x)/log(base)``."

#: ../../library/math.rst:189
msgid "*base* argument added."
msgstr ""

#: ../../library/math.rst:195
msgid ""
"Return the natural logarithm of *1+x* (base *e*). The result is calculated "
"in a way which is accurate for *x* near zero."
msgstr ""
"Retorna o logaritmo natural de *1+x* (base *e*). O resultado é calculado de "
"forma precisa para *x* próximo a zero."

#: ../../library/math.rst:203
msgid ""
"Return the base-10 logarithm of *x*.  This is usually more accurate than "
"``log(x, 10)``."
msgstr ""
"Retorna o logaritmo de base 10 de *x*. Isso geralmente é mais preciso do que"
" ``log(x, 10)``."

#: ../../library/math.rst:209
msgid ""
"Return ``x`` raised to the power ``y``.  Exceptional cases follow Annex 'F' "
"of the C99 standard as far as possible.  In particular, ``pow(1.0, x)`` and "
"``pow(x, 0.0)`` always return ``1.0``, even when ``x`` is a zero or a NaN.  "
"If both ``x`` and ``y`` are finite, ``x`` is negative, and ``y`` is not an "
"integer then ``pow(x, y)`` is undefined, and raises :exc:`ValueError`."
msgstr ""
"Retorna ``x`` elevado à potência ``y``. Os casos excepcionais seguem o Anexo"
" 'F' da norma C99, tanto quanto possível. Em particular, ``pow(1.0, x)`` e "
"``pow(x, 0.0)`` sempre retornam ``1.0``, mesmo quando ``x`` é um zero ou um "
"NaN. Se ambos ``x`` e ``y`` são finitos, ``x`` é negativo, e ``y`` não é um "
"inteiro, então ``pow(x, y)`` é indefinido e levanta :exc:`ValueError`."

#: ../../library/math.rst:216
msgid ""
"Unlike the built-in ``**`` operator, :func:`math.pow` converts both its "
"arguments to type :class:`float`.  Use ``**`` or the built-in :func:`pow` "
"function for computing exact integer powers."
msgstr ""
"Ao contrário do operador embutido ``**``, :func:`math.pow` converte ambos os"
" seus argumentos para o tipo :class:`float`. Use ``**`` ou a função embutida"
" :func:`pow` para calcular potências inteiras exatas."

#: ../../library/math.rst:220
msgid "The outcome of ``1**nan`` and ``nan**0`` was undefined."
msgstr ""

#: ../../library/math.rst:226
msgid "Return the square root of *x*."
msgstr "Retorna a raiz quadrada de *x*."

#: ../../library/math.rst:230
msgid "Trigonometric functions"
msgstr "Funções trigonométricas"

#: ../../library/math.rst:234
msgid "Return the arc cosine of *x*, in radians."
msgstr ""

#: ../../library/math.rst:239
msgid "Return the arc sine of *x*, in radians."
msgstr ""

#: ../../library/math.rst:244
msgid "Return the arc tangent of *x*, in radians."
msgstr ""

#: ../../library/math.rst:249
msgid ""
"Return ``atan(y / x)``, in radians. The result is between ``-pi`` and "
"``pi``. The vector in the plane from the origin to point ``(x, y)`` makes "
"this angle with the positive X axis. The point of :func:`atan2` is that the "
"signs of both inputs are known to it, so it can compute the correct quadrant"
" for the angle. For example, ``atan(1)`` and ``atan2(1, 1)`` are both "
"``pi/4``, but ``atan2(-1, -1)`` is ``-3*pi/4``."
msgstr ""
"Retorna ``atan(y / x)``, em radianos. O resultado está entre ``-pi`` e "
"``pi``. O vetor no plano da origem ao ponto ``(x, y)`` faz este ângulo com o"
" eixo X positivo. O ponto de :func:`atan2` é que os sinais de ambas as "
"entradas são conhecidos por ele, então ele pode calcular o quadrante correto"
" para o ângulo. Por exemplo, ``atan(1)`` e ``atan2(1, 1)`` são "
"ambos``pi/4``, mas ``atan2(-1, -1)`` é ``-3*pi/4``."

#: ../../library/math.rst:259
msgid "Return the cosine of *x* radians."
msgstr "Retorna o cosseno de *x* radianos."

#: ../../library/math.rst:264
msgid ""
"Return the Euclidean norm, ``sqrt(x*x + y*y)``. This is the length of the "
"vector from the origin to point ``(x, y)``."
msgstr ""

#: ../../library/math.rst:270
msgid "Return the sine of *x* radians."
msgstr "Retorna o seno de *x* radianos."

#: ../../library/math.rst:275
msgid "Return the tangent of *x* radians."
msgstr "Retorna o tangente de *x* radianos."

#: ../../library/math.rst:279
msgid "Angular conversion"
msgstr "Conversão angular"

#: ../../library/math.rst:283
msgid "Convert angle *x* from radians to degrees."
msgstr "Converte o ângulo *x* de radianos para graus."

#: ../../library/math.rst:288
msgid "Convert angle *x* from degrees to radians."
msgstr "Converte o ângulo *x* de graus para radianos."

#: ../../library/math.rst:292
msgid "Hyperbolic functions"
msgstr "Funções hiperbólicas"

#: ../../library/math.rst:296
msgid "Return the inverse hyperbolic cosine of *x*."
msgstr "Retorna o cosseno hiperbólico inverso de *x*."

#: ../../library/math.rst:303
msgid "Return the inverse hyperbolic sine of *x*."
msgstr "Retorna o seno hiperbólico inverso de *x*."

#: ../../library/math.rst:310
msgid "Return the inverse hyperbolic tangent of *x*."
msgstr "Retorna a tangente hiperbólica inversa de *x*."

#: ../../library/math.rst:317
msgid "Return the hyperbolic cosine of *x*."
msgstr "Retorna o cosseno hiperbólico de *x*."

#: ../../library/math.rst:322
msgid "Return the hyperbolic sine of *x*."
msgstr "Retorna o seno hiperbólico de *x*."

#: ../../library/math.rst:327
msgid "Return the hyperbolic tangent of *x*."
msgstr "Retorna a tangente hiperbólica de *x*."

#: ../../library/math.rst:331
msgid "Special functions"
msgstr "Funções especiais"

#: ../../library/math.rst:335
msgid "Return the error function at *x*."
msgstr ""

#: ../../library/math.rst:342
msgid "Return the complementary error function at *x*."
msgstr ""

#: ../../library/math.rst:349
msgid "Return the Gamma function at *x*."
msgstr ""

#: ../../library/math.rst:356
msgid ""
"Return the natural logarithm of the absolute value of the Gamma function at "
"*x*."
msgstr "Retorna o logaritmo natural do valor absoluto da função gama em *x*."

#: ../../library/math.rst:363
msgid "Constants"
msgstr "Constantes"

#: ../../library/math.rst:367
msgid "The mathematical constant π = 3.141592..., to available precision."
msgstr ""

#: ../../library/math.rst:372
msgid "The mathematical constant e = 2.718281..., to available precision."
msgstr ""

#: ../../library/math.rst:377
msgid ""
"The :mod:`math` module consists mostly of thin wrappers around the platform "
"C math library functions.  Behavior in exceptional cases follows Annex F of "
"the C99 standard where appropriate.  The current implementation will raise "
":exc:`ValueError` for invalid operations like ``sqrt(-1.0)`` or ``log(0.0)``"
" (where C99 Annex F recommends signaling invalid operation or divide-by-"
"zero), and :exc:`OverflowError` for results that overflow (for example, "
"``exp(1000.0)``).  A NaN will not be returned from any of the functions "
"above unless one or more of the input arguments was a NaN; in that case, "
"most functions will return a NaN, but (again following C99 Annex F) there "
"are some exceptions to this rule, for example ``pow(float('nan'), 0.0)`` or "
"``hypot(float('nan'), float('inf'))``."
msgstr ""
"O módulo :mod:`math` consiste principalmente em O módulo: mod: `math` "
"consiste principalmente em invólucros finos em torno das funções da "
"biblioteca matemática C da plataforma. O comportamento em casos excepcionais"
" segue o Anexo F da norma C99 quando apropriado. A implementação atual "
"levantará :exc:`ValueError` para operações inválidas como ``sqrt(-1.0)`` ou "
"``log(0.0)`` (onde C99 Anexo F recomenda sinalizar operação inválida ou "
"divisão por zero), e :exc:`OverflowError` para resultados que estouram (por "
"exemplo,``exp(1000.0)``). Um NaN não será retornado de nenhuma das funções "
"acima, a menos que um ou mais dos argumentos de entrada sejam um NaN; nesse "
"caso, a maioria das funções retornará um NaN, mas (novamente seguindo C99 "
"Anexo F) há algumas exceções a esta regra, por exemplo, ``pow(float('nan'), "
"0.0)`` ou ``hypot(float('nan'), float('inf'))``."

#: ../../library/math.rst:389
msgid ""
"Note that Python makes no effort to distinguish signaling NaNs from quiet "
"NaNs, and behavior for signaling NaNs remains unspecified. Typical behavior "
"is to treat all NaNs as though they were quiet."
msgstr ""
"Observe que o Python não faz nenhum esforço para distinguir NaNs de "
"sinalização de NaNs silenciosos, e o comportamento para NaNs de sinalização "
"permanece não especificado. O comportamento típico é tratar todos os NaNs "
"como se estivessem quietos."

#: ../../library/math.rst:393
msgid ""
"Behavior in special cases now aims to follow C99 Annex F.  In earlier "
"versions of Python the behavior in special cases was loosely specified."
msgstr ""

#: ../../library/math.rst:400
msgid "Module :mod:`cmath`"
msgstr "Modulo :mod:`cmath`"

#: ../../library/math.rst:401
msgid "Complex number versions of many of these functions."
msgstr "Versões de números complexos de muitas dessas funções."
