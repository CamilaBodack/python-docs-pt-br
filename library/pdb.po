# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
# Adorilson Bezerra <adorilson@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-04-10 22:51+0000\n"
"PO-Revision-Date: 2019-09-01 02:46+0000\n"
"Last-Translator: Adorilson Bezerra <adorilson@gmail.com>, 2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/pdb.rst:4
msgid ":mod:`pdb` --- The Python Debugger"
msgstr ":mod:`pdb` --- O Depurador do Python"

#: ../../library/pdb.rst:9
msgid "**Source code:** :source:`Lib/pdb.py`"
msgstr "**Código Fonte:** :source:`Lib/pdb.py`"

#: ../../library/pdb.rst:15
msgid ""
"The module :mod:`pdb` defines an interactive source code debugger for Python "
"programs.  It supports setting (conditional) breakpoints and single stepping "
"at the source line level, inspection of stack frames, source code listing, "
"and evaluation of arbitrary Python code in the context of any stack frame.  "
"It also supports post-mortem debugging and can be called under program "
"control."
msgstr ""
"O módulo :mod:`pdb` define um depurador de código-fonte interativo para "
"programas Python. Ele possui suporte a definição de pontos de interrupção "
"(condicionais) e passo único no nível da linha de origem, inspeção de "
"quadros de pilha, listagem de código-fonte e avaliação de código Python "
"arbitrário no contexto de qualquer quadro de pilha. Ele também tem suporte a "
"depuração *post-mortem* e pode ser chamado sob controle do programa."

#: ../../library/pdb.rst:26
msgid ""
"The debugger is extensible -- it is actually defined as the class :class:"
"`Pdb`. This is currently undocumented but easily understood by reading the "
"source.  The extension interface uses the modules :mod:`bdb` and :mod:`cmd`."
msgstr ""
"O depurador é extensível -- na verdade, ele é definido como a classe :class:"
"`Pdb`. Atualmente, isso não está documentado, mas é facilmente compreendido "
"pela leitura do código-fonte. A interface de extensão usa os módulos :mod:"
"`bdb` e :mod:`cmd`."

#: ../../library/pdb.rst:30
msgid ""
"The debugger's prompt is ``(Pdb)``. Typical usage to run a program under "
"control of the debugger is::"
msgstr ""
"O prompt do depurador é ``(Pdb)``. O uso típico para executar um programa "
"sob controle do depurador é::"

#: ../../library/pdb.rst:44
msgid ""
"Tab-completion via the :mod:`readline` module is available for commands and "
"command arguments, e.g. the current global and local names are offered as "
"arguments of the ``p`` command."
msgstr ""
"O preenchimento por tabulação através do módulo :mod:`readline` está "
"disponível para comandos e argumentos de comando, por exemplo os nomes "
"globais e locais atuais são oferecidos como argumentos do comando ``p``."

#: ../../library/pdb.rst:49
msgid ""
":file:`pdb.py` can also be invoked as a script to debug other scripts.  For "
"example::"
msgstr ""
":file:`pdb.py` também pode ser chamado como um script para depurar outros "
"scripts. Por exemplo::"

#: ../../library/pdb.rst:54
msgid ""
"When invoked as a script, pdb will automatically enter post-mortem debugging "
"if the program being debugged exits abnormally.  After post-mortem debugging "
"(or after normal exit of the program), pdb will restart the program.  "
"Automatic restarting preserves pdb's state (such as breakpoints) and in most "
"cases is more useful than quitting the debugger upon program's exit."
msgstr ""
"Quando invocado como um script, o pdb entra automaticamente na depuração "
"*post-mortem* se o programa que está sendo depurado for encerrado de forma "
"anormal. Após a depuração *post-mortem* (ou após a saída normal do "
"programa), o pdb reiniciará o programa. A reinicialização automática "
"preserva o estado do pdb (p.ex., pontos de interrupção) e, na maioria dos "
"casos, é mais útil do que encerrar o depurador na saída do programa."

#: ../../library/pdb.rst:60
msgid ""
":file:`pdb.py` now accepts a ``-c`` option that executes commands as if "
"given in a :file:`.pdbrc` file, see :ref:`debugger-commands`."
msgstr ""
":file:`pdb.py` agora aceita uma opção ``-c`` que executa comandos como se "
"fossem dados em um arquivo :file:`.pdbrc`. Veja :ref:`debugger-commands`."

#: ../../library/pdb.rst:64
msgid ""
":file:`pdb.py` now accepts a ``-m`` option that execute modules similar to "
"the way ``python3 -m`` does. As with a script, the debugger will pause "
"execution just before the first line of the module."
msgstr ""
":file:`pdb.py` agora aceita uma opção ``-m`` que executa módulos de maneira "
"semelhante à de ``python3 -m``. Como em um script, o depurador fará uma "
"pausa na execução imediatamente antes da primeira linha do módulo."

#: ../../library/pdb.rst:70
msgid ""
"The typical usage to break into the debugger from a running program is to "
"insert ::"
msgstr ""
"O uso típico para invadir o depurador a partir de um programa em execução é "
"inserir ::"

#: ../../library/pdb.rst:75
msgid ""
"at the location you want to break into the debugger.  You can then step "
"through the code following this statement, and continue running without the "
"debugger using the :pdbcmd:`continue` command."
msgstr ""
"no local em que você deseja interromper o depurador. Em seguida, você pode "
"percorrer o código após esta instrução e continuar executando sem o "
"depurador usando o comando :pdbcmd:`continue`."

#: ../../library/pdb.rst:79
msgid ""
"The built-in :func:`breakpoint()`, when called with defaults, can be used "
"instead of ``import pdb; pdb.set_trace()``."
msgstr ""
"A função embutida :func:`breakpoint()`, quando chamada com valores padrão, "
"pode ser usada em vez de ``import pdb; pdb.set_trace()``."

#: ../../library/pdb.rst:83
msgid "The typical usage to inspect a crashed program is::"
msgstr "O uso típico para inspecionar um programa com falha é::"

#: ../../library/pdb.rst:101
msgid ""
"The module defines the following functions; each enters the debugger in a "
"slightly different way:"
msgstr ""
"O módulo define as seguintes funções; cada uma entra no depurador de uma "
"maneira ligeiramente diferente:"

#: ../../library/pdb.rst:106
msgid ""
"Execute the *statement* (given as a string or a code object) under debugger "
"control.  The debugger prompt appears before any code is executed; you can "
"set breakpoints and type :pdbcmd:`continue`, or you can step through the "
"statement using :pdbcmd:`step` or :pdbcmd:`next` (all these commands are "
"explained below).  The optional *globals* and *locals* arguments specify the "
"environment in which the code is executed; by default the dictionary of the "
"module :mod:`__main__` is used.  (See the explanation of the built-in :func:"
"`exec` or :func:`eval` functions.)"
msgstr ""
"Executa a instrução *statement* (fornecida como uma string ou um objeto "
"código) sob controle do depurador. O prompt do depurador aparece antes de "
"qualquer código ser executado; você pode definir pontos de interrupção e "
"digitar :pdbcmd:`continue` ou pode percorrer a instrução usando :pdbcmd:"
"`step` ou :pdbcmd:`next` (todos esses comandos são explicados abaixo). Os "
"argumentos opcionais *globals* e *locals* especificam o ambiente em que o "
"código é executado; por padrão, o dicionário do módulo :mod:`__main__` é "
"usado. (Veja a explicação das funções embutidas :func:`exec` ou :func:"
"`eval`.)"

#: ../../library/pdb.rst:118
msgid ""
"Evaluate the *expression* (given as a string or a code object) under "
"debugger control.  When :func:`runeval` returns, it returns the value of the "
"expression.  Otherwise this function is similar to :func:`run`."
msgstr ""
"Avalia a expressão *expression* (fornecida como uma string ou um objeto "
"código) sob controle do depurador. Quando :func:`runeval` retorna, ele "
"retorna o valor da expressão. Caso contrário, esta função é semelhante a :"
"func:`run`."

#: ../../library/pdb.rst:125
msgid ""
"Call the *function* (a function or method object, not a string) with the "
"given arguments.  When :func:`runcall` returns, it returns whatever the "
"function call returned.  The debugger prompt appears as soon as the function "
"is entered."
msgstr ""
"Chama a função *function* (um objeto função ou método, não uma string) com "
"os argumentos fornecidos. Quando :func:`runcall` retorna, ele retorna "
"qualquer que seja a chamada de função retornada. O prompt do depurador "
"aparece assim que a função é inserida."

#: ../../library/pdb.rst:133
msgid ""
"Enter the debugger at the calling stack frame.  This is useful to hard-code "
"a breakpoint at a given point in a program, even if the code is not "
"otherwise being debugged (e.g. when an assertion fails).  If given, *header* "
"is printed to the console just before debugging begins."
msgstr ""
"Entra no depurador no quadro da pilha de chamada. Isso é útil para codificar "
"um ponto de interrupção em um determinado ponto de um programa, mesmo que o "
"código não esteja sendo depurado de outra forma (por exemplo, quando uma "
"asserção falha). Se fornecido, *header* é impresso no console imediatamente "
"antes do início da depuração."

#: ../../library/pdb.rst:138
msgid "The keyword-only argument *header*."
msgstr "O argumento somente-nomeado *header*."

#: ../../library/pdb.rst:144
msgid ""
"Enter post-mortem debugging of the given *traceback* object.  If no "
"*traceback* is given, it uses the one of the exception that is currently "
"being handled (an exception must be being handled if the default is to be "
"used)."
msgstr ""
"Entra na depuração *post-mortem* do objeto *traceback* fornecido. Se não for "
"fornecido um *traceback*, será usada a exceção que está sendo manipulada no "
"momento (uma exceção deve ser manipulada para que o padrão seja usado)."

#: ../../library/pdb.rst:152
msgid ""
"Enter post-mortem debugging of the traceback found in :data:`sys."
"last_traceback`."
msgstr ""
"Entra na depuração *post-mortem* do traceback encontrado em :data:`sys."
"last_traceback`."

#: ../../library/pdb.rst:156
msgid ""
"The ``run*`` functions and :func:`set_trace` are aliases for instantiating "
"the :class:`Pdb` class and calling the method of the same name.  If you want "
"to access further features, you have to do this yourself:"
msgstr ""
"As funções ``run*`` e a :func:`set_trace` são aliases, ou apelidos, para "
"instanciar a classe :class:`Pdb` e chamar o método com o mesmo nome. Se você "
"deseja acessar outros recursos, faça você mesmo:"

#: ../../library/pdb.rst:163
msgid ":class:`Pdb` is the debugger class."
msgstr ":class:`Pdb` é a classe do depurador."

#: ../../library/pdb.rst:165
msgid ""
"The *completekey*, *stdin* and *stdout* arguments are passed to the "
"underlying :class:`cmd.Cmd` class; see the description there."
msgstr ""
"Os argumentos *completekey*, *stdin* e *stdout* são passados para a classe "
"subjacente :class:`cmd.Cmd`; veja a descrição lá."

#: ../../library/pdb.rst:168
msgid ""
"The *skip* argument, if given, must be an iterable of glob-style module name "
"patterns.  The debugger will not step into frames that originate in a module "
"that matches one of these patterns. [1]_"
msgstr ""
"O argumento *skip*, se fornecido, deve ser um iterável de padrões de nome de "
"módulo no estilo glob. O depurador não entrará nos quadros que se originam "
"em um módulo que corresponde a um desses padrões. [1]_"

#: ../../library/pdb.rst:172
msgid ""
"By default, Pdb sets a handler for the SIGINT signal (which is sent when the "
"user presses :kbd:`Ctrl-C` on the console) when you give a ``continue`` "
"command. This allows you to break into the debugger again by pressing :kbd:"
"`Ctrl-C`.  If you want Pdb not to touch the SIGINT handler, set *nosigint* "
"to true."
msgstr ""
"Por padrão, o Pdb define um manipulador para o sinal SIGINT (que é enviado "
"quando o usuário pressiona :kbd:`Ctrl-C` no console) quando você dá um "
"comando ``continue``. Isso permite que você entre no depurador novamente "
"pressionando :kbd:`Ctrl-C`. Se você deseja que o Pdb não toque no "
"manipulador SIGINT, defina *nosigint* como true."

#: ../../library/pdb.rst:177
msgid ""
"The *readrc* argument defaults to true and controls whether Pdb will load ."
"pdbrc files from the filesystem."
msgstr ""
"O argumento *readrc* é padronizado como true e controla se o Pdb carregará "
"arquivos .pdbrc do sistema de arquivos."

#: ../../library/pdb.rst:180
msgid "Example call to enable tracing with *skip*::"
msgstr "Exemplo de chamada para habilitar rastreamento com *skip*::"

#: ../../library/pdb.rst:184
msgid "The *skip* argument."
msgstr "O argumento *skip*."

#: ../../library/pdb.rst:187
msgid ""
"The *nosigint* argument.  Previously, a SIGINT handler was never set by Pdb."
msgstr ""
"O argumento *nosigint*.  Anteriormente, um manipulador de SIGINT nunca era "
"definido por Pdb."

#: ../../library/pdb.rst:191
msgid "The *readrc* argument."
msgstr "O argumento *readrc*."

#: ../../library/pdb.rst:199
msgid "See the documentation for the functions explained above."
msgstr "Consulte a documentação para as funções explicadas acima."

#: ../../library/pdb.rst:205
msgid "Debugger Commands"
msgstr "Comandos de depuração"

#: ../../library/pdb.rst:207
msgid ""
"The commands recognized by the debugger are listed below.  Most commands can "
"be abbreviated to one or two letters as indicated; e.g. ``h(elp)`` means "
"that either ``h`` or ``help`` can be used to enter the help command (but not "
"``he`` or ``hel``, nor ``H`` or ``Help`` or ``HELP``).  Arguments to "
"commands must be separated by whitespace (spaces or tabs).  Optional "
"arguments are enclosed in square brackets (``[]``) in the command syntax; "
"the square brackets must not be typed.  Alternatives in the command syntax "
"are separated by a vertical bar (``|``)."
msgstr ""
"Os comandos reconhecidos pelo depurador estão listados abaixo. A maioria dos "
"comandos pode ser abreviada para uma ou duas letras, conforme indicado; por "
"exemplo, ``h(elp)`` significa que ``h`` ou ``help`` podem ser usados para "
"inserir o comando de ajuda (mas não ``he`` ou ``hel``, nem ``H`` ou ``Help`` "
"ou ``HELP``). Os argumentos para os comandos devem ser separados por espaços "
"em branco (espaços ou tabulações). Os argumentos opcionais estão entre "
"colchetes (``[]``) na sintaxe do comando; os colchetes não devem ser "
"digitados. As alternativas na sintaxe de comando são separadas por uma barra "
"vertical (``|``)."

#: ../../library/pdb.rst:216
msgid ""
"Entering a blank line repeats the last command entered.  Exception: if the "
"last command was a :pdbcmd:`list` command, the next 11 lines are listed."
msgstr ""
"Digitar uma linha em branco repete o último comando digitado. Exceção: se o "
"último comando foi um comando :pdbcmd:`list`, as próximas 11 linhas serão "
"listadas."

#: ../../library/pdb.rst:219
msgid ""
"Commands that the debugger doesn't recognize are assumed to be Python "
"statements and are executed in the context of the program being debugged.  "
"Python statements can also be prefixed with an exclamation point (``!``).  "
"This is a powerful way to inspect the program being debugged; it is even "
"possible to change a variable or call a function.  When an exception occurs "
"in such a statement, the exception name is printed but the debugger's state "
"is not changed."
msgstr ""
"Os comandos que o depurador não reconhece são presumidos como instruções "
"Python e são executados no contexto do programa que está sendo depurado. As "
"instruções Python também podem ser prefixadas com um ponto de exclamação (``!"
"``). Essa é uma maneira poderosa de inspecionar o programa que está sendo "
"depurado; é até possível alterar uma variável ou chamar uma função. Quando "
"ocorre uma exceção em uma instrução, o nome da exceção é impresso, mas o "
"estado do depurador não é alterado."

#: ../../library/pdb.rst:227
msgid ""
"The debugger supports :ref:`aliases <debugger-aliases>`.  Aliases can have "
"parameters which allows one a certain level of adaptability to the context "
"under examination."
msgstr ""
"O depurador possui suporte a :ref:`aliases <debugger-aliases>`. Os aliases "
"podem ter parâmetros que permitem um certo nível de adaptabilidade ao "
"contexto em exame."

#: ../../library/pdb.rst:231
msgid ""
"Multiple commands may be entered on a single line, separated by ``;;``.  (A "
"single ``;`` is not used as it is the separator for multiple commands in a "
"line that is passed to the Python parser.)  No intelligence is applied to "
"separating the commands; the input is split at the first ``;;`` pair, even "
"if it is in the middle of a quoted string."
msgstr ""
"Vários comandos podem ser inseridos em uma única linha, separados por ``;;"
"``. (Um único ``;`` não é usado, pois é o separador de vários comandos em "
"uma linha que é passada para o analisador sintático do Python.) Nenhuma "
"inteligência é aplicada para separar os comandos; a entrada é dividida no "
"primeiro par ``;;``, mesmo que esteja no meio de uma string entre aspas."

#: ../../library/pdb.rst:241
msgid ""
"If a file :file:`.pdbrc` exists in the user's home directory or in the "
"current directory, it is read in and executed as if it had been typed at the "
"debugger prompt.  This is particularly useful for aliases.  If both files "
"exist, the one in the home directory is read first and aliases defined there "
"can be overridden by the local file."
msgstr ""
"Se um arquivo :file:`.pdbrc` existir no diretório inicial do usuário ou no "
"diretório atual, ele será lido e executado como se tivesse sido digitado no "
"prompt do depurador. Isso é particularmente útil para aliases. Se os dois "
"arquivos existirem, aquele no diretório inicial será lido primeiro e os "
"aliases definidos poderão ser substituídos pelo arquivo local."

#: ../../library/pdb.rst:247
msgid ""
":file:`.pdbrc` can now contain commands that continue debugging, such as :"
"pdbcmd:`continue` or :pdbcmd:`next`.  Previously, these commands had no "
"effect."
msgstr ""
":file:`.pdbrc` agora pode conter comandos que continuam a depuração, como :"
"pdbcmd:`continue` ou :pdbcmd:`next`. Anteriormente, esses comandos não "
"tinham efeito."

#: ../../library/pdb.rst:255
msgid ""
"Without argument, print the list of available commands.  With a *command* as "
"argument, print help about that command.  ``help pdb`` displays the full "
"documentation (the docstring of the :mod:`pdb` module).  Since the *command* "
"argument must be an identifier, ``help exec`` must be entered to get help on "
"the ``!`` command."
msgstr ""
"Sem argumento, imprime a lista de comandos disponíveis. Com um *command* "
"como argumento, imprime ajuda sobre esse comando. ``help pdb`` exibe a "
"documentação completa (a docstring do módulo :mod:`pdb`). Como o argumento "
"*command* deve ser um identificador, ``help exec`` deve ser inserido para "
"obter ajuda sobre o comando ``!``."

#: ../../library/pdb.rst:263
msgid ""
"Print a stack trace, with the most recent frame at the bottom.  An arrow "
"indicates the current frame, which determines the context of most commands."
msgstr ""
"Exibe um stack trace (situação da pilha de execução), com o quadro mais "
"recente na parte inferior. Uma seta indica o quadro atual, que determina o "
"contexto da maioria dos comandos."

#: ../../library/pdb.rst:268
msgid ""
"Move the current frame *count* (default one) levels down in the stack trace "
"(to a newer frame)."
msgstr ""
"Move os níveis do quadro atual *count* (padrão 1) para baixo no stack trace "
"(para um quadro mais recente)."

#: ../../library/pdb.rst:273
msgid ""
"Move the current frame *count* (default one) levels up in the stack trace "
"(to an older frame)."
msgstr ""
"Move os níveis do quadro atual na *count* (padrão 1) para cima no stack "
"trace (para um quadro mais antigo)."

#: ../../library/pdb.rst:278
msgid ""
"With a *lineno* argument, set a break there in the current file.  With a "
"*function* argument, set a break at the first executable statement within "
"that function.  The line number may be prefixed with a filename and a colon, "
"to specify a breakpoint in another file (probably one that hasn't been "
"loaded yet).  The file is searched on :data:`sys.path`.  Note that each "
"breakpoint is assigned a number to which all the other breakpoint commands "
"refer."
msgstr ""
"Com um argumento *lineno*, define uma interrupção no arquivo atual. Com um "
"argumento *function*, defina uma quebra na primeira instrução executável "
"dentro dessa função. O número da linha pode ser prefixado com um nome de "
"arquivo e dois pontos, para especificar um ponto de interrupção em outro "
"arquivo (provavelmente um que ainda não foi carregado). O arquivo é "
"pesquisado em :data:`sys.path`. Observe que cada ponto de interrupção recebe "
"um número ao qual todos os outros comandos de ponto de interrupção se "
"referem."

#: ../../library/pdb.rst:285
msgid ""
"If a second argument is present, it is an expression which must evaluate to "
"true before the breakpoint is honored."
msgstr ""
"Se um segundo argumento estiver presente, é uma expressão que deve ser "
"avaliada como verdadeira antes que o ponto de interrupção seja respeitado."

#: ../../library/pdb.rst:288
msgid ""
"Without argument, list all breaks, including for each breakpoint, the number "
"of times that breakpoint has been hit, the current ignore count, and the "
"associated condition if any."
msgstr ""
"Sem argumento, lista todas as quebras, inclusive para cada ponto de "
"interrupção, o número de vezes que o ponto de interrupção foi atingido, a "
"contagem atual de ignorados e a condição associada, se houver."

#: ../../library/pdb.rst:294
msgid ""
"Temporary breakpoint, which is removed automatically when it is first hit. "
"The arguments are the same as for :pdbcmd:`break`."
msgstr ""
"Ponto de interrupção temporário, que é removido automaticamente quando é "
"atingido pela primeira vez. Os argumentos são os mesmos que para :pdbcmd:"
"`break`."

#: ../../library/pdb.rst:299
msgid ""
"With a *filename:lineno* argument, clear all the breakpoints at this line. "
"With a space separated list of breakpoint numbers, clear those breakpoints. "
"Without argument, clear all breaks (but first ask confirmation)."
msgstr ""
"Com um argumento *filename:lineno*, limpa todos os pontos de interrupção "
"nessa linha. Com uma lista separada por espaços de números de ponto de "
"interrupção, limpa esses pontos de interrupção. Sem argumento, limpa todas "
"as quebras (mas primeiro pede a confirmação)."

#: ../../library/pdb.rst:305
msgid ""
"Disable the breakpoints given as a space separated list of breakpoint "
"numbers.  Disabling a breakpoint means it cannot cause the program to stop "
"execution, but unlike clearing a breakpoint, it remains in the list of "
"breakpoints and can be (re-)enabled."
msgstr ""
"Desativa os pontos de interrupção fornecidos como uma lista separada por "
"espaços de números de pontos de interrupção. Desabilitar um ponto de "
"interrupção significa que ele não pode interromper a execução do programa, "
"mas, ao contrário de limpar um ponto de interrupção, ele permanece na lista "
"de pontos de interrupção e pode ser (re)ativado."

#: ../../library/pdb.rst:312
msgid "Enable the breakpoints specified."
msgstr "Ativa o ponto de interrupção especificado."

#: ../../library/pdb.rst:316
msgid ""
"Set the ignore count for the given breakpoint number.  If count is omitted, "
"the ignore count is set to 0.  A breakpoint becomes active when the ignore "
"count is zero.  When non-zero, the count is decremented each time the "
"breakpoint is reached and the breakpoint is not disabled and any associated "
"condition evaluates to true."
msgstr ""
"Define a contagem de ignorados para o número do ponto de interrupção "
"especificado. Se a contagem for omitida, a contagem de ignorados será "
"definida como 0. Um ponto de interrupção se torna ativo quando a contagem de "
"ignorados é zero. Quando diferente de zero, a contagem é decrementada cada "
"vez que o ponto de interrupção é atingido e o ponto de interrupção não é "
"desativado e qualquer condição associada é avaliada como verdadeira."

#: ../../library/pdb.rst:324
msgid ""
"Set a new *condition* for the breakpoint, an expression which must evaluate "
"to true before the breakpoint is honored.  If *condition* is absent, any "
"existing condition is removed; i.e., the breakpoint is made unconditional."
msgstr ""
"Define uma nova *condition* para o ponto de interrupção, uma expressão que "
"deve ser avaliada como verdadeira antes que o ponto de interrupção seja "
"respeitado. Se *condition* for omitida, qualquer condição existente será "
"removida; isto é, o ponto de interrupção é tornado incondicional."

#: ../../library/pdb.rst:330
msgid ""
"Specify a list of commands for breakpoint number *bpnumber*.  The commands "
"themselves appear on the following lines.  Type a line containing just "
"``end`` to terminate the commands. An example::"
msgstr ""
"Especifica uma lista de comandos para o número do ponto de interrupção "
"*bpnumber*. Os próprios comandos aparecem nas seguintes linhas. Digite em "
"uma linha contendo apenas ``end`` para finalizar os comandos. Um exemplo::"

#: ../../library/pdb.rst:339
msgid ""
"To remove all commands from a breakpoint, type ``commands`` and follow it "
"immediately with ``end``; that is, give no commands."
msgstr ""

#: ../../library/pdb.rst:342
msgid ""
"With no *bpnumber* argument, ``commands`` refers to the last breakpoint set."
msgstr ""

#: ../../library/pdb.rst:344
msgid ""
"You can use breakpoint commands to start your program up again.  Simply use "
"the :pdbcmd:`continue` command, or :pdbcmd:`step`, or any other command that "
"resumes execution."
msgstr ""

#: ../../library/pdb.rst:348
msgid ""
"Specifying any command resuming execution (currently :pdbcmd:`continue`, :"
"pdbcmd:`step`, :pdbcmd:`next`, :pdbcmd:`return`, :pdbcmd:`jump`, :pdbcmd:"
"`quit` and their abbreviations) terminates the command list (as if that "
"command was immediately followed by end). This is because any time you "
"resume execution (even with a simple next or step), you may encounter "
"another breakpoint—which could have its own command list, leading to "
"ambiguities about which list to execute."
msgstr ""

#: ../../library/pdb.rst:357
msgid ""
"If you use the 'silent' command in the command list, the usual message about "
"stopping at a breakpoint is not printed.  This may be desirable for "
"breakpoints that are to print a specific message and then continue.  If none "
"of the other commands print anything, you see no sign that the breakpoint "
"was reached."
msgstr ""

#: ../../library/pdb.rst:364
msgid ""
"Execute the current line, stop at the first possible occasion (either in a "
"function that is called or on the next line in the current function)."
msgstr ""

#: ../../library/pdb.rst:369
msgid ""
"Continue execution until the next line in the current function is reached or "
"it returns.  (The difference between :pdbcmd:`next` and :pdbcmd:`step` is "
"that :pdbcmd:`step` stops inside a called function, while :pdbcmd:`next` "
"executes called functions at (nearly) full speed, only stopping at the next "
"line in the current function.)"
msgstr ""

#: ../../library/pdb.rst:377
msgid ""
"Without argument, continue execution until the line with a number greater "
"than the current one is reached."
msgstr ""

#: ../../library/pdb.rst:380
msgid ""
"With a line number, continue execution until a line with a number greater or "
"equal to that is reached.  In both cases, also stop when the current frame "
"returns."
msgstr ""

#: ../../library/pdb.rst:384
msgid "Allow giving an explicit line number."
msgstr ""

#: ../../library/pdb.rst:389
msgid "Continue execution until the current function returns."
msgstr ""

#: ../../library/pdb.rst:393
msgid "Continue execution, only stop when a breakpoint is encountered."
msgstr ""

#: ../../library/pdb.rst:397
msgid ""
"Set the next line that will be executed.  Only available in the bottom-most "
"frame.  This lets you jump back and execute code again, or jump forward to "
"skip code that you don't want to run."
msgstr ""

#: ../../library/pdb.rst:401
msgid ""
"It should be noted that not all jumps are allowed -- for instance it is not "
"possible to jump into the middle of a :keyword:`for` loop or out of a :"
"keyword:`finally` clause."
msgstr ""

#: ../../library/pdb.rst:407
msgid ""
"List source code for the current file.  Without arguments, list 11 lines "
"around the current line or continue the previous listing.  With ``.`` as "
"argument, list 11 lines around the current line.  With one argument, list 11 "
"lines around at that line.  With two arguments, list the given range; if the "
"second argument is less than the first, it is interpreted as a count."
msgstr ""

#: ../../library/pdb.rst:413
msgid ""
"The current line in the current frame is indicated by ``->``.  If an "
"exception is being debugged, the line where the exception was originally "
"raised or propagated is indicated by ``>>``, if it differs from the current "
"line."
msgstr ""

#: ../../library/pdb.rst:418
msgid "The ``>>`` marker."
msgstr "O marcador ``>>``."

#: ../../library/pdb.rst:423
msgid ""
"List all source code for the current function or frame.  Interesting lines "
"are marked as for :pdbcmd:`list`."
msgstr ""

#: ../../library/pdb.rst:430
msgid "Print the argument list of the current function."
msgstr ""

#: ../../library/pdb.rst:434
msgid "Evaluate the *expression* in the current context and print its value."
msgstr ""

#: ../../library/pdb.rst:438
msgid ""
"``print()`` can also be used, but is not a debugger command --- this "
"executes the Python :func:`print` function."
msgstr ""

#: ../../library/pdb.rst:444
msgid ""
"Like the :pdbcmd:`p` command, except the value of the expression is pretty-"
"printed using the :mod:`pprint` module."
msgstr ""

#: ../../library/pdb.rst:449
msgid "Print the type of the *expression*."
msgstr ""

#: ../../library/pdb.rst:453
msgid "Try to get source code for the given object and display it."
msgstr ""

#: ../../library/pdb.rst:459
msgid ""
"Display the value of the expression if it changed, each time execution stops "
"in the current frame."
msgstr ""

#: ../../library/pdb.rst:462
msgid "Without expression, list all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:468
msgid ""
"Do not display the expression any more in the current frame.  Without "
"expression, clear all display expressions for the current frame."
msgstr ""

#: ../../library/pdb.rst:475
msgid ""
"Start an interactive interpreter (using the :mod:`code` module) whose global "
"namespace contains all the (global and local) names found in the current "
"scope."
msgstr ""

#: ../../library/pdb.rst:485
msgid ""
"Create an alias called *name* that executes *command*.  The command must "
"*not* be enclosed in quotes.  Replaceable parameters can be indicated by ``"
"%1``, ``%2``, and so on, while ``%*`` is replaced by all the parameters. If "
"no command is given, the current alias for *name* is shown. If no arguments "
"are given, all aliases are listed."
msgstr ""

#: ../../library/pdb.rst:491
msgid ""
"Aliases may be nested and can contain anything that can be legally typed at "
"the pdb prompt.  Note that internal pdb commands *can* be overridden by "
"aliases.  Such a command is then hidden until the alias is removed.  "
"Aliasing is recursively applied to the first word of the command line; all "
"other words in the line are left alone."
msgstr ""

#: ../../library/pdb.rst:497
msgid ""
"As an example, here are two useful aliases (especially when placed in the :"
"file:`.pdbrc` file)::"
msgstr ""

#: ../../library/pdb.rst:507
msgid "Delete the specified alias."
msgstr ""

#: ../../library/pdb.rst:511
msgid ""
"Execute the (one-line) *statement* in the context of the current stack "
"frame. The exclamation point can be omitted unless the first word of the "
"statement resembles a debugger command.  To set a global variable, you can "
"prefix the assignment command with a :keyword:`global` statement on the same "
"line, e.g.::"
msgstr ""

#: ../../library/pdb.rst:523
msgid ""
"Restart the debugged Python program.  If an argument is supplied, it is "
"split with :mod:`shlex` and the result is used as the new :data:`sys.argv`. "
"History, breakpoints, actions and debugger options are preserved. :pdbcmd:"
"`restart` is an alias for :pdbcmd:`run`."
msgstr ""

#: ../../library/pdb.rst:530
msgid "Quit from the debugger.  The program being executed is aborted."
msgstr ""

#: ../../library/pdb.rst:534
msgid ""
"Enter a recursive debugger that steps through the code argument (which is an "
"arbitrary expression or statement to be executed in the current environment)."
msgstr ""

#: ../../library/pdb.rst:542
msgid "Footnotes"
msgstr "Notas de rodapé"

#: ../../library/pdb.rst:543
msgid ""
"Whether a frame is considered to originate in a certain module is determined "
"by the ``__name__`` in the frame globals."
msgstr ""
