# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-01-06 02:49+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/thread.rst:2
msgid ":mod:`thread` --- Multiple threads of control"
msgstr ""

#: ../../library/thread.rst:8
msgid ""
"The :mod:`thread` module has been renamed to :mod:`_thread` in Python 3. The"
" :term:`2to3` tool will automatically adapt imports when converting your "
"sources to Python 3; however, you should consider using the high-level "
":mod:`threading` module instead."
msgstr ""

#: ../../library/thread.rst:20
msgid ""
"This module provides low-level primitives for working with multiple threads "
"(also called :dfn:`light-weight processes` or :dfn:`tasks`) --- multiple "
"threads of control sharing their global data space.  For synchronization, "
"simple locks (also called :dfn:`mutexes` or :dfn:`binary semaphores`) are "
"provided. The :mod:`threading` module provides an easier to use and higher-"
"level threading API built on top of this module."
msgstr ""
"Este módulo fornece primitivos de baixo nível para trabalhar com vários "
"tópicos (também chamados: dfn: `processos leves` ou: dfn:` tarefas`) --- "
"vários tópicos de controle compartilhando seu espaço de dados global. Para "
"sincronização, bloqueios simples (também chamados de: dfn: `mutexes` ou: "
"dfn:` semáforos binário) são fornecidos. O módulo: mod: `segmentação` "
"fornece uma API de segmentação mais fácil de usar e de nível mais alto, "
"construída sobre este módulo."

#: ../../library/thread.rst:31
msgid ""
"The module is optional.  It is supported on Windows, Linux, SGI IRIX, "
"Solaris 2.x, as well as on systems that have a POSIX thread (a.k.a. "
"\"pthread\") implementation.  For systems lacking the :mod:`thread` module, "
"the :mod:`dummy_thread` module is available. It duplicates this module's "
"interface and can be used as a drop-in replacement."
msgstr ""

#: ../../library/thread.rst:37
msgid "It defines the following constant and functions:"
msgstr ""

#: ../../library/thread.rst:42
msgid "Raised on thread-specific errors."
msgstr "Define as seguintes constantes e funções:"

#: ../../library/thread.rst:47
msgid "This is the type of lock objects."
msgstr "Este é o tipo de objetos de bloqueio."

#: ../../library/thread.rst:52
msgid ""
"Start a new thread and return its identifier.  The thread executes the "
"function *function* with the argument list *args* (which must be a tuple).  "
"The optional *kwargs* argument specifies a dictionary of keyword arguments. "
"When the function returns, the thread silently exits.  When the function "
"terminates with an unhandled exception, a stack trace is printed and then "
"the thread exits (but other threads continue to run)."
msgstr ""
"Inicie um novo encadeamento e retorne seu identificador. O encadeamento "
"executa a função * function * com a lista de argumentos * args * (que deve "
"ser uma tupla). O argumento opcional * kwargs * especifica um dicionário de "
"argumentos de palavras-chave. Quando a função retorna, o segmento sai "
"silenciosamente. Quando a função termina com uma exceção não tratada, um "
"rastreamento de pilha é impresso e, em seguida, o segmento sai (mas outros "
"segmentos continuam a ser executados)."

#: ../../library/thread.rst:62
msgid ""
"Raise a :exc:`KeyboardInterrupt` exception in the main thread.  A subthread "
"can use this function to interrupt the main thread."
msgstr ""

#: ../../library/thread.rst:70
msgid ""
"Raise the :exc:`SystemExit` exception.  When not caught, this will cause the"
" thread to exit silently."
msgstr ""
"Gera a exceção:exc:`SystemExit`.  Quando não for detectada, o thread sairá "
"silenciosamente."

#: ../../library/thread.rst:84
msgid ""
"Return a new lock object.  Methods of locks are described below.  The lock "
"is initially unlocked."
msgstr ""
"Retorna um novo objeto de bloqueio. Métodos de bloqueio são descritos "
"abaixo. O bloqueio é desativado inicialmente."

#: ../../library/thread.rst:90
msgid ""
"Return the 'thread identifier' of the current thread.  This is a nonzero "
"integer.  Its value has no direct meaning; it is intended as a magic cookie "
"to be used e.g. to index a dictionary of thread-specific data.  Thread "
"identifiers may be recycled when a thread exits and another thread is "
"created."
msgstr ""
"Retorna o 'identificador de thread' do thread atual. Este é um número "
"inteiro diferente de zero. Seu valor não tem significado direto; pretende-se"
" que seja um cookie mágico para ser usado, por exemplo, para indexar um "
"dicionário de dados específicos do thread. identificadores de thread podem "
"ser reciclados quando um thread sai e outro é criado."

#: ../../library/thread.rst:98
msgid ""
"Return the thread stack size used when creating new threads.  The optional "
"*size* argument specifies the stack size to be used for subsequently created"
" threads, and must be 0 (use platform or configured default) or a positive "
"integer value of at least 32,768 (32kB). If *size* is not specified, 0 is "
"used. If changing the thread stack size is unsupported, the :exc:`error` "
"exception is raised.  If the specified stack size is invalid, a "
":exc:`ValueError` is raised and the stack size is unmodified.  32kB is "
"currently the minimum supported stack size value to guarantee sufficient "
"stack space for the interpreter itself.  Note that some platforms may have "
"particular restrictions on values for the stack size, such as requiring a "
"minimum stack size > 32kB or requiring allocation in multiples of the system"
" memory page size - platform documentation should be referred to for more "
"information (4kB pages are common; using multiples of 4096 for the stack "
"size is the suggested approach in the absence of more specific information)."
" Availability: Windows, systems with POSIX threads."
msgstr ""

#: ../../library/thread.rst:117
msgid "Lock objects have the following methods:"
msgstr "Os objetos de bloqueio têm os seguintes métodos:"

#: ../../library/thread.rst:122
msgid ""
"Without the optional argument, this method acquires the lock "
"unconditionally, if necessary waiting until it is released by another thread"
" (only one thread at a time can acquire a lock --- that's their reason for "
"existence).  If the integer *waitflag* argument is present, the action "
"depends on its value: if it is zero, the lock is only acquired if it can be "
"acquired immediately without waiting, while if it is nonzero, the lock is "
"acquired unconditionally as before.  The return value is ``True`` if the "
"lock is acquired successfully, ``False`` if not."
msgstr ""

#: ../../library/thread.rst:133
msgid ""
"Releases the lock.  The lock must have been acquired earlier, but not "
"necessarily by the same thread."
msgstr ""
"Libera o bloqueio. O bloqueio deve ter sido adquirido anteriormente, mas não"
" necessariamente pela mesma thread."

#: ../../library/thread.rst:139
msgid ""
"Return the status of the lock: ``True`` if it has been acquired by some "
"thread, ``False`` if not."
msgstr ""
"Retorna o status do bloqueio: ``True`` se tiver sido adquirido por alguma "
"thread, ``False`` se não for o caso."

#: ../../library/thread.rst:142
msgid ""
"In addition to these methods, lock objects can also be used via the "
":keyword:`with` statement, e.g.::"
msgstr ""
"Além desses métodos, os objetos de bloqueio também podem ser usados através "
"da instrução :keyword:`with`, por exemplo::"

#: ../../library/thread.rst:152
msgid "**Caveats:**"
msgstr "**Ressalvas:**"

#: ../../library/thread.rst:156
msgid ""
"Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt` "
"exception will be received by an arbitrary thread.  (When the :mod:`signal` "
"module is available, interrupts always go to the main thread.)"
msgstr ""
"Threads interagem estranhamente com interrupções: a exceção "
":exc:`KeyboardInterrupt` será recebida por uma thread arbitrário. (Quando o "
"módulo :mod:`signal` está disponível, as interrupções sempre vão para a "
"thread principal.)"

#: ../../library/thread.rst:160
msgid ""
"Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is "
"equivalent to calling :func:`thread.exit`."
msgstr ""

#: ../../library/thread.rst:163
msgid ""
"It is not possible to interrupt the :meth:`acquire` method on a lock --- the"
" :exc:`KeyboardInterrupt` exception will happen after the lock has been "
"acquired."
msgstr ""
"Não é possível interromper o método :meth:`acquire` em um bloqueio --- a "
"exceção :exc:`KeyboardInterrupt` ocorrerá após o bloqueio ter sido "
"adquirido."

#: ../../library/thread.rst:168
msgid ""
"When the main thread exits, it is system defined whether the other threads "
"survive.  On SGI IRIX using the native thread implementation, they survive."
"  On most other systems, they are killed without executing :keyword:`try` "
"... :keyword:`finally` clauses or executing object destructors."
msgstr ""

#: ../../library/thread.rst:173
msgid ""
"When the main thread exits, it does not do any of its usual cleanup (except "
"that :keyword:`try` ... :keyword:`finally` clauses are honored), and the "
"standard I/O files are not flushed."
msgstr ""
"Quando a thread principal é encerrada, ela não realiza nenhuma limpeza usual"
" (exceto que as cláusulas :keyword:`try` ... :keyword:`finally` são "
"honradas) e os arquivos de E/S padrão não são liberados."
