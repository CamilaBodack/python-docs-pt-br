# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-12-08 13:34+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../library/simplexmlrpcserver.rst:2
msgid ":mod:`SimpleXMLRPCServer` --- Basic XML-RPC server"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:10
msgid ""
"The :mod:`SimpleXMLRPCServer` module has been merged into :mod:`xmlrpc."
"server` in Python 3.  The :term:`2to3` tool will automatically adapt imports "
"when converting your sources to Python 3."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:17
msgid "**Source code:** :source:`Lib/SimpleXMLRPCServer.py`"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:21
msgid ""
"The :mod:`SimpleXMLRPCServer` module provides a basic server framework for "
"XML-RPC servers written in Python.  Servers can either be free standing, "
"using :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer`, or embedded in a CGI "
"environment, using :class:`CGIXMLRPCRequestHandler`."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:29
msgid ""
"Create a new server instance.  This class provides methods for registration "
"of functions that can be called by the XML-RPC protocol.  The "
"*requestHandler* parameter should be a factory for request handler "
"instances; it defaults to :class:`SimpleXMLRPCRequestHandler`.  The *addr* "
"and *requestHandler* parameters are passed to the :class:`SocketServer."
"TCPServer` constructor.  If *logRequests* is true (the default), requests "
"will be logged; setting this parameter to false will turn off logging.   The "
"*allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpclib` "
"and control the XML-RPC responses that will be returned from the server. The "
"*bind_and_activate* parameter controls whether :meth:`server_bind` and :meth:"
"`server_activate` are called immediately by the constructor; it defaults to "
"true. Setting it to false allows code to manipulate the "
"*allow_reuse_address* class variable before the address is bound."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:42
#: ../../library/simplexmlrpcserver.rst:57
msgid "The *allow_none* and *encoding* parameters were added."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:45
msgid "The *bind_and_activate* parameter was added."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:51
msgid ""
"Create a new instance to handle XML-RPC requests in a CGI environment.  The "
"*allow_none* and *encoding* parameters are passed on to  :mod:`xmlrpclib` "
"and control the XML-RPC responses that will be returned  from the server."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:63
msgid ""
"Create a new request handler instance.  This request handler supports "
"``POST`` requests and modifies logging so that the *logRequests* parameter "
"to the :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` constructor parameter "
"is honored."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:71
msgid "SimpleXMLRPCServer Objects"
msgstr "Objetos de SimpleXMLRPCServer"

#: ../../library/simplexmlrpcserver.rst:73
msgid ""
"The :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` class is based on :class:"
"`SocketServer.TCPServer` and provides a means of creating simple, stand "
"alone XML-RPC servers."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:80
msgid ""
"Register a function that can respond to XML-RPC requests.  If *name* is "
"given, it will be the method name associated with *function*, otherwise "
"``function.__name__`` will be used.  *name* can be either a normal or "
"Unicode string, and may contain characters not legal in Python identifiers, "
"including the period character."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:89
msgid ""
"Register an object which is used to expose method names which have not been "
"registered using :meth:`register_function`.  If *instance* contains a :meth:"
"`_dispatch` method, it is called with the requested method name and the "
"parameters from the request.  Its API is ``def _dispatch(self, method, "
"params)`` (note that *params* does not represent a variable argument list).  "
"If it calls an underlying function to perform its task, that function is "
"called as ``func(*params)``, expanding the parameter list. The return value "
"from :meth:`_dispatch` is returned to the client as the result.  If "
"*instance* does not have a :meth:`_dispatch` method, it is searched for an "
"attribute matching the name of the requested method."
msgstr ""
"Registra um objeto que é usado para expor nomes de métodos que não foram "
"registrados usando :meth:`register_function`. Se *instance* contiver um "
"método :meth:`_dispatch`, ele será chamado com o nome do método solicitado e "
"os parâmetros da solicitação. Sua API é ``def _dispatch(self, method, "
"params)`` (observe que *params* não representa uma lista de argumentos "
"variáveis). Se ele chama uma função subjacente para executar sua tarefa, "
"essa função é chamada como ``func(*params)``, expandindo a lista de "
"parâmetros. O valor de retorno de :meth:`_dispatch` é retornado ao cliente "
"como resultado. Se *instance* não possui o método :meth:`_dispatch`, é "
"procurado por um atributo correspondente ao nome do método solicitado."

#: ../../library/simplexmlrpcserver.rst:100
msgid ""
"If the optional *allow_dotted_names* argument is true and the instance does "
"not have a :meth:`_dispatch` method, then if the requested method name "
"contains periods, each component of the method name is searched for "
"individually, with the effect that a simple hierarchical search is "
"performed.  The value found from this search is then called with the "
"parameters from the request, and the return value is passed back to the "
"client."
msgstr ""
"Se o argumento opcional *allow_dotted_names* for true e a instância não "
"tiver o método :meth:`_dispatch`, se o nome do método solicitado contiver "
"pontos, cada componente do nome do método será pesquisado individualmente, "
"com o efeito de que um simples pesquisa hierárquica é realizada. O valor "
"encontrado nessa pesquisa é chamado com os parâmetros da solicitação e o "
"valor retornado é passado de volta ao cliente."

#: ../../library/simplexmlrpcserver.rst:109
msgid ""
"Enabling the *allow_dotted_names* option allows intruders to access your "
"module's global variables and may allow intruders to execute arbitrary code "
"on your machine.  Only use this option on a secure, closed network."
msgstr ""
"A ativação da opção *allow_dotted_names* permite que os invasores acessem as "
"variáveis globais do seu módulo e podem permitir que os invasores executem "
"códigos arbitrários em sua máquina. Use esta opção apenas em uma rede "
"fechada e segura."

#: ../../library/simplexmlrpcserver.rst:113
msgid ""
"2.4.1 *allow_dotted_names* was added to plug a security hole; prior versions "
"are insecure."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:120
msgid ""
"Registers the XML-RPC introspection functions ``system.listMethods``, "
"``system.methodHelp`` and ``system.methodSignature``."
msgstr ""
"Registradores de funções de introspecção XML-RPC ``system.listMethods``, "
"``system.methodHelp`` e ``system.methodSignature``."

#: ../../library/simplexmlrpcserver.rst:128
msgid "Registers the XML-RPC multicall function system.multicall."
msgstr "Registra a função de multichamada XML-RPC system.multicall."

#: ../../library/simplexmlrpcserver.rst:133
msgid ""
"An attribute value that must be a tuple listing valid path portions of the "
"URL for receiving XML-RPC requests.  Requests posted to other paths will "
"result in a 404 \"no such page\" HTTP error.  If this tuple is empty, all "
"paths will be considered valid. The default value is ``('/', '/RPC2')``."
msgstr ""
"Um valor de atributo que deve ser uma tupla listando partes do caminho "
"válidas da URL para receber solicitações XML-RPC. Solicitações postadas em "
"outros caminhos resultarão em um erro HTTP 404 \"página inexistente\". Se "
"esta tupla estiver vazia, todos os caminhos serão considerados válidos. O "
"valor padrão é ``('/', '/RPC2')``."

#: ../../library/simplexmlrpcserver.rst:142
msgid ""
"If this attribute is not ``None``, responses larger than this value will be "
"encoded using the *gzip* transfer encoding, if permitted by the client.  The "
"default is ``1400`` which corresponds roughly to a single TCP packet."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:152
msgid "SimpleXMLRPCServer Example"
msgstr "Exemplo de SimpleXMLRPCServer"

#: ../../library/simplexmlrpcserver.rst:153
msgid "Server code::"
msgstr "Código do servidor::"

#: ../../library/simplexmlrpcserver.rst:187
msgid ""
"The following client code will call the methods made available by the "
"preceding server::"
msgstr ""
"O código do cliente a seguir chamará os métodos disponibilizados pelo "
"servidor anterior::"

#: ../../library/simplexmlrpcserver.rst:200
msgid ""
"The following :class:`~SimpleXMLRPCServer.SimpleXMLRPCServer` example is "
"included in the module `Lib/SimpleXMLRPCServer.py`::"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:209
msgid "This demo server can be run from the command line as::"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:213
msgid ""
"Example client code which talks to the above server is included with `Lib/"
"xmlrpclib.py`::"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:228
msgid "And the client can be invoked directly using the following command::"
msgstr ""

#: ../../library/simplexmlrpcserver.rst:234
msgid "CGIXMLRPCRequestHandler"
msgstr "CGIXMLRPCRequestHandler"

#: ../../library/simplexmlrpcserver.rst:236
msgid ""
"The :class:`CGIXMLRPCRequestHandler` class can be used to  handle XML-RPC "
"requests sent to Python CGI scripts."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:242
msgid ""
"Register a function that can respond to XML-RPC requests. If  *name* is "
"given, it will be the method name associated with  function, otherwise "
"*function.__name__* will be used. *name* can be either a normal or Unicode "
"string, and may contain  characters not legal in Python identifiers, "
"including the period character."
msgstr ""

#: ../../library/simplexmlrpcserver.rst:251
msgid ""
"Register an object which is used to expose method names  which have not been "
"registered using :meth:`register_function`. If  instance contains a :meth:"
"`_dispatch` method, it is called with the  requested method name and the "
"parameters from the  request; the return value is returned to the client as "
"the result. If instance does not have a :meth:`_dispatch` method, it is "
"searched for an attribute matching the name of the requested method; if  the "
"requested method name contains periods, each  component of the method name "
"is searched for individually,  with the effect that a simple hierarchical "
"search is performed. The value found from this search is then called with "
"the  parameters from the request, and the return value is passed  back to "
"the client."
msgstr ""
"Registra um objeto que é usado para expor nomes de métodos que não foram "
"registrados usando :meth:`register_function`. Se a instância contiver um "
"método :meth:`_dispatch`, ela será chamada com o nome do método solicitado e "
"os parâmetros da solicitação; o valor retornado é retornado ao cliente como "
"resultado. Se a instância não tiver um método :meth:`_dispatch`, será "
"procurado um atributo correspondente ao nome do método solicitado; se o nome "
"do método solicitado contiver pontos, cada componente do nome do método será "
"pesquisado individualmente, com o efeito de que uma pesquisa hierárquica "
"simples é executada. O valor encontrado nessa pesquisa é chamado com os "
"parâmetros da solicitação e o valor retornado é passado de volta ao cliente."

#: ../../library/simplexmlrpcserver.rst:265
msgid ""
"Register the XML-RPC introspection functions  ``system.listMethods``, "
"``system.methodHelp`` and  ``system.methodSignature``."
msgstr ""
"Registra as funções de introspecção XML-RPC ``system.listMethods``, ``system."
"methodHelp`` e ``system.methodSignature``."

#: ../../library/simplexmlrpcserver.rst:271
msgid "Register the XML-RPC multicall function ``system.multicall``."
msgstr "Registra a função de multichamada XML-RPC ``system.multicall``."

#: ../../library/simplexmlrpcserver.rst:276
msgid ""
"Handle an XML-RPC request. If *request_text* is given, it should be the POST "
"data provided by the HTTP server,  otherwise the contents of stdin will be "
"used."
msgstr ""
"Manipula uma solicitação XML-RPC. Se *request_text* for fornecido, devem ser "
"os dados POST fornecidos pelo servidor HTTP, caso contrário, o conteúdo do "
"stdin será usado."

#: ../../library/simplexmlrpcserver.rst:279
msgid "Example::"
msgstr "Exemplo::"
