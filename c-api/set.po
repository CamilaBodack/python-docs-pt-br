# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-12-18 12:20+0000\n"
"Last-Translator: Lucas Sanches <sanches.lz@hotmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/set.rst:6
msgid "Set Objects"
msgstr "Objeto Set"

#: ../../c-api/set.rst:17
msgid ""
"This section details the public API for :class:`set` and :class:`frozenset` "
"objects.  Any functionality not listed below is best accessed using the "
"either the abstract object protocol (including :c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, and :c:func:`PyObject_GetIter`) or the abstract number "
"protocol (including :c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:"
"func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :"
"c:func:`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr`, and :c:func:"
"`PyNumber_InPlaceXor`)."
msgstr ""
"Esta seção detalha a API pública para os objetos :class:`set` e :class:"
"`frozenset`. Qualquer funcionalidade não listada abaixo é melhor acessada "
"usando o protocolo de objeto abstrato (incluindo :c:func:"
"`PyObject_CallMethod`, :c:func:`PyObject_RichCompareBool`, :c:func:"
"`PyObject_Hash`, :c:func:`PyObject_Repr`, :c:func:`PyObject_IsTrue`, :c:func:"
"`PyObject_Print`, and :c:func:`PyObject_GetIter`) ou o protocolo abstrato de "
"número (incluindo :c:func:`PyNumber_And`, :c:func:`PyNumber_Subtract`, :c:"
"func:`PyNumber_Or`, :c:func:`PyNumber_Xor`, :c:func:`PyNumber_InPlaceAnd`, :"
"c:func:`PyNumber_InPlaceSubtract`, :c:func:`PyNumber_InPlaceOr` e :c:func:"
"`PyNumber_InPlaceXor`)."

#: ../../c-api/set.rst:31
msgid ""
"This subtype of :c:type:`PyObject` is used to hold the internal data for "
"both :class:`set` and :class:`frozenset` objects.  It is like a :c:type:"
"`PyDictObject` in that it is a fixed size for small sets (much like tuple "
"storage) and will point to a separate, variable sized block of memory for "
"medium and large sized sets (much like list storage). None of the fields of "
"this structure should be considered public and are subject to change.  All "
"access should be done through the documented API rather than by manipulating "
"the values in the structure."
msgstr ""
"Este subtipo de :c:type:`PyObject` é usado para manter os dados internos "
"para ambos os objetos :class:`set` e :class:`frozenset`. É como um :c:type:"
"`PyDictObject` em que tem um tamanho fixo para conjuntos pequenos (muito "
"parecido com o armazenamento de tupla) e apontará para um bloco de memória "
"de tamanho variável separado para conjuntos de tamanho médio e grande (muito "
"parecido com lista armazenamento). Nenhum dos campos desta estrutura deve "
"ser considerado público e está sujeito a alterações. Todo o acesso deve ser "
"feito por meio da API documentada, em vez de manipular os valores na "
"estrutura."

#: ../../c-api/set.rst:42
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`set` type."
msgstr ""
"Essa é uma instância de :c:type:`PyTypeObject` representando a classe Python "
"do tipo `set`"

#: ../../c-api/set.rst:48
msgid ""
"This is an instance of :c:type:`PyTypeObject` representing the Python :class:"
"`frozenset` type."
msgstr ""
"Esta é uma instância de :c:type:`PyTypeObject` representando o tipo Python :"
"class:`frozenset`."

#: ../../c-api/set.rst:51
msgid ""
"The following type check macros work on pointers to any Python object. "
"Likewise, the constructor functions work with any iterable Python object."
msgstr ""
"As macros de verificação de tipo a seguir funcionam em ponteiros para "
"qualquer objeto Python. Da mesma forma, as funções construtoras funcionam "
"com qualquer objeto Python iterável."

#: ../../c-api/set.rst:57
msgid ""
"Return true if *p* is a :class:`set` object or an instance of a subtype."
msgstr ""
"Retorna verdadeiro se *p* for um objeto :class:`set` ou uma instância de um "
"subtipo."

#: ../../c-api/set.rst:63
msgid ""
"Return true if *p* is a :class:`frozenset` object or an instance of a "
"subtype."
msgstr ""
"Retorna verdadeiro se *p* for um objeto :class:`frozenset` ou uma instância "
"de um subtipo."

#: ../../c-api/set.rst:70
msgid ""
"Return true if *p* is a :class:`set` object, a :class:`frozenset` object, or "
"an instance of a subtype."
msgstr ""
"Retorna verdadeiro se *p* for um objeto :class:`set`, um objeto :class:"
"`frozenset` ou uma instância de um subtipo."

#: ../../c-api/set.rst:76
msgid ""
"Return true if *p* is a :class:`set` object or a :class:`frozenset` object "
"but not an instance of a subtype."
msgstr ""
"Retorna verdadeiro se *p* for um objeto :class:`set` ou um objeto :class:"
"`frozenset`, mas não uma instância de um subtipo."

#: ../../c-api/set.rst:82
msgid ""
"Return true if *p* is a :class:`frozenset` object but not an instance of a "
"subtype."
msgstr ""
"Retorna verdadeiro se *p* for um objeto :class:`frozenset`, mas não uma "
"instância de um subtipo."

#: ../../c-api/set.rst:88
msgid ""
"Return a new :class:`set` containing objects returned by the *iterable*.  "
"The *iterable* may be *NULL* to create a new empty set.  Return the new set "
"on success or *NULL* on failure.  Raise :exc:`TypeError` if *iterable* is "
"not actually iterable.  The constructor is also useful for copying a set "
"(``c=set(s)``)."
msgstr ""

#: ../../c-api/set.rst:97
msgid ""
"Return a new :class:`frozenset` containing objects returned by the "
"*iterable*. The *iterable* may be *NULL* to create a new empty frozenset.  "
"Return the new set on success or *NULL* on failure.  Raise :exc:`TypeError` "
"if *iterable* is not actually iterable."
msgstr ""

#: ../../c-api/set.rst:102
msgid ""
"Now guaranteed to return a brand-new :class:`frozenset`.  Formerly, "
"frozensets of zero-length were a singleton.  This got in the way of building-"
"up new frozensets with :meth:`PySet_Add`."
msgstr ""

#: ../../c-api/set.rst:107
msgid ""
"The following functions and macros are available for instances of :class:"
"`set` or :class:`frozenset` or instances of their subtypes."
msgstr ""
"As seguintes funções e macros estão disponíveis para instâncias de :class:"
"`set` ou :class:`frozenset` ou instâncias de seus subtipos."

#: ../../c-api/set.rst:115
msgid ""
"Return the length of a :class:`set` or :class:`frozenset` object. Equivalent "
"to ``len(anyset)``.  Raises a :exc:`PyExc_SystemError` if *anyset* is not a :"
"class:`set`, :class:`frozenset`, or an instance of a subtype."
msgstr ""
"Retorna o comprimento de um objeto :class:`set` ou :class:`frozenset`. "
"Equivalente a ``len(anyset)``. Levanta um :exc:`PyExc_SystemError` se "
"*anyset* não for um :class:`set`, :class:`frozenset`, ou uma instância de um "
"subtipo."

#: ../../c-api/set.rst:119
msgid ""
"This function returned an :c:type:`int`. This might require changes in your "
"code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/set.rst:126
msgid "Macro form of :c:func:`PySet_Size` without error checking."
msgstr "Forma macro de :c:func:`PySet_Size` sem verificação de erros."

#: ../../c-api/set.rst:131
msgid ""
"Return ``1`` if found, ``0`` if not found, and ``-1`` if an error is "
"encountered.  Unlike the Python :meth:`__contains__` method, this function "
"does not automatically convert unhashable sets into temporary frozensets.  "
"Raise a :exc:`TypeError` if the *key* is unhashable. Raise :exc:"
"`PyExc_SystemError` if *anyset* is not a :class:`set`, :class:`frozenset`, "
"or an instance of a subtype."
msgstr ""
"Retorna ``1`` se encontrado, ``0`` se não encontrado, e ``-1`` se um erro é "
"encontrado. Ao contrário do método Python :meth:`__contains__`, esta função "
"não converte automaticamente conjuntos não hasheáveis em frozensets "
"temporários. Levanta um :exc:`TypeError` se a *key* não for hasheável. "
"Levanta :exc:`PyExc_SystemError` se *anyset* não é um :class:`set`, :class:"
"`frozenset`, ou uma instância de um subtipo."

#: ../../c-api/set.rst:140
msgid ""
"Add *key* to a :class:`set` instance.  Does not apply to :class:`frozenset` "
"instances.  Return ``0`` on success or ``-1`` on failure. Raise a :exc:"
"`TypeError` if the *key* is unhashable. Raise a :exc:`MemoryError` if there "
"is no room to grow. Raise a :exc:`SystemError` if *set* is not an instance "
"of :class:`set` or its subtype."
msgstr ""

#: ../../c-api/set.rst:146
msgid ""
"Now works with instances of :class:`frozenset` or its subtypes. Like :c:func:"
"`PyTuple_SetItem` in that it can be used to fill-in the values of brand new "
"frozensets before they are exposed to other code."
msgstr ""

#: ../../c-api/set.rst:151
msgid ""
"The following functions are available for instances of :class:`set` or its "
"subtypes but not for instances of :class:`frozenset` or its subtypes."
msgstr ""
"As seguintes funções estão disponíveis para instâncias de :class:`set` ou "
"seus subtipos, mas não para instâncias de :class:`frozenset` ou seus "
"subtipos."

#: ../../c-api/set.rst:157
msgid ""
"Return ``1`` if found and removed, ``0`` if not found (no action taken), and "
"``-1`` if an error is encountered.  Does not raise :exc:`KeyError` for "
"missing keys.  Raise a :exc:`TypeError` if the *key* is unhashable.  Unlike "
"the Python :meth:`~set.discard` method, this function does not automatically "
"convert unhashable sets into temporary frozensets. Raise :exc:"
"`PyExc_SystemError` if *set* is not an instance of :class:`set` or its "
"subtype."
msgstr ""
"Retorna ``1`` se encontrado e removido, ``0`` se não encontrado (nenhuma "
"ação realizada) e ``-1`` se um erro for encontrado. Não levanta :exc:"
"`KeyError` para chaves ausentes. Levanta uma :exc:`TypeError` se a *key* não "
"for hasheável. Ao contrário do método Python :meth:`~set.discard`, esta "
"função não converte automaticamente conjuntos não hasheáveis em frozensets "
"temporários. Levanta :exc:`PyExc_SystemError` se *set* não é uma instância "
"de :class:`set` ou seu subtipo."

#: ../../c-api/set.rst:167
msgid ""
"Return a new reference to an arbitrary object in the *set*, and removes the "
"object from the *set*.  Return *NULL* on failure.  Raise :exc:`KeyError` if "
"the set is empty. Raise a :exc:`SystemError` if *set* is not an instance of :"
"class:`set` or its subtype."
msgstr ""

#: ../../c-api/set.rst:175
msgid "Empty an existing set of all elements."
msgstr "Limpa todos os elementos de um set existente"
