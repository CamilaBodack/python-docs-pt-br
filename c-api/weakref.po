# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/weakref.rst:6
msgid "Weak Reference Objects"
msgstr "Objetos de Referência Fraca"

#: ../../c-api/weakref.rst:8
msgid ""
"Python supports *weak references* as first-class objects.  There are two "
"specific object types which directly implement weak references.  The first "
"is a simple reference object, and the second acts as a proxy for the "
"original object as much as it can."
msgstr ""
"Python suporta * referências fracas * como objetos de primeira classe. "
"Existem dois tipos de objetos específicos que implementam diretamente "
"referências fracas. O primeiro é um objeto de referência simples, e o "
"segundo atua como um proxy para o objeto original tanto quanto ele pode."

#: ../../c-api/weakref.rst:16
msgid "Return true if *ob* is either a reference or proxy object."
msgstr "Retornar verdadeiro se * ob * for um objeto de referência ou proxy."

#: ../../c-api/weakref.rst:23
msgid "Return true if *ob* is a reference object."
msgstr "Retornar verdadeiro se * ob * for um objeto de referência."

#: ../../c-api/weakref.rst:30
msgid "Return true if *ob* is a proxy object."
msgstr "Retornar verdadeiro se * ob * for um objeto proxy."

#: ../../c-api/weakref.rst:37
msgid ""
"Return a weak reference object for the object *ob*.  This will always return "
"a new reference, but is not guaranteed to create a new object; an existing "
"reference object may be returned.  The second parameter, *callback*, can be "
"a callable object that receives notification when *ob* is garbage collected; "
"it should accept a single parameter, which will be the weak reference object "
"itself. *callback* may also be ``None`` or *NULL*.  If *ob* is not a weakly-"
"referencable object, or if *callback* is not callable, ``None``, or *NULL*, "
"this will return *NULL* and raise :exc:`TypeError`."
msgstr ""
"Retornar um objeto de referência fraco para o objeto * ob *. Isso sempre "
"retornará uma nova referência, mas não é garantido para criar um novo "
"objeto; Um objeto de referência existente pode ser retornado. O segundo "
"parâmetro, * callback *, pode ser um objeto chamável que recebe notificação "
"quando * ob * é lixo coletado; Ele deve aceitar um único parâmetro, que será "
"o objeto de referência fraco propriamente dito. * Callback * também pode ser "
"`` None`` ou * NULL *. Se * ob * não é um objeto fracamente referenciável, "
"ou se * callback * não for chamado, `` None``, ou * NULL *, isso retornará * "
"NULL * e levará: exc: `TypeError`."

#: ../../c-api/weakref.rst:51
msgid ""
"Return a weak reference proxy object for the object *ob*.  This will always "
"return a new reference, but is not guaranteed to create a new object; an "
"existing proxy object may be returned.  The second parameter, *callback*, "
"can be a callable object that receives notification when *ob* is garbage "
"collected; it should accept a single parameter, which will be the weak "
"reference object itself. *callback* may also be ``None`` or *NULL*.  If *ob* "
"is not a weakly-referencable object, or if *callback* is not callable, "
"``None``, or *NULL*, this will return *NULL* and raise :exc:`TypeError`."
msgstr ""
"Devolva um objeto proxy de referência fraco para o objeto * ob *. Isso "
"sempre retornará uma nova referência, mas não é garantido para criar um novo "
"objeto; Um objeto proxy existente pode ser retornado. O segundo parâmetro, * "
"callback *, pode ser um objeto chamável que recebe notificação quando * ob * "
"é lixo coletado; Ele deve aceitar um único parâmetro, que será o objeto de "
"referência fraco propriamente dito. * Callback * também pode ser `` None`` "
"ou * NULL *. Se * ob * não é um objeto fracamente referenciável, ou se * "
"callback * não for chamado, `` None``, ou * NULL *, isso retornará * NULL * "
"e levará: exc: `TypeError`."

#: ../../c-api/weakref.rst:65
msgid ""
"Return the referenced object from a weak reference, *ref*.  If the referent "
"is no longer live, returns :const:`Py_None`."
msgstr ""
"Retornar o objeto referenciado de uma referência fraca, * ref *. Se o "
"referente não estiver mais ao vivo, retorna: const: `Py_None`."

#: ../../c-api/weakref.rst:72
msgid ""
"This function returns a **borrowed reference** to the referenced object. "
"This means that you should always call :c:func:`Py_INCREF` on the object "
"except if you know that it cannot be destroyed while you are still using it."
msgstr ""
"Esta função retorna ** referência emprestada ** ao objeto referenciado. Isso "
"significa que você deve sempre chamar: c: func: `Py_INCREF` no objeto, "
"exceto se você sabe que não pode ser destruído enquanto você ainda está "
"usando."

#: ../../c-api/weakref.rst:80
msgid ""
"Similar to :c:func:`PyWeakref_GetObject`, but implemented as a macro that "
"does no error checking."
msgstr ""
"Semelhante a: c: func: `PyWeakref_GetObject`, mas implementado como uma "
"macro que não verifica erros."
