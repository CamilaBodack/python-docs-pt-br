# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2020-03-16 10:22+0000\n"
"Last-Translator: Rafael Fontenelle <rffontenelle@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/marshal.rst:6
msgid "Data marshalling support"
msgstr "Suporte a Troca de D'ados"

#: ../../c-api/marshal.rst:8
msgid ""
"These routines allow C code to work with serialized objects using the same "
"data format as the :mod:`marshal` module.  There are functions to write data"
" into the serialization format, and additional functions that can be used to"
" read the data back.  Files used to store marshalled data must be opened in "
"binary mode."
msgstr ""
"Essas rotinas permitem que o código C trabalhe com objetos serializados "
"usando o mesmo formato de dados que o módulo :mod:`marshal`. Existem funções"
" para gravar dados no formato de serialização e funções adicionais que podem"
" ser usadas para ler os dados novamente. Os arquivos usados para armazenar "
"dados empacotados devem ser abertos no modo binário."

#: ../../c-api/marshal.rst:14
msgid "Numeric values are stored with the least significant byte first."
msgstr ""
"Os valores numéricos são armazenados primeiro com o byte menos "
"significativo."

#: ../../c-api/marshal.rst:16
msgid ""
"The module supports two versions of the data format: version ``0`` is the "
"historical version, version ``1`` (new in Python 2.4) shares interned "
"strings in the file, and upon unmarshalling.  Version 2 (new in Python 2.5) "
"uses a binary format for floating point numbers.  *Py_MARSHAL_VERSION* "
"indicates the current file format (currently 2)."
msgstr ""

#: ../../c-api/marshal.rst:25
msgid ""
"Marshal a :c:type:`long` integer, *value*, to *file*.  This will only write "
"the least-significant 32 bits of *value*; regardless of the size of the "
"native :c:type:`long` type."
msgstr ""

#: ../../c-api/marshal.rst:29 ../../c-api/marshal.rst:37
#: ../../c-api/marshal.rst:45
msgid "*version* indicates the file format."
msgstr ""

#: ../../c-api/marshal.rst:35
msgid "Marshal a Python object, *value*, to *file*."
msgstr ""

#: ../../c-api/marshal.rst:43
msgid ""
"Return a string object containing the marshalled representation of *value*."
msgstr ""

#: ../../c-api/marshal.rst:49
msgid "The following functions allow marshalled values to be read back in."
msgstr ""
"As seguintes funções permitem que os valores pós-*marshalling* sejam lidos "
"novamente."

#: ../../c-api/marshal.rst:51
msgid ""
"XXX What about error detection?  It appears that reading past the end of the"
" file will always result in a negative numeric value (where that's "
"relevant), but it's not clear that negative values won't be handled properly"
" when there's no error.  What's the right way to tell? Should only non-"
"negative values be written using these routines?"
msgstr ""

#: ../../c-api/marshal.rst:60
msgid ""
"Return a C :c:type:`long` from the data stream in a :c:type:`FILE\\*` opened"
" for reading.  Only a 32-bit value can be read in using this function, "
"regardless of the native size of :c:type:`long`."
msgstr ""
"Retorna um :c:type:`long` C do fluxo de dados em um :c:type:`FILE\\*` aberto"
" para leitura. Somente um valor de 32 bits pode ser lido usando essa função,"
" independentemente do tamanho nativo de :c:type:`long`."

#: ../../c-api/marshal.rst:67
msgid ""
"Return a C :c:type:`short` from the data stream in a :c:type:`FILE\\*` "
"opened for reading.  Only a 16-bit value can be read in using this function,"
" regardless of the native size of :c:type:`short`."
msgstr ""
"Retorna um :c:type:`short` C do fluxo de dados em um :c:type:`FILE\\*` "
"aberto para leitura. Somente um valor de 16 bits pode ser lido usando essa "
"função, independentemente do tamanho nativo de :c:type:`short`."

#: ../../c-api/marshal.rst:74
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  On error, sets the appropriate exception (:exc:`EOFError` or "
":exc:`TypeError`) and returns *NULL*."
msgstr ""

#: ../../c-api/marshal.rst:81
msgid ""
"Return a Python object from the data stream in a :c:type:`FILE\\*` opened "
"for reading.  Unlike :c:func:`PyMarshal_ReadObjectFromFile`, this function "
"assumes that no further objects will be read from the file, allowing it to "
"aggressively load file data into memory so that the de-serialization can "
"operate from data in memory rather than reading a byte at a time from the "
"file.  Only use these variant if you are certain that you won't be reading "
"anything else from the file.  On error, sets the appropriate exception "
"(:exc:`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""

#: ../../c-api/marshal.rst:93
msgid ""
"Return a Python object from the data stream in a character buffer containing"
" *len* bytes pointed to by *string*.  On error, sets the appropriate "
"exception (:exc:`EOFError` or :exc:`TypeError`) and returns *NULL*."
msgstr ""

#: ../../c-api/marshal.rst:98
msgid ""
"This function used an :c:type:`int` type for *len*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
