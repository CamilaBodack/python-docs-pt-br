# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# José Ramon Fragoso da Silva <jose.ramon.silva@ccc.ufcg.edu.br>, 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: Welington Carlos <wcarlos3@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/allocation.rst:6
msgid "Allocating Objects on the Heap"
msgstr "Alocar objetos na pilha"

#: ../../c-api/allocation.rst:14 ../../c-api/allocation.rst:36
#: ../../c-api/allocation.rst:61
msgid ""
"This function used an :c:type:`int` type for *size*. This might require "
"changes in your code for properly supporting 64-bit systems."
msgstr ""
"Essa função usa um tipo :c:type:`int` para *size*. Isto requer mudanças em "
"seu código para suportar propriamete sistemas 64-bits."

#: ../../c-api/allocation.rst:24
msgid ""
"Initialize a newly-allocated object *op* with its type and initial "
"reference.  Returns the initialized object.  If *type* indicates that the "
"object participates in the cyclic garbage detector, it is added to the "
"detector's set of observed objects. Other fields of the object are not "
"affected."
msgstr ""
"Inicialize um objeto *op* recém alocado com seu tipo e sua referência "
"inicial. Retorna o objeto incializado. Se *type* indicar  no detector de "
"lixo cíclico que o objeto participa, ele é adicionado ao grupo do detector "
"de objetos observados. Outros campos do objeto não são afetados."

#: ../../c-api/allocation.rst:33
msgid ""
"This does everything :c:func:`PyObject_Init` does, and also initializes the "
"length information for a variable-size object."
msgstr ""
"Isso faz tudo que :c:func:`PyObject_Init` faz, e também inicializa a "
"informação de comprimento para um objeto tamanho-de-variável."

#: ../../c-api/allocation.rst:43
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized; the object's reference count will be one.  The size of "
"the memory allocation is determined from the "
":c:member:`~PyTypeObject.tp_basicsize` field of the type object."
msgstr ""
"Aloque um novo objeto Python usando a estrutura C digite *TYPE* and the "
"Python objet *type*. Campos não definidos no cabeçalho do objeto Python não "
"são inicializados; a contagem de referência do objeto será um deles. O "
"tamanho da alocação de memória é determinado do campo "
":c:member:`~PyTypeObject.tp_basicsize` do objeto tipo."

#: ../../c-api/allocation.rst:52
msgid ""
"Allocate a new Python object using the C structure type *TYPE* and the "
"Python type object *type*.  Fields not defined by the Python object header "
"are not initialized.  The allocated memory allows for the *TYPE* structure "
"plus *size* fields of the size given by the "
":c:member:`~PyTypeObject.tp_itemsize` field of *type*.  This is useful for "
"implementing objects like tuples, which are able to determine their size at "
"construction time.  Embedding the array of fields into the same allocation "
"decreases the number of allocations, improving the memory management "
"efficiency."
msgstr ""
"Alocar um novo objeto Python usando o tipo de estrutura C *TYPE* e o tipo de"
" objeto Python *type*. Campos não definidos pelo cabeçalho do objeto Python "
"não são inicializados. A memória alocada permite a estrutura * TYPE * e os "
"campos * size * do tamanho dado pelo campo: c: member: `~ "
"PyTypeObject.tp_itemsize` de * type *. Isto é útil para implementar objetos "
"como tuplas, que são capazes de determinar seu tamanho em tempo de "
"construção. Incorporando o array de campos dentro da mesma alocação "
"diminuindo o numero de alocações, melhorando a eficiência de gerenciamento "
"de memória."

#: ../../c-api/allocation.rst:68
msgid ""
"Releases memory allocated to an object using :c:func:`PyObject_New` or "
":c:func:`PyObject_NewVar`.  This is normally called from the "
":c:member:`~PyTypeObject.tp_dealloc` handler specified in the object's type."
"  The fields of the object should not be accessed after this call as the "
"memory is no longer a valid Python object."
msgstr ""
"Libera memória alocada a um objeto usando :c:func:`PyObject_New` ou "
":c:func:`PyObject_NewVar`. Isso é normalmente chamado por "
":c:member:`~PyTypeObject.tp_dealloc`  manipulador especificado no tipo do "
"objeto. Os campos do objeto não devem ser acessados ​​após esta chamada, já "
"que a memória não é mais um objeto Python válido."

#: ../../c-api/allocation.rst:77
msgid ""
"Create a new module object based on a name and table of functions, returning"
" the new module object."
msgstr ""
"Cria um novo objeto módulo baseado em um nome e em tabela de funções, "
"retornando o novo objeto módulo."

#: ../../c-api/allocation.rst:80 ../../c-api/allocation.rst:91
#: ../../c-api/allocation.rst:113
msgid ""
"Older versions of Python did not support *NULL* as the value for the "
"*methods* argument."
msgstr ""
"Versões antigas de Python não suportam *NULL* como valor para argumentos de "
"*method*."

#: ../../c-api/allocation.rst:87
msgid ""
"Create a new module object based on a name and table of functions, returning"
" the new module object.  If *doc* is non-*NULL*, it will be used to define "
"the docstring for the module."
msgstr ""
"Cria um novo objeto módulo baseado em um nome e em tabela de funções, "
"retornando o novo objeto módulo. Se *doc* não é *NULL*, este será usado para"
" definir a docstring para o módulo."

#: ../../c-api/allocation.rst:98
msgid ""
"Create a new module object based on a name and table of functions, returning"
" the new module object.  If *doc* is non-*NULL*, it will be used to define "
"the docstring for the module.  If *self* is non-*NULL*, it will be passed to"
" the functions of the module as their (otherwise *NULL*) first parameter.  "
"(This was added as an experimental feature, and there are no known uses in "
"the current version of Python.)  For *apiver*, the only value which should "
"be passed is defined by the constant :const:`PYTHON_API_VERSION`."
msgstr ""
"Cria um novo objeto módulo baseado em um nome e em tabela de funções, "
"retornando o novo módulo objeto. Se *doc* não é *NULL*, este será usado para"
" definir a docstring para o módulo. Se *self* não é *NULL*, este será "
"passado para as funções do módulo(também *NULL*), como o primeiro parâmetro "
"delas. (Isto foi adicionado como uma característica experimental, e não há "
"usos conhecidos na versão atual do Python.) Para *apiver*, o único valor que"
" deve ser passado é definido pela constante  :const:`PYTHON_API_VERSION`."

#: ../../c-api/allocation.rst:109
msgid ""
"Most uses of this function should probably be using the "
":c:func:`Py_InitModule3` instead; only use this if you are sure you need it."
msgstr ""
"A maioria dos usos dessa função deve provavelmente usar o "
":c:func:`Py_InitModule3`; Apenas use isso se tiver a certeza de que precisa."

#: ../../c-api/allocation.rst:120
msgid ""
"Object which is visible in Python as ``None``.  This should only be accessed"
" using the ``Py_None`` macro, which evaluates to a pointer to this object."
msgstr ""
"Objeto o qual é visível em Python como ``None``. Este poderá apenas ser "
"acessado usando o ``Py_None`` macro, que valida um ponteiro para este "
"objeto."
