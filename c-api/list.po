# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-10-27 08:58+0000\n"
"Last-Translator: tomo\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../c-api/list.rst:6
msgid "List Objects"
msgstr "Objeto List"

#: ../../c-api/list.rst:13
msgid "This subtype of :c:type:`PyObject` represents a Python list object."
msgstr ""
"Este subtipo de :c:type:`PyObject` representa um objeto de lista Python."

#: ../../c-api/list.rst:18
msgid ""
"This instance of :c:type:`PyTypeObject` represents the Python list type.  "
"This is the same object as ``list`` in the Python layer."
msgstr ""

#: ../../c-api/list.rst:24
msgid ""
"Return true if *p* is a list object or an instance of a subtype of the list "
"type."
msgstr ""
"Retorna verdadeiro se *p* for um objeto de lista ou uma instância de um "
"subtipo do tipo de lista."

#: ../../c-api/list.rst:27
msgid "Allowed subtypes to be accepted."
msgstr ""

#: ../../c-api/list.rst:33
msgid ""
"Return true if *p* is a list object, but not an instance of a subtype of the"
" list type."
msgstr ""
"Retorna verdadeiro se *p* for um objeto de lista, mas não uma instância de "
"um subtipo do tipo de lista."

#: ../../c-api/list.rst:41
msgid "Return a new list of length *len* on success, or *NULL* on failure."
msgstr ""
"Retorna uma nova  list  de tamanho *len* se bem sucedido, ou *NULL* em caso "
"de falha."

#: ../../c-api/list.rst:45
msgid ""
"If *len* is greater than zero, the returned list object's items are set to "
"``NULL``.  Thus you cannot use abstract API functions such as "
":c:func:`PySequence_SetItem`  or expose the object to Python code before "
"setting all items to a real object with :c:func:`PyList_SetItem`."
msgstr ""
"Se *len* for maior que zero, os itens do objeto de lista retornado são "
"definidos como ``NULL``. Portanto, você não pode usar funções API abstratas,"
" como :c:func:`PySequence_SetItem` ou expor o objeto ao código Python antes "
"de definir todos os itens para um objeto real com :c:func:`PyList_SetItem`."

#: ../../c-api/list.rst:50
msgid ""
"This function used an :c:type:`int` for *size*. This might require changes "
"in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/list.rst:59
msgid ""
"Return the length of the list object in *list*; this is equivalent to "
"``len(list)`` on a list object."
msgstr ""
"Retorna o comprimento do objeto de lista em *list*; isto é equivalente a "
"``len(list)`` em um objeto lista."

#: ../../c-api/list.rst:62
msgid ""
"This function returned an :c:type:`int`. This might require changes in your "
"code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/list.rst:69
msgid "Macro form of :c:func:`PyList_Size` without error checking."
msgstr "Forma macro de :c:func:`PyList_Size` sem verificação de erros."

#: ../../c-api/list.rst:71
msgid ""
"This macro returned an :c:type:`int`. This might require changes in your "
"code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/list.rst:78
msgid ""
"Return the object at position *index* in the list pointed to by *list*.  The"
" position must be non-negative; indexing from the end of the list is not "
"supported.  If *index* is out of bounds (<0 or >=len(list)), return *NULL* "
"and set an :exc:`IndexError` exception."
msgstr ""

#: ../../c-api/list.rst:83 ../../c-api/list.rst:108 ../../c-api/list.rst:136
msgid ""
"This function used an :c:type:`int` for *index*. This might require changes "
"in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/list.rst:90
msgid "Macro form of :c:func:`PyList_GetItem` without error checking."
msgstr "Forma macro de :c:func:`PyList_GetItem` sem verificação de erros."

#: ../../c-api/list.rst:92 ../../c-api/list.rst:125
msgid ""
"This macro used an :c:type:`int` for *i*. This might require changes in your"
" code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/list.rst:99
msgid ""
"Set the item at index *index* in list to *item*.  Return ``0`` on success. "
"If *index* is out of bounds, return ``-1`` and set an :exc:`IndexError` "
"exception."
msgstr ""
"Define o item no índice *index* na lista como *item*. Retorna ``0`` em caso "
"de sucesso. Se *index* estiver fora dos limites, retorna ``-1`` e levanta "
"uma exceção :exc:`IndexError`."

#: ../../c-api/list.rst:105
msgid ""
"This function \"steals\" a reference to *item* and discards a reference to "
"an item already in the list at the affected position."
msgstr ""
"Esta função \"rouba\" uma referência para o *item* e descarta uma referência"
" para um item já presente na lista na posição afetada."

#: ../../c-api/list.rst:115
msgid ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."
msgstr ""
"Macro form of :c:func:`PyList_SetItem` without error checking. This is "
"normally only used to fill in new lists where there is no previous content."

#: ../../c-api/list.rst:120
msgid ""
"This macro \"steals\" a reference to *item*, and, unlike "
":c:func:`PyList_SetItem`, does *not* discard a reference to any item that it"
" being replaced; any reference in *list* at position *i* will be leaked."
msgstr ""

#: ../../c-api/list.rst:132
msgid ""
"Insert the item *item* into list *list* in front of index *index*.  Return "
"``0`` if successful; return ``-1`` and set an exception if unsuccessful. "
"Analogous to ``list.insert(index, item)``."
msgstr ""
"Insere o item *item* na lista *list* na frente do índice *index*. Retorna "
"``0`` se for bem-sucedido; retorna ``-1`` e levanta uma exceção se "
"malsucedido. Análogo a ``list.insert(index, item)``."

#: ../../c-api/list.rst:143
msgid ""
"Append the object *item* at the end of list *list*. Return ``0`` if "
"successful; return ``-1`` and set an exception if unsuccessful.  Analogous "
"to ``list.append(item)``."
msgstr ""
"Adiciona o item *item* ao final da lista *list*. Retorna ``0`` se for bem-"
"sucedido; retorna ``-1`` e levanta uma exceção se malsucedido. Análogo a "
"``list.insert(index, item)``."

#: ../../c-api/list.rst:150
msgid ""
"Return a list of the objects in *list* containing the objects *between* "
"*low* and *high*.  Return *NULL* and set an exception if unsuccessful.  "
"Analogous to ``list[low:high]``.  Indexing from the end of the list is not "
"supported."
msgstr ""

#: ../../c-api/list.rst:154 ../../c-api/list.rst:167
msgid ""
"This function used an :c:type:`int` for *low* and *high*. This might require"
" changes in your code for properly supporting 64-bit systems."
msgstr ""

#: ../../c-api/list.rst:161
msgid ""
"Set the slice of *list* between *low* and *high* to the contents of "
"*itemlist*.  Analogous to ``list[low:high] = itemlist``. The *itemlist* may "
"be *NULL*, indicating the assignment of an empty list (slice deletion). "
"Return ``0`` on success, ``-1`` on failure.  Indexing from the end of the "
"list is not supported."
msgstr ""

#: ../../c-api/list.rst:174
msgid ""
"Sort the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is equivalent to ``list.sort()``."
msgstr ""
"Ordena os itens de *list* no mesmo lugar. Retorna ``0`` em caso de sucesso, "
"e ``-1`` em caso de falha. Isso é o equivalente de ``list.sort()``."

#: ../../c-api/list.rst:180
msgid ""
"Reverse the items of *list* in place.  Return ``0`` on success, ``-1`` on "
"failure.  This is the equivalent of ``list.reverse()``."
msgstr ""
"Inverte os termos de *list* no mesmo lugar. Retorna ``0`` em caso de "
"sucesso, e ``-1`` em caso de falha. Isso é o equivalente de "
"``list.reverse()``."

#: ../../c-api/list.rst:188
msgid ""
"Return a new tuple object containing the contents of *list*; equivalent to "
"``tuple(list)``."
msgstr ""
"Retorna um novo objeto tupla contendo os conteúdos de *list*; equivale "
"a``tuple(list)``."
