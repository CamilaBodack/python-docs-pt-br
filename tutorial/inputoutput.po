# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2001-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
# Translators:
# Adson Rodrigues <adson.develop@gmail.com>, 2018
# Hildeberto Abreu Magalhães <hildeberto@gmail.com>, 2019
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2019
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Python 3.6\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:48+0900\n"
"PO-Revision-Date: 2018-06-29 17:19+0000\n"
"Last-Translator: Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, "
"2019\n"
"Language-Team: Portuguese (Brazil) (https://www.transifex.com/python-doc/"
"teams/5390/pt_BR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: pt_BR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/inputoutput.rst:5
msgid "Input and Output"
msgstr "Entrada e Saída"

#: ../../tutorial/inputoutput.rst:7
msgid ""
"There are several ways to present the output of a program; data can be "
"printed in a human-readable form, or written to a file for future use. This "
"chapter will discuss some of the possibilities."
msgstr ""
"Existem várias maneiras de apresentar a saída de um programa; os dados podem "
"ser exibidos ou impressos em forma legível para seres humanos, ou escritos "
"em arquivos para uso posterior. Este capítulo apresentará algumas das "
"possibilidades."

#: ../../tutorial/inputoutput.rst:15
msgid "Fancier Output Formatting"
msgstr "Refinando a formatação de saída"

#: ../../tutorial/inputoutput.rst:17
msgid ""
"So far we've encountered two ways of writing values: *expression statements* "
"and the :func:`print` function.  (A third way is using the :meth:`write` "
"method of file objects; the standard output file can be referenced as ``sys."
"stdout``. See the Library Reference for more information on this.)"
msgstr ""
"Até agora vimos duas maneiras de exibir valores: *expressões* e a função :"
"func:`print`. (Uma outra maneira é utilizar o método :meth:`write` de "
"objetos arquivo; o arquivo saída padrão pode ser referenciada como ``sys."
"stdout``. Veja a Referência da Biblioteca Python para mais informações sobre "
"isto.)"

#: ../../tutorial/inputoutput.rst:22
msgid ""
"Often you'll want more control over the formatting of your output than "
"simply printing space-separated values.  There are two ways to format your "
"output; the first way is to do all the string handling yourself; using "
"string slicing and concatenation operations you can create any layout you "
"can imagine.  The string type has some methods that perform useful "
"operations for padding strings to a given column width; these will be "
"discussed shortly.  The second way is to use :ref:`formatted string literals "
"<f-strings>`, or the :meth:`str.format` method."
msgstr ""
"Frequentemente é desejável mais controle sobre a formatação de saída do que\n"
"simplesmente exibir valores separados por espaços. Existem duas formas de\n"
"formatar a saída. A primeira é manipular strings através de fatiamento\n"
"(slicing) e concatenação. Os tipos string têm métodos úteis para criar "
"strings\n"
"com tamanhos determinados, usando caracteres de preenchimento; eles serão\n"
"apresentados a seguir. A segunda forma é usar o método :meth:`str.format`."

#: ../../tutorial/inputoutput.rst:31
msgid ""
"The :mod:`string` module contains a :class:`~string.Template` class which "
"offers yet another way to substitute values into strings."
msgstr ""
"O módulo :mod:`string` tem uma classe :class:`string.Template` que oferece\n"
"uma outra maneira de inserir valores em strings."

#: ../../tutorial/inputoutput.rst:34
msgid ""
"One question remains, of course: how do you convert values to strings? "
"Luckily, Python has ways to convert any value to a string: pass it to the :"
"func:`repr` or :func:`str` functions."
msgstr ""
"Permanece a questão: como converter valores para strings? Felizmente, "
"Python\n"
"possui duas maneiras de converter qualquer valor para uma string: as "
"funções\n"
":func:`repr` e :func:`str`."

#: ../../tutorial/inputoutput.rst:38
msgid ""
"The :func:`str` function is meant to return representations of values which "
"are fairly human-readable, while :func:`repr` is meant to generate "
"representations which can be read by the interpreter (or will force a :exc:"
"`SyntaxError` if there is no equivalent syntax).  For objects which don't "
"have a particular representation for human consumption, :func:`str` will "
"return the same value as :func:`repr`.  Many values, such as numbers or "
"structures like lists and dictionaries, have the same representation using "
"either function.  Strings, in particular, have two distinct representations."
msgstr ""
"A função :func:`str` serve para retornar representações de valores que sejam "
"legíveis para as pessoas, enquanto :func:`repr` é para gerar representações "
"que o interpretador Python consegue ler (ou levantará uma exceção :exc:"
"`SyntaxError`, se não houver sintaxe equivalente). Para objetos que não têm "
"uma representação adequada para consumo humano, :func:`str` devolve o mesmo "
"valor que :func:`repr`. Muitos valores, tal como números ou estruturas, como "
"listas e dicionários, têm a mesma representação usando quaisquer das "
"funções. Strings, em particular, têm duas representações distintas."

#: ../../tutorial/inputoutput.rst:47
msgid "Some examples::"
msgstr "Alguns exemplos:"

#: ../../tutorial/inputoutput.rst:70
msgid "Here are two ways to write a table of squares and cubes::"
msgstr ""
"A seguir, duas maneiras de se escrever uma tabela de quadrados e cubos:::"

#: ../../tutorial/inputoutput.rst:102
msgid ""
"(Note that in the first example, one space between each column was added by "
"the way :func:`print` works: by default it adds spaces between its "
"arguments.)"
msgstr ""

#: ../../tutorial/inputoutput.rst:105
msgid ""
"This example demonstrates the :meth:`str.rjust` method of string objects, "
"which right-justifies a string in a field of a given width by padding it "
"with spaces on the left.  There are similar methods :meth:`str.ljust` and :"
"meth:`str.center`.  These methods do not write anything, they just return a "
"new string.  If the input string is too long, they don't truncate it, but "
"return it unchanged; this will mess up your column lay-out but that's "
"usually better than the alternative, which would be lying about a value.  "
"(If you really want truncation you can always add a slice operation, as in "
"``x.ljust(n)[:n]``.)"
msgstr ""
"Esse exemplo demonstra o método :meth:`str.rjust` de objetos string, que\n"
"alinha uma string à direita juntando espaços adicionais à esquerda. Existem\n"
"métodos análogas :meth:`str.ljust` e :meth:`str.center`. Esses métodos não\n"
"exibem nada na tela, apenas devolvem uma nova string formatada. Se a "
"entrada\n"
"extrapolar o comprimento especificado, a string original é devolvida sem\n"
"modificação; isso pode estragar o alinhamento das colunas, mas é melhor do "
"que\n"
"a alternativa, que seria apresentar um valor mentiroso. (Se for realmente\n"
"desejável truncar o valor, pode-se usar fatiamento, por exemplo:\n"
"``x.ljust(n)[:n]``.)"

#: ../../tutorial/inputoutput.rst:115
msgid ""
"There is another method, :meth:`str.zfill`, which pads a numeric string on "
"the left with zeros.  It understands about plus and minus signs::"
msgstr ""
"Existe ainda o método :meth:`str.zfill` que preenche uma string numérica com "
"zeros à esquerda, e  sabe lidar com sinais positivos e negativos::"

#: ../../tutorial/inputoutput.rst:125
msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr "Um uso básico do método :meth:`str.format` tem esta forma::"

#: ../../tutorial/inputoutput.rst:130
msgid ""
"The brackets and characters within them (called format fields) are replaced "
"with the objects passed into the :meth:`str.format` method.  A number in the "
"brackets can be used to refer to the position of the object passed into the :"
"meth:`str.format` method. ::"
msgstr ""
"As chaves e seus conteúdos (chamados campos de formatação) são substituídos "
"pelos objetos passados para o método :meth:`str.format`.  Um número nas "
"chaves pode ser usado para referenciar a posição do objeto passado no "
"método :meth:`str.format`. ::"

#: ../../tutorial/inputoutput.rst:140
msgid ""
"If keyword arguments are used in the :meth:`str.format` method, their values "
"are referred to by using the name of the argument. ::"
msgstr ""
"Se argumentos nomeados são passados para o método :meth:`str.format`, seus "
"valores serão referenciados usando o nome do argumento::"

#: ../../tutorial/inputoutput.rst:147
msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr "Argumentos posicionais e nomeados podem ser combinados à vontade::"

#: ../../tutorial/inputoutput.rst:153
msgid ""
"``'!a'`` (apply :func:`ascii`), ``'!s'`` (apply :func:`str`) and ``'!r'`` "
"(apply :func:`repr`) can be used to convert the value before it is "
"formatted::"
msgstr ""

#: ../../tutorial/inputoutput.rst:162
msgid ""
"An optional ``':'`` and format specifier can follow the field name. This "
"allows greater control over how the value is formatted.  The following "
"example rounds Pi to three places after the decimal."
msgstr ""
"Após o identificador do campo, uma especificação de formato opcional pode "
"ser\n"
"colocada depois de ``:`` (dois pontos). O exemplo abaixo arredonda Pi até a\n"
"terceira casa após o ponto decimal."

#: ../../tutorial/inputoutput.rst:170
msgid ""
"Passing an integer after the ``':'`` will cause that field to be a minimum "
"number of characters wide.  This is useful for making tables pretty. ::"
msgstr ""
"Colocar um inteiro *n* logo após o ``:`` fará o campo ocupar uma largura\n"
"mínima de *n* caracteres. Isto é útil para organizar tabelas. ::"

#: ../../tutorial/inputoutput.rst:181
msgid ""
"If you have a really long format string that you don't want to split up, it "
"would be nice if you could reference the variables to be formatted by name "
"instead of by position.  This can be done by simply passing the dict and "
"using square brackets ``'[]'`` to access the keys ::"
msgstr ""
"Se uma string de formatação é muito longa, e não se deseja quebrá-la, pode "
"ser bom referir-se aos valores a serem formatados por nome, em vez de "
"posição. Isto pode ser feito passando um dicionário usando colchetes ``[]`` "
"para acessar as chaves::"

#: ../../tutorial/inputoutput.rst:191
msgid ""
"This could also be done by passing the table as keyword arguments with the "
"'**' notation. ::"
msgstr ""
"Isto também pode ser feito passando o dicionário como argumento do método, "
"usando a notação ``**``::"

#: ../../tutorial/inputoutput.rst:198
msgid ""
"This is particularly useful in combination with the built-in function :func:"
"`vars`, which returns a dictionary containing all local variables."
msgstr ""
"Isto é particularmente útil em conjunto com a função embutida :func:`vars`, "
"que devolve um dicionário contendo todas as variáveis locais."

#: ../../tutorial/inputoutput.rst:201
msgid ""
"For a complete overview of string formatting with :meth:`str.format`, see :"
"ref:`formatstrings`."
msgstr ""
"Para uma visão completa da formatação de strings com :meth:`str.format`, "
"veja a seção :ref:`formatstrings`."

#: ../../tutorial/inputoutput.rst:206
msgid "Old string formatting"
msgstr "Formatação de strings à moda antiga"

#: ../../tutorial/inputoutput.rst:208
msgid ""
"The ``%`` operator can also be used for string formatting. It interprets the "
"left argument much like a :c:func:`sprintf`\\ -style format string to be "
"applied to the right argument, and returns the string resulting from this "
"formatting operation. For example::"
msgstr ""
"O operador ``%`` também pode ser usado para formatação de strings. O "
"operando da esquerda é interpretado de forma semelhante ao estilo de "
"formatação da função :c:func:`sprintf` da linguagem C, aplicando a "
"formatação ao operando da direita, e devolvendo a string resultante. Por "
"exemplo::"

#: ../../tutorial/inputoutput.rst:217
msgid ""
"More information can be found in the :ref:`old-string-formatting` section."
msgstr ""
"Mais informação pode ser encontrada na seção :ref:`old-string-formatting`."

#: ../../tutorial/inputoutput.rst:223
msgid "Reading and Writing Files"
msgstr "Leitura e escrita de arquivos"

#: ../../tutorial/inputoutput.rst:229
msgid ""
":func:`open` returns a :term:`file object`, and is most commonly used with "
"two arguments: ``open(filename, mode)``."
msgstr ""
"A função :func:`open` devolve um :term:`file object`, e é frequentemente "
"usada com dois argumentos: ``open(filename, mode)``."

#: ../../tutorial/inputoutput.rst:241
msgid ""
"The first argument is a string containing the filename.  The second argument "
"is another string containing a few characters describing the way in which "
"the file will be used.  *mode* can be ``'r'`` when the file will only be "
"read, ``'w'`` for only writing (an existing file with the same name will be "
"erased), and ``'a'`` opens the file for appending; any data written to the "
"file is automatically added to the end.  ``'r+'`` opens the file for both "
"reading and writing. The *mode* argument is optional; ``'r'`` will be "
"assumed if it's omitted."
msgstr ""
"O primeiro argumento é uma string contendo o nome do arquivo. O segundo "
"argumento é outra string, contendo alguns caracteres que descrevem o modo "
"como o arquivo será usado. O parâmetro *mode* pode ser ``'r'`` quando o "
"arquivo será apenas lido, ``'w'`` para escrever (se o arquivo já existir seu "
"conteúdo prévio será apagado), e ``'a'`` para abrir o arquivo para adição; "
"qualquer escrita será adicionada ao final do arquivo. A opção ``'r+'`` abre "
"o arquivo tanto para leitura como para escrita. O parâmetro ``mode`` é "
"opcional, em caso de omissão será assumido ``'r'``."

#: ../../tutorial/inputoutput.rst:250
msgid ""
"Normally, files are opened in :dfn:`text mode`, that means, you read and "
"write strings from and to the file, which are encoded in a specific "
"encoding. If encoding is not specified, the default is platform dependent "
"(see :func:`open`). ``'b'`` appended to the mode opens the file in :dfn:"
"`binary mode`: now the data is read and written in the form of bytes "
"objects.  This mode should be used for all files that don't contain text."
msgstr ""
"Normalmente, os arquivos são abertos em :dfn:`modo texto`, ou seja, você lê "
"e grava strings de e para o arquivo, numa codificação específica. Se a "
"codificação não for especificada, o padrão é dependente da plataforma "
"(consulte :func:`open`). ``'b'`` anexado ao modo abre o arquivo em :dfn:"
"`modo binário`: agora os dados são lidos e escritos na forma de bytes. Este "
"modo deve ser usado para todos os arquivos que não contenham texto."

#: ../../tutorial/inputoutput.rst:257
msgid ""
"In text mode, the default when reading is to convert platform-specific line "
"endings (``\\n`` on Unix, ``\\r\\n`` on Windows) to just ``\\n``.  When "
"writing in text mode, the default is to convert occurrences of ``\\n`` back "
"to platform-specific line endings.  This behind-the-scenes modification to "
"file data is fine for text files, but will corrupt binary data like that in :"
"file:`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when "
"reading and writing such files."
msgstr ""
"Em modo texto, o padrão durante a leitura é converter terminadores de linha "
"específicos da plataforma (``\\n`` no Unix, ``\\r\\n`` no Windows) para "
"apenas ``\\n``. Ao escrever no modo de texto, o padrão é converter as "
"ocorrências de ``\\n`` de volta para os finais de linha específicos da "
"plataforma. Essa modificação de bastidores nos dados do arquivo é adequada "
"para arquivos de texto, mas corromperá dados binários, como arquivos :file:"
"`JPEG` ou :file:`EXE`. Tenha muito cuidado para só usar o modo binário, ao "
"ler e gravar esses arquivos."

#: ../../tutorial/inputoutput.rst:265
msgid ""
"It is good practice to use the :keyword:`with` keyword when dealing with "
"file objects.  The advantage is that the file is properly closed after its "
"suite finishes, even if an exception is raised at some point.  Using :"
"keyword:`with` is also much shorter than writing equivalent :keyword:`try`\\ "
"-\\ :keyword:`finally` blocks::"
msgstr ""

#: ../../tutorial/inputoutput.rst:276
msgid ""
"If you're not using the :keyword:`with` keyword, then you should call ``f."
"close()`` to close the file and immediately free up any system resources "
"used by it. If you don't explicitly close a file, Python's garbage collector "
"will eventually destroy the object and close the open file for you, but the "
"file may stay open for a while.  Another risk is that different Python "
"implementations will do this clean-up at different times."
msgstr ""
"Se você não estiver usando a palavra-chave :keyword:`with`, então você deve "
"chamar ``f.close()`` para fechar o arquivo e liberar imediatamente quaisquer "
"recursos do sistema usados por ele. Se você não fechar explicitamente um "
"arquivo, o coletor de lixo do Python irá eventualmente destruir o objeto e "
"fechar o arquivo aberto para você, mas o arquivo pode ficar aberto por um "
"tempo. Outro risco é que diferentes implementações de Python farão essa "
"limpeza em momentos diferentes."

#: ../../tutorial/inputoutput.rst:284
msgid ""
"After a file object is closed, either by a :keyword:`with` statement or by "
"calling ``f.close()``, attempts to use the file object will automatically "
"fail. ::"
msgstr ""
"Depois que um arquivo é fechado, seja por uma instrução :keyword:`with` ou "
"chamando ``f.close()``, as tentativas de usar o arquivo falharão "
"automaticamente. ::"

#: ../../tutorial/inputoutput.rst:298
msgid "Methods of File Objects"
msgstr "Métodos de arquivos"

#: ../../tutorial/inputoutput.rst:300
msgid ""
"The rest of the examples in this section will assume that a file object "
"called ``f`` has already been created."
msgstr ""
"Para simplificar, o resto dos exemplos nesta seção assumem que um objeto "
"arquivo chamado ``f`` já foi criado."

#: ../../tutorial/inputoutput.rst:303
msgid ""
"To read a file's contents, call ``f.read(size)``, which reads some quantity "
"of data and returns it as a string (in text mode) or bytes object (in binary "
"mode). *size* is an optional numeric argument.  When *size* is omitted or "
"negative, the entire contents of the file will be read and returned; it's "
"your problem if the file is twice as large as your machine's memory. "
"Otherwise, at most *size* bytes are read and returned. If the end of the "
"file has been reached, ``f.read()`` will return an empty string (``''``).  ::"
msgstr ""
"Para ler o conteúdo de um arquivo, chame ``f.read(size)``, que lê uma "
"quantidade de dados e retorna-os como uma string (em modo texto) ou bytes "
"(em modo binário). O argumento numérico *size* é opcional. Quando *size* é "
"omitido ou negativo, todo o conteúdo do arquivo é lido e retornado; se o "
"arquivo é duas vezes maior que a memória da máquina, o problema é seu. Caso "
"contrário, no máximo *size* bytes serão lidos e retornados. Se o fim do "
"arquivo for atingido, ``f.read()`` retornará uma string vazia (`\"\"`). ::"

#: ../../tutorial/inputoutput.rst:317
msgid ""
"``f.readline()`` reads a single line from the file; a newline character (``"
"\\n``) is left at the end of the string, and is only omitted on the last "
"line of the file if the file doesn't end in a newline.  This makes the "
"return value unambiguous; if ``f.readline()`` returns an empty string, the "
"end of the file has been reached, while a blank line is represented by "
"``'\\n'``, a string containing only a single newline.  ::"
msgstr ""
"O método ``f.readline()`` lê uma única linha do arquivo; o caractere de "
"quebra de linha (``\\n``) é mantido ao final da string, e só é omitido na "
"última linha do arquivo, se o arquivo não termina com uma quebra de linha. "
"Isso elimina a ambiguidade do valor retornado; se ``f.readline()`` devolver "
"uma string vazia, o fim do arquivo foi atingido. Linhas em branco são "
"representadas por um ``'\\n'`` -- uma string contendo apenas o terminador de "
"linha. ::"

#: ../../tutorial/inputoutput.rst:331
msgid ""
"For reading lines from a file, you can loop over the file object. This is "
"memory efficient, fast, and leads to simple code::"
msgstr ""
"Uma maneira alternativa de ler linhas do arquivo é iterar diretamente pelo "
"objeto arquivo. É eficiente, rápido e resulta em código mais simples::"

#: ../../tutorial/inputoutput.rst:340
msgid ""
"If you want to read all the lines of a file in a list you can also use "
"``list(f)`` or ``f.readlines()``."
msgstr ""
"Se desejar ler todas as linhas de um arquivo em uma lista pode-se usar "
"``list(f)`` ou ``f.readlines()``."

#: ../../tutorial/inputoutput.rst:343
msgid ""
"``f.write(string)`` writes the contents of *string* to the file, returning "
"the number of characters written. ::"
msgstr ""
"``f.write(string)`` escreve o conteúdo de *string* para o arquivo, "
"retornando o número de caracteres escritos. ::"

#: ../../tutorial/inputoutput.rst:349
msgid ""
"Other types of objects need to be converted -- either to a string (in text "
"mode) or a bytes object (in binary mode) -- before writing them::"
msgstr ""
"Outros tipos de objetos precisam ser convertidos -- seja para uma string (em "
"modo texto) ou para bytes (em modo binário) -- antes de escrevê-los::"

#: ../../tutorial/inputoutput.rst:357
msgid ""
"``f.tell()`` returns an integer giving the file object's current position in "
"the file represented as number of bytes from the beginning of the file when "
"in binary mode and an opaque number when in text mode."
msgstr ""
"``f.tell()`` retorna um inteiro dando a posição atual do objeto de arquivo, "
"no arquivo representado, como número de bytes desde o início do arquivo, no "
"modo binário, e um número ininteligível, quando no modo de texto."

#: ../../tutorial/inputoutput.rst:361
msgid ""
"To change the file object's position, use ``f.seek(offset, from_what)``.  "
"The position is computed from adding *offset* to a reference point; the "
"reference point is selected by the *from_what* argument.  A *from_what* "
"value of 0 measures from the beginning of the file, 1 uses the current file "
"position, and 2 uses the end of the file as the reference point.  "
"*from_what* can be omitted and defaults to 0, using the beginning of the "
"file as the reference point. ::"
msgstr ""
"Para mudar a posição do objeto arquivo, use ``f.seek(offset, from_what)``.  "
"A posição é calculada somando-se *offset* ao ponto de referência; o ponto de "
"referência é selecionado a partir do argumento *from_what*.  Um valor 0 para "
"*from_what* indica o início do arquivo, 1 usa a posição atual no arquivo, e "
"2 usa o fim do arquivo como ponto de referência.  *from_what* pode ser "
"omitido e assumirá o valor 0, usando o início do arquivo como ponto de "
"referência. ::"

#: ../../tutorial/inputoutput.rst:380
msgid ""
"In text files (those opened without a ``b`` in the mode string), only seeks "
"relative to the beginning of the file are allowed (the exception being "
"seeking to the very file end with ``seek(0, 2)``) and the only valid "
"*offset* values are those returned from the ``f.tell()``, or zero. Any other "
"*offset* value produces undefined behaviour."
msgstr ""
"Em arquivos texto (abertos sem um ``b``, em modo string), somente *seeks* "
"relativos ao início do arquivo serão permitidos (exceto se for indicado o "
"final do arquivo, com ``seek(0, 2)``) e o único valor válido para *offset* "
"são aqueles retornados por chamada à ``f.tell()``, ou zero. Qualquer outro "
"valor para *offset* produz um comportamento indefinido."

#: ../../tutorial/inputoutput.rst:386
msgid ""
"File objects have some additional methods, such as :meth:`~file.isatty` and :"
"meth:`~file.truncate` which are less frequently used; consult the Library "
"Reference for a complete guide to file objects."
msgstr ""
"Objetos arquivo tem alguns método adicionais, como :meth:`~file.isatty` e :"
"meth:`~file.truncate` que não são usados com frequência; consulte a "
"Biblioteca de Referência para um guia completo de objetos arquivo."

#: ../../tutorial/inputoutput.rst:394
msgid "Saving structured data with :mod:`json`"
msgstr "Gravando dados estruturados com :mod:`json`"

#: ../../tutorial/inputoutput.rst:398
msgid ""
"Strings can easily be written to and read from a file.  Numbers take a bit "
"more effort, since the :meth:`read` method only returns strings, which will "
"have to be passed to a function like :func:`int`, which takes a string like "
"``'123'`` and returns its numeric value 123.  When you want to save more "
"complex data types like nested lists and dictionaries, parsing and "
"serializing by hand becomes complicated."
msgstr ""
"Strings podem ser facilmente gravadas e lidas em um arquivo. Números dão um "
"pouco mais de trabalho, já que o método :meth:`read` só retorna strings, que "
"terão que ser passadas para uma função como :func:`int`, que pega uma string "
"como ``'123'`` e retorna seu valor numérico 123.  Quando você deseja salvar "
"tipos de dados mais complexos, como listas e dicionários aninhados, a "
"análise e serialização manual tornam-se complicadas."

#: ../../tutorial/inputoutput.rst:405
msgid ""
"Rather than having users constantly writing and debugging code to save "
"complicated data types to files, Python allows you to use the popular data "
"interchange format called `JSON (JavaScript Object Notation) <http://json."
"org>`_.  The standard module called :mod:`json` can take Python data "
"hierarchies, and convert them to string representations; this process is "
"called :dfn:`serializing`.  Reconstructing the data from the string "
"representation is called :dfn:`deserializing`.  Between serializing and "
"deserializing, the string representing the object may have been stored in a "
"file or data, or sent over a network connection to some distant machine."
msgstr ""
"Ao invés de ter usuários constantemente escrevendo e depurando código para "
"gravar tipos complicados de dados em arquivos, o Python permite que se use o "
"popular formato de troca de dados chamado `JSON (JavaScript Object Notation) "
"<http://json.org>`_. O módulo padrão chamado :mod:`json` pode pegar "
"hierarquias de dados em Python e convertê-las em representações de strings; "
"esse processo é chamado :dfn:`serialização`. Reconstruir os dados da "
"representação string é chamado :dfn:`desserialização`. Entre serializar e "
"desserializar, a string que representa o objeto pode ser armazenada em um "
"arquivo ou estrutura de dados, ou enviada por uma conexão de rede para "
"alguma outra máquina."

#: ../../tutorial/inputoutput.rst:416
msgid ""
"The JSON format is commonly used by modern applications to allow for data "
"exchange.  Many programmers are already familiar with it, which makes it a "
"good choice for interoperability."
msgstr ""
"O formato JSON é comumente usado por aplicativos modernos para permitir a "
"troca de dados. Pessoas que programam já estão familiarizados com esse "
"formato, o que o torna uma boa opção para interoperabilidade."

#: ../../tutorial/inputoutput.rst:420
msgid ""
"If you have an object ``x``, you can view its JSON string representation "
"with a simple line of code::"
msgstr ""
"Um objeto ``x``, pode ser visualizado na sua representação JSON com uma "
"simples linha de código::"

#: ../../tutorial/inputoutput.rst:427
msgid ""
"Another variant of the :func:`~json.dumps` function, called :func:`~json."
"dump`, simply serializes the object to a :term:`text file`.  So if ``f`` is "
"a :term:`text file` object opened for writing, we can do this::"
msgstr ""
"Outra variação da função :func:`~json.dumps`, chamada :func:`~json.dump`, "
"serializa o objeto para um :term:`arquivo texto`.  Se ``f`` é um :term:"
"`arquivo texto` aberto para escrita, podemos fazer isto::"

#: ../../tutorial/inputoutput.rst:433
msgid ""
"To decode the object again, if ``f`` is a :term:`text file` object which has "
"been opened for reading::"
msgstr ""
"Para decodificar o objeto novamente, se ``f`` é um :term:`arquivo texto` que "
"foi aberto para leitura::"

#: ../../tutorial/inputoutput.rst:438
msgid ""
"This simple serialization technique can handle lists and dictionaries, but "
"serializing arbitrary class instances in JSON requires a bit of extra "
"effort. The reference for the :mod:`json` module contains an explanation of "
"this."
msgstr ""
"Essa técnica de serialização simples pode manipular listas e dicionários, "
"mas a serialização de instâncias de classe arbitrárias no JSON requer um "
"pouco mais de esforço. A referência para o módulo :mod:`json` contém uma "
"explicação disso."

#: ../../tutorial/inputoutput.rst:444
msgid ":mod:`pickle` - the pickle module"
msgstr "O módulo :mod:`pickle`"

#: ../../tutorial/inputoutput.rst:446
msgid ""
"Contrary to :ref:`JSON <tut-json>`, *pickle* is a protocol which allows the "
"serialization of arbitrarily complex Python objects.  As such, it is "
"specific to Python and cannot be used to communicate with applications "
"written in other languages.  It is also insecure by default: deserializing "
"pickle data coming from an untrusted source can execute arbitrary code, if "
"the data was crafted by a skilled attacker."
msgstr ""
"Ao contrário do :ref:`JSON <tut-json>`, *pickle* é um protocolo que permite "
"a serialização de objetos Python arbitrariamente complexos. Por isso, é "
"específico do Python e não pode ser usado para se comunicar com aplicativos "
"escritos em outros idiomas. Também é inseguro por padrão: desserializar "
"dados de pickle, provenientes de uma fonte não confiável, pode executar "
"código arbitrário, se os dados foram criados por um invasor habilidoso."
