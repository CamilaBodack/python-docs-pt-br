# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1990-2020, Python Software Foundation
# This file is distributed under the same license as the Python package.
#
# Translators:
# Claudio Rogerio Carvalho Filho <excriptbrasil@gmail.com>, 2017
msgid ""
msgstr ""
"Project-Id-Version: Python 2.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-09 18:46+0900\n"
"PO-Revision-Date: 2019-09-01 05:18+0000\n"
"Last-Translator: Hildeberto Abreu Magalhães <hildeberto@gmail.com>\n"
"Language-Team: Portuguese (Brazil) (http://www.transifex.com/python-doc/"
"python-27/language/pt_BR/)\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../tutorial/inputoutput.rst:5
msgid "Input and Output"
msgstr "Entrada e saída"

#: ../../tutorial/inputoutput.rst:7
msgid ""
"There are several ways to present the output of a program; data can be "
"printed in a human-readable form, or written to a file for future use. This "
"chapter will discuss some of the possibilities."
msgstr ""
"Existem várias maneiras de apresentar a saída de um programa; os dados "
"podem\n"
"ser exibidos ou impressos em forma legível para seres humanos, ou escritos "
"em\n"
"arquivos para uso posterior. Este capítulo apresenta algumas possibilidades."

#: ../../tutorial/inputoutput.rst:15
msgid "Fancier Output Formatting"
msgstr "Refinando a formatação de saída"

#: ../../tutorial/inputoutput.rst:17
msgid ""
"So far we've encountered two ways of writing values: *expression statements* "
"and the :keyword:`print` statement.  (A third way is using the :meth:`write` "
"method of file objects; the standard output file can be referenced as ``sys."
"stdout``. See the Library Reference for more information on this.)"
msgstr ""
"Até agora vimos duas maneiras de exibir valores no console interativo:\n"
"escrevendo expressões e usando o comando :keyword:`print`. Em programas,\n"
"apenas o :keyword:`print` gera saída. (Uma outra maneira é utilizar o "
"método\n"
":meth:`write` de objetos arquivo; a saída padrão pode ser referenciada como\n"
"``sys.stdout``. Veja a Referência da Biblioteca Python para mais "
"informações\n"
"sobre isto.)"

#: ../../tutorial/inputoutput.rst:22
msgid ""
"Often you'll want more control over the formatting of your output than "
"simply printing space-separated values.  There are two ways to format your "
"output; the first way is to do all the string handling yourself; using "
"string slicing and concatenation operations you can create any layout you "
"can imagine.  The string types have some methods that perform useful "
"operations for padding strings to a given column width; these will be "
"discussed shortly.  The second way is to use the :meth:`str.format` method."
msgstr ""
"Frequentemente é desejável mais controle sobre a formatação de saída do que\n"
"simplesmente exibir valores separados por espaços. Existem duas formas de\n"
"formatar a saída. A primeira é manipular strings através de fatiamento\n"
"(slicing) e concatenação. Os tipos string têm métodos úteis para criar "
"strings\n"
"com tamanhos determinados, usando caracteres de preenchimento; eles serão\n"
"apresentados a seguir. A segunda forma é usar o método :meth:`str.format`."

#: ../../tutorial/inputoutput.rst:30
msgid ""
"The :mod:`string` module contains a :class:`~string.Template` class which "
"offers yet another way to substitute values into strings."
msgstr ""
"O módulo :mod:`string` tem uma classe :class:`string.Template` que oferece\n"
"uma outra maneira de inserir valores em strings."

#: ../../tutorial/inputoutput.rst:33
msgid ""
"One question remains, of course: how do you convert values to strings? "
"Luckily, Python has ways to convert any value to a string: pass it to the :"
"func:`repr` or :func:`str` functions."
msgstr ""
"Permanece a questão: como converter valores para strings? Felizmente, "
"Python\n"
"possui duas maneiras de converter qualquer valor para uma string: as "
"funções\n"
":func:`repr` e :func:`str`."

#: ../../tutorial/inputoutput.rst:37
msgid ""
"The :func:`str` function is meant to return representations of values which "
"are fairly human-readable, while :func:`repr` is meant to generate "
"representations which can be read by the interpreter (or will force a :exc:"
"`SyntaxError` if there is no equivalent syntax).  For objects which don't "
"have a particular representation for human consumption, :func:`str` will "
"return the same value as :func:`repr`.  Many values, such as numbers or "
"structures like lists and dictionaries, have the same representation using "
"either function.  Strings and floating point numbers, in particular, have "
"two distinct representations."
msgstr ""
"A função :func:`str` serve para produzir representações de valores que "
"sejam\n"
"legíveis para as pessoas, enquanto :func:`repr` é para gerar representações\n"
"que o interpretador Python consegue ler (caso não exista uma forma de\n"
"representar o valor, a representação devolvida por :func:`repr` produz um\n"
":exc:`SyntaxError` [N.d.T. :func:`repr` procura gerar representações\n"
"fiéis; quando isso é inviável, é melhor encontrar um erro do que obter um\n"
"objeto diferente do original]). Para objetos que não têm uma representação\n"
"adequada para consumo humano, :func:`str` devolve o mesmo valor que\n"
":func:`repr`. Muitos valores, tal como inteiros e estruturas como listas e\n"
"dicionários, têm a mesma representação usando ambas funções. Strings e "
"números\n"
"de ponto flutuante, em particular, têm duas representações distintas."

#: ../../tutorial/inputoutput.rst:46
msgid "Some examples::"
msgstr "Alguns exemplos::"

#: ../../tutorial/inputoutput.rst:71
msgid "Here are two ways to write a table of squares and cubes::"
msgstr ""
"A seguir, duas maneiras de se escrever uma tabela de quadrados e cubos:::"

#: ../../tutorial/inputoutput.rst:103
msgid ""
"(Note that in the first example, one space between each column was added by "
"the way :keyword:`print` works: by default it adds spaces between its "
"arguments.)"
msgstr ""

#: ../../tutorial/inputoutput.rst:106
msgid ""
"This example demonstrates the :meth:`str.rjust` method of string objects, "
"which right-justifies a string in a field of a given width by padding it "
"with spaces on the left.  There are similar methods :meth:`str.ljust` and :"
"meth:`str.center`.  These methods do not write anything, they just return a "
"new string.  If the input string is too long, they don't truncate it, but "
"return it unchanged; this will mess up your column lay-out but that's "
"usually better than the alternative, which would be lying about a value.  "
"(If you really want truncation you can always add a slice operation, as in "
"``x.ljust(n)[:n]``.)"
msgstr ""
"Esse exemplo demonstra o método :meth:`str.rjust` de objetos string, que\n"
"alinha uma string à direita juntando espaços adicionais à esquerda. Existem\n"
"métodos análogas :meth:`str.ljust` e :meth:`str.center`. Esses métodos não\n"
"exibem nada na tela, apenas devolvem uma nova string formatada. Se a "
"entrada\n"
"extrapolar o comprimento especificado, a string original é devolvida sem\n"
"modificação; isso pode estragar o alinhamento das colunas, mas é melhor do "
"que\n"
"a alternativa, que seria apresentar um valor mentiroso. (Se for realmente\n"
"desejável truncar o valor, pode-se usar fatiamento, por exemplo:\n"
"``x.ljust(n)[:n]``.)"

#: ../../tutorial/inputoutput.rst:116
msgid ""
"There is another method, :meth:`str.zfill`, which pads a numeric string on "
"the left with zeros.  It understands about plus and minus signs::"
msgstr ""
"Existe ainda o método :meth:`str.zfill` que preenche uma string numérica "
"com\n"
"zeros à esquerda. Ele sabe lidar com sinais positivos e negativos::"

#: ../../tutorial/inputoutput.rst:126
msgid "Basic usage of the :meth:`str.format` method looks like this::"
msgstr "Um uso básico do método :meth:`str.format` é assim::"

#: ../../tutorial/inputoutput.rst:131
msgid ""
"The brackets and characters within them (called format fields) are replaced "
"with the objects passed into the :meth:`str.format` method.  A number in the "
"brackets refers to the position of the object passed into the :meth:`str."
"format` method. ::"
msgstr ""
"As chaves e seus conteúdos (chamados de campos de formatação) são "
"substituídos\n"
"pelos objetos passados para o método :meth:`str.format`, respeitando a "
"ordem\n"
"dos argumentos."

#: ../../tutorial/inputoutput.rst:141
msgid ""
"If keyword arguments are used in the :meth:`str.format` method, their values "
"are referred to by using the name of the argument. ::"
msgstr ""
"Se argumentos nomeados são passados para o método :meth:`str.format`, seus\n"
"valores pode ser identificados pelo nome do argumento::"

#: ../../tutorial/inputoutput.rst:148
msgid "Positional and keyword arguments can be arbitrarily combined::"
msgstr "Argumentos posicionais e nomeados podem ser combinados à vontade::"

#: ../../tutorial/inputoutput.rst:154
msgid ""
"``'!s'`` (apply :func:`str`) and ``'!r'`` (apply :func:`repr`) can be used "
"to convert the value before it is formatted. ::"
msgstr ""
"As marcações ``'!s'`` e ``'!r'`` podem ser usadas para forçar a conversão "
"de\n"
"valores aplicando respectivamente as funções :func:`str` e :func:`repr`::"

#: ../../tutorial/inputoutput.rst:163
msgid ""
"An optional ``':'`` and format specifier can follow the field name. This "
"allows greater control over how the value is formatted.  The following "
"example rounds Pi to three places after the decimal."
msgstr ""
"Após o identificador do campo, uma especificação de formato opcional pode "
"ser\n"
"colocada depois de ``:`` (dois pontos). O exemplo abaixo arredonda Pi até a\n"
"terceira casa após o ponto decimal."

#: ../../tutorial/inputoutput.rst:171
msgid ""
"Passing an integer after the ``':'`` will cause that field to be a minimum "
"number of characters wide.  This is useful for making tables pretty. ::"
msgstr ""
"Colocar um inteiro *n* logo após o ``:`` fará o campo ocupar uma largura\n"
"mínima de *n* caracteres. Isto é útil para organizar tabelas. ::"

#: ../../tutorial/inputoutput.rst:182
msgid ""
"If you have a really long format string that you don't want to split up, it "
"would be nice if you could reference the variables to be formatted by name "
"instead of by position.  This can be done by simply passing the dict and "
"using square brackets ``'[]'`` to access the keys ::"
msgstr ""
"Se você tem uma string de formatação muito longa que não deseja quebrar,\n"
"pode ser bom referir-se aos valores a serem formatados por nome em vez de\n"
"posição. Isto pode ser feito passando um dicionário usando colchetes ``[]``\n"
"para acessar as chaves::"

#: ../../tutorial/inputoutput.rst:192
msgid ""
"This could also be done by passing the table as keyword arguments with the "
"'**' notation. ::"
msgstr ""
"Isto também pode ser feito passando o dicionário como argumentos nomeados,\n"
"usando a notação ``**``::"

#: ../../tutorial/inputoutput.rst:199
msgid ""
"This is particularly useful in combination with the built-in function :func:"
"`vars`, which returns a dictionary containing all local variables."
msgstr ""
"Isto é particularmente útil em conjunto com a função embutida :func:`vars`,\n"
"que devolve um dicionário contendo todas as variáveis locais."

#: ../../tutorial/inputoutput.rst:202
msgid ""
"For a complete overview of string formatting with :meth:`str.format`, see :"
"ref:`formatstrings`."
msgstr ""
"Para uma visão completa da formatação de strings com :meth:`str.format`, "
"veja\n"
"a seção :ref:`formatstrings` na Referência da Biblioteca Python."

#: ../../tutorial/inputoutput.rst:207
msgid "Old string formatting"
msgstr "Formatação de strings à moda antiga: operador ``%``"

#: ../../tutorial/inputoutput.rst:209
msgid ""
"The ``%`` operator can also be used for string formatting. It interprets the "
"left argument much like a :c:func:`sprintf`\\ -style format string to be "
"applied to the right argument, and returns the string resulting from this "
"formatting operation. For example::"
msgstr ""
"O operador ``%`` também pode ser usado para formatação de strings. Ele\n"
"interpreta o operando da esquerda de forma semelhante à função\n"
":c:func:`sprintf` da linguagem C, aplicando a formatação ao operando da\n"
"direita, e devolvendo a string resultante. Por exemplo::"

#: ../../tutorial/inputoutput.rst:218
msgid "More information can be found in the :ref:`string-formatting` section."
msgstr ""
"Mais informações podem ser encontradas na seção :ref:`string-formatting` da\n"
"Referência da Biblioteca Python."

#: ../../tutorial/inputoutput.rst:224
msgid "Reading and Writing Files"
msgstr "Leitura e escrita de arquivos"

#: ../../tutorial/inputoutput.rst:230
msgid ""
":func:`open` returns a file object, and is most commonly used with two "
"arguments: ``open(filename, mode)``."
msgstr ""
"A função :func:`open` devolve um objeto arquivo, e é frequentemente usada "
"com\n"
"dois argumentos: ``open(nome_do_arquivo, modo)``."

#: ../../tutorial/inputoutput.rst:239
msgid ""
"The first argument is a string containing the filename.  The second argument "
"is another string containing a few characters describing the way in which "
"the file will be used.  *mode* can be ``'r'`` when the file will only be "
"read, ``'w'`` for only writing (an existing file with the same name will be "
"erased), and ``'a'`` opens the file for appending; any data written to the "
"file is automatically added to the end.  ``'r+'`` opens the file for both "
"reading and writing. The *mode* argument is optional; ``'r'`` will be "
"assumed if it's omitted."
msgstr ""
"O primeiro argumento é uma string contendo o nome do arquivo. O segundo\n"
"argumento é outra string contendo alguns caracteres que descrevem o modo "
"como\n"
"o arquivo será usado. O parâmetro ``mode`` pode ser ``'r'`` quando o "
"arquivo\n"
"será apenas lido, ``'w'`` para escrever (se o arquivo já existir seu "
"conteúdo\n"
"prévio será apagado), e ``'a'`` para abrir o arquivo para adição; qualquer\n"
"escrita será adicionada ao final do arquivo. A opção ``'r+'`` abre o "
"arquivo\n"
"tanto para leitura como para escrita. O parâmetro ``mode`` é opcional, em "
"caso\n"
"de omissão será assumido ``'r'``."

#: ../../tutorial/inputoutput.rst:248
msgid ""
"On Windows, ``'b'`` appended to the mode opens the file in binary mode, so "
"there are also modes like ``'rb'``, ``'wb'``, and ``'r+b'``.  Python on "
"Windows makes a distinction between text and binary files; the end-of-line "
"characters in text files are automatically altered slightly when data is "
"read or written.  This behind-the-scenes modification to file data is fine "
"for ASCII text files, but it'll corrupt binary data like that in :file:"
"`JPEG` or :file:`EXE` files.  Be very careful to use binary mode when "
"reading and writing such files.  On Unix, it doesn't hurt to append a "
"``'b'`` to the mode, so you can use it platform-independently for all binary "
"files."
msgstr ""
"No Windows, ``'b'`` adicionado a string de modo indica que o arquivo será "
"aberto em modo binário. Sendo assim, existem os modos compostos : 'rb', "
"'wb', e 'r+b'. O Windows faz distinção entre arquivos texto e binários: os "
"caracteres terminadores de linha em arquivos texto são alterados ao ler e "
"escrever. Essa mudança automática é útil em arquivos de texto ASCII, mas "
"corrompe arquivos binários como .JPEG ou .EXE. Seja cuidadoso e use sempre o "
"modo binário ao manipular tais arquivos. No Unix, não faz diferença colocar "
"um ``'b'`` no modo, então você pode usar isto sempre que quiser lidar com "
"arquivos binários de forma independente da plataforma. \n"
"(N.d.T. Para ler arquivos de texto contendo acentuação e outros caracteres\n"
"não-ASCII, a melhor prática desde o Python 2.6 é usar a função\n"
":func:`io.open`, do módulo :mod:`io`, em vez da função embutida :func:"
"`open`.\n"
"O motivo é que :func:`io.open` permite especificar a codificação logo ao "
"abrir\n"
"um arquivo em modo texto para leitura ou escrita. Desta forma, a leitura do\n"
"arquivo texto sempre devolverá objetos ``unicode``, independente da\n"
"codificação interna do arquivo no disco. E ao escrever em um arquivo aberto\n"
"via :func:`io.open`, basta enviar strings ``unicode``, pois a conversão para "
"o\n"
"encoding do arquivo será feita automaticamente. Note que ao usar\n"
":func:`io.open` sempre faz diferença especificar se o arquivo é binário ou\n"
"texto, em todos os sistemas operacionais: o modo texto é o default, mas se\n"
"quiser ser explícito coloque a letra ``t`` no parâmetro ``mode`` (ex. "
"``rt``,\n"
"``wt`` etc.); use a letra ``b`` (ex. ``rb``, ``wb`` etc.) para especificar\n"
"modo binário. Somente em modo texto os métodos de gravação e leitura aceitam "
"e\n"
"devolvem strings ``unicode``. Em modo binário, o método ``write`` aceita\n"
"strings de bytes, e os métodos de leitura devolvem strings de bytes também.)"

#: ../../tutorial/inputoutput.rst:262
msgid "Methods of File Objects"
msgstr "Métodos de objetos arquivo"

#: ../../tutorial/inputoutput.rst:264
msgid ""
"The rest of the examples in this section will assume that a file object "
"called ``f`` has already been created."
msgstr ""
"Para simplificar, o resto dos exemplos nesta seção assumem que um objeto\n"
"arquivo chamado ``f`` já foi criado."

#: ../../tutorial/inputoutput.rst:267
msgid ""
"To read a file's contents, call ``f.read(size)``, which reads some quantity "
"of data and returns it as a string.  *size* is an optional numeric "
"argument.  When *size* is omitted or negative, the entire contents of the "
"file will be read and returned; it's your problem if the file is twice as "
"large as your machine's memory. Otherwise, at most *size* bytes are read and "
"returned.  If the end of the file has been reached, ``f.read()`` will return "
"an empty string (``\"\"``). ::"
msgstr ""
"Para ler o conteúdo de um arquivo, invoque ``f.read(size)``, que lê um "
"punhado\n"
"de dados devolvendo-os como uma string de bytes ``str``. O argumento "
"numérico\n"
"*size* é opcional. Quando *size* é omitido ou negativo, todo o conteúdo do\n"
"arquivo é lido e devolvido; se o arquivo é duas vezes maior que memória da\n"
"máquina, o problema é seu. Caso contrário, no máximo *size* bytes serão "
"lidos\n"
"e devolvidos. Se o fim do arquivo for atingido, ``f.read()`` devolve uma\n"
"string vazia (``\"\"``). ::"

#: ../../tutorial/inputoutput.rst:280
msgid ""
"``f.readline()`` reads a single line from the file; a newline character (``"
"\\n``) is left at the end of the string, and is only omitted on the last "
"line of the file if the file doesn't end in a newline.  This makes the "
"return value unambiguous; if ``f.readline()`` returns an empty string, the "
"end of the file has been reached, while a blank line is represented by "
"``'\\n'``, a string containing only a single newline.   ::"
msgstr ""
"O método ``f.readline()`` lê uma única linha do arquivo; o caractere de "
"quebra\n"
"de linha (``'\\n'``) é mantido ao final da string, só não ocorrendo na "
"última\n"
"linha do arquivo, se ela não termina com uma quebra de linha. Isso elimina "
"a\n"
"ambiguidade do valor devolvido; se ``f.readline()`` devolver uma string "
"vazia,\n"
"então é certo que arquivo acabou. Linhas em branco são representadas por um\n"
"``'\\n'`` -- uma string contendo apenas o terminador de linha. ::"

#: ../../tutorial/inputoutput.rst:294
msgid ""
"For reading lines from a file, you can loop over the file object. This is "
"memory efficient, fast, and leads to simple code::"
msgstr ""
"Uma maneira alternativa de ler linhas do arquivo é iterar diretamente pelo "
"objeto arquivo. É eficiente, rápido e resulta em código mais simples::"

#: ../../tutorial/inputoutput.rst:303
msgid ""
"If you want to read all the lines of a file in a list you can also use "
"``list(f)`` or ``f.readlines()``."
msgstr ""
"Se desejar ler todas as linhas de um arquivo em uma lista pode-se usar "
"``list(f)`` ou ``f.readlines()``."

#: ../../tutorial/inputoutput.rst:306
msgid ""
"``f.write(string)`` writes the contents of *string* to the file, returning "
"``None``.   ::"
msgstr ""
"O método ``f.write(string)`` escreve o conteúdo da string de bytes para o\n"
"arquivo, devolvendo ``None``. ::"

#: ../../tutorial/inputoutput.rst:311
msgid ""
"To write something other than a string, it needs to be converted to a string "
"first::"
msgstr ""

#: ../../tutorial/inputoutput.rst:318
msgid ""
"``f.tell()`` returns an integer giving the file object's current position in "
"the file, measured in bytes from the beginning of the file.  To change the "
"file object's position, use ``f.seek(offset, from_what)``.  The position is "
"computed from adding *offset* to a reference point; the reference point is "
"selected by the *from_what* argument.  A *from_what* value of 0 measures "
"from the beginning of the file, 1 uses the current file position, and 2 uses "
"the end of the file as the reference point.  *from_what* can be omitted and "
"defaults to 0, using the beginning of the file as the reference point. ::"
msgstr ""
"O método ``f.tell()`` devolve um inteiro ``long`` que indica a posição "
"atual\n"
"de leitura ou escrita no arquivo, medida em bytes desde o início do "
"arquivo.\n"
"Para mudar a posição utilize ``f.seek(offset, de_onde)``. A nova posição é\n"
"computada pela soma do deslocamento *offset* a um ponto de referência\n"
"especificado pelo argumento *de_onde*. Se o valor de *de_onde* é 0, a\n"
"referência é o início do arquivo, 1 refere-se à posição atual, e 2 refere-"
"se\n"
"ao fim do arquivo. Este argumento pode ser omitido; o valor default é 0. ::"

#: ../../tutorial/inputoutput.rst:336
msgid ""
"When you're done with a file, call ``f.close()`` to close it and free up any "
"system resources taken up by the open file.  After calling ``f.close()``, "
"attempts to use the file object will automatically fail. ::"
msgstr ""
"Quando acabar de utilizar o arquivo, invoque ``f.close()`` para fechá-lo e\n"
"liberar recursos do sistema (buffers, descritores de arquivo etc.). "
"Qualquer\n"
"tentativa de acesso ao arquivo depois dele ter sido fechado resultará em\n"
"falha. ::"

#: ../../tutorial/inputoutput.rst:346
msgid ""
"It is good practice to use the :keyword:`with` keyword when dealing with "
"file objects.  This has the advantage that the file is properly closed after "
"its suite finishes, even if an exception is raised on the way.  It is also "
"much shorter than writing equivalent :keyword:`try`\\ -\\ :keyword:`finally` "
"blocks::"
msgstr ""
"É uma boa prática usar o comando :keyword:`with` ao lidar com objetos "
"arquivo.\n"
"Isto tem a vantagem de garantir que o arquivo seja fechado quando a "
"execução\n"
"sair do bloco dentro do :keyword:`with`, mesmo que uma exceção tenha sido\n"
"levantada. É também muito mais sucinto do que escrever os blocos\n"
":keyword:`try`\\ -\\ :keyword:`finally` necessários para garantir que isso\n"
"aconteça. ::"

#: ../../tutorial/inputoutput.rst:356
msgid ""
"File objects have some additional methods, such as :meth:`~file.isatty` and :"
"meth:`~file.truncate` which are less frequently used; consult the Library "
"Reference for a complete guide to file objects."
msgstr ""
"Objetos arquivo têm métodos adicionais, como :meth:`~file.isatty` e\n"
":meth:`~file.truncate` que são usados com menos frequência; consulte a\n"
"Referência da Biblioteca Python para mais informações."

#: ../../tutorial/inputoutput.rst:364
msgid "Saving structured data with :mod:`json`"
msgstr "Gravando dados estruturados com :mod:`json`"

#: ../../tutorial/inputoutput.rst:368
msgid ""
"Strings can easily be written to and read from a file.  Numbers take a bit "
"more effort, since the :meth:`read` method only returns strings, which will "
"have to be passed to a function like :func:`int`, which takes a string like "
"``'123'`` and returns its numeric value 123.  When you want to save more "
"complex data types like nested lists and dictionaries, parsing and "
"serializing by hand becomes complicated."
msgstr ""
"Strings podem ser facilmente gravadas e lidas em um arquivo. Números dão um "
"pouco mais de trabalho, já que o método :meth:`read` só retorna strings, que "
"terão que ser passadas para uma função como :func:`int`, que pega uma string "
"como ``'123'`` e retorna seu valor numérico 123.  Quando você deseja salvar "
"tipos de dados mais complexos, como listas e dicionários aninhados, a "
"análise e serialização manual tornam-se complicadas."

#: ../../tutorial/inputoutput.rst:375
msgid ""
"Rather than having users constantly writing and debugging code to save "
"complicated data types to files, Python allows you to use the popular data "
"interchange format called `JSON (JavaScript Object Notation) <http://json."
"org>`_.  The standard module called :mod:`json` can take Python data "
"hierarchies, and convert them to string representations; this process is "
"called :dfn:`serializing`.  Reconstructing the data from the string "
"representation is called :dfn:`deserializing`.  Between serializing and "
"deserializing, the string representing the object may have been stored in a "
"file or data, or sent over a network connection to some distant machine."
msgstr ""
"Ao invés de ter usuários constantemente escrevendo e depurando código para "
"gravar tipos complicados de dados em arquivos, o Python permite que se use o "
"popular formato de troca de dados chamado `JSON (JavaScript Object Notation) "
"<http://json.org>`_. O módulo padrão chamado :mod:`json` pode pegar "
"hierarquias de dados em Python e convertê-las em representações de strings; "
"esse processo é chamado :dfn:`serialização`. Reconstruir os dados da "
"representação string é chamado :dfn:`desserialização`. Entre serializar e "
"desserializar, a string que representa o objeto pode ser armazenada em um "
"arquivo ou estrutura de dados, ou enviada por uma conexão de rede para "
"alguma outra máquina."

#: ../../tutorial/inputoutput.rst:386
msgid ""
"The JSON format is commonly used by modern applications to allow for data "
"exchange.  Many programmers are already familiar with it, which makes it a "
"good choice for interoperability."
msgstr ""
"O formato JSON é comumente usado por aplicativos modernos para permitir a "
"troca de dados. Pessoas que programam já estão familiarizados com esse "
"formato, o que o torna uma boa opção para interoperabilidade."

#: ../../tutorial/inputoutput.rst:390
msgid ""
"If you have an object ``x``, you can view its JSON string representation "
"with a simple line of code::"
msgstr ""
"Um objeto ``x``, pode ser visualizado na sua representação JSON com uma "
"simples linha de código::"

#: ../../tutorial/inputoutput.rst:397
msgid ""
"Another variant of the :func:`~json.dumps` function, called :func:`~json."
"dump`, simply serializes the object to a file.  So if ``f`` is a :term:`file "
"object` opened for writing, we can do this::"
msgstr ""

#: ../../tutorial/inputoutput.rst:403
msgid ""
"To decode the object again, if ``f`` is a :term:`file object` which has been "
"opened for reading::"
msgstr ""

#: ../../tutorial/inputoutput.rst:408
msgid ""
"This simple serialization technique can handle lists and dictionaries, but "
"serializing arbitrary class instances in JSON requires a bit of extra "
"effort. The reference for the :mod:`json` module contains an explanation of "
"this."
msgstr ""
"Essa técnica de serialização simples pode manipular listas e dicionários, "
"mas a serialização de instâncias de classe arbitrárias no JSON requer um "
"pouco mais de esforço. A referência para o módulo :mod:`json` contém uma "
"explicação disso."

#: ../../tutorial/inputoutput.rst:414
msgid ":mod:`pickle` - the pickle module"
msgstr "O módulo :mod:`pickle`"

#: ../../tutorial/inputoutput.rst:416
msgid ""
"Contrary to :ref:`JSON <tut-json>`, *pickle* is a protocol which allows the "
"serialization of arbitrarily complex Python objects.  As such, it is "
"specific to Python and cannot be used to communicate with applications "
"written in other languages.  It is also insecure by default: deserializing "
"pickle data coming from an untrusted source can execute arbitrary code, if "
"the data was crafted by a skilled attacker."
msgstr ""
"Ao contrário do :ref:`JSON <tut-json>`, *pickle* é um protocolo que permite "
"a serialização de objetos Python arbitrariamente complexos. Por isso, é "
"específico do Python e não pode ser usado para se comunicar com aplicativos "
"escritos em outros idiomas. Também é inseguro por padrão: desserializar "
"dados de pickle, provenientes de uma fonte não confiável, pode executar "
"código arbitrário, se os dados foram criados por um invasor habilidoso."
